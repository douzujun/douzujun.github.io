<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Coursera Deep Learning笔记 改善深层神经网络：超参数调试、正则化以及优化</title>
    <url>/posts/27134.html</url>
    <content><![CDATA[<p>Coursera Deep Learning笔记 改善深层神经网络：超参数调试、正则化以及优化</p>
<a id="more"></a>
<p>摘抄自：https://xienaoban.github.io/posts/41302.html</p>
<h1 id="训练集验证集测试集train-dev-test-sets">训练集、验证集、测试集(Train, Dev, Test Sets)</h1>
<ul>
<li>当数据量小的时候, 70% 训练, 30% 测试；或 60% 训练、20% 验证、20%测试.
<ul>
<li>训练集( training set)：用来训练模型，即被用来 学习 得到系统的 参数取值.</li>
<li>测试集( testing set)：用于最终报告模型的评价结果，因此在训练阶段测试集中的样本应该是不可见的.</li>
<li><strong>对训练集做进一步划分为 训练集、验证集 validation set.</strong>
<ul>
<li>验证集：与测试集类似，也是用于评估模型的性能.</li>
<li>区别：是 验证集 主要 用于 模型选择 和 调整超参数，因而一般不用于报告最终结果.</li>
</ul></li>
</ul></li>
<li><p>当我们有大于100万条数据时, 测试集验证集各取1万条即可, 足以评估单个分类器.</p></li>
<li><strong>确保验证集 和 测试集的数据来自同一分布.</strong></li>
<li><p>如果不需要无偏估计, 可以不设置测试集；当没设立测试集的时候, 验证集通常被人们称为测试集.</p></li>
</ul>
<h1 id="偏差方差bias-variance">偏差、方差(Bias, Variance)</h1>
<ul>
<li>高偏差(high bias)称为&quot;欠拟合&quot;(underfitting), 训练集误差与验证集误差都高.
<ul>
<li>选择一个新的网络，比如含有更多隐藏层或者隐藏单元的网络，或者花费更多时间来训练网络，或者尝试更先进的优化算法【后面深入讲解】</li>
</ul></li>
<li>高方差(high variance)称为&quot;过拟合&quot;(overfitting), 训练集误差很低，而验证集误差很高.
<ul>
<li>解决方法是 <strong>正则化</strong></li>
<li>准备更多的数据.</li>
</ul></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200608152929057-904903497.png" style="zoom:70%"> <img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200608154754615-1627054430.png" style="zoom:72%"></p>
<h1 id="正则化regularization">正则化(Regularization)</h1>
<blockquote>
<p>避免过拟合，减少网络误差</p>
</blockquote>
<h2 id="逻辑回归中的l1正则化-l2正则化">逻辑回归中的L1正则化, L2正则化</h2>
<p>对于L1正则化, 为代价函数添加L1范数:</p>
<p><span class="math display">\[
J(w, b) = \frac{1}{m} \sum^{m}_{i=1} \mathcal{L}(a^{(i)}, y^{(i)}) + \frac{\lambda}{2m} ||w||_1
\]</span></p>
<p>其中：</p>
<p><span class="math display">\[
||w||_1 = \sum^{n_x}_{j=1} |w_j|
\]</span></p>
<ul>
<li>使用L1正则化, w最终会是稀疏的(w中含很多0), 有利于压缩模型</li>
<li>但也没有降低太多内存, 所以不能将压缩作为L1正则化的目的。通常我们使用L2正则化.</li>
</ul>
<hr>
<p>对于L2正则化, 为代价函数添加L2范数:</p>
<p><span class="math display">\[
J(w, b) = \frac{1}{m} \sum^{m}_{i=1} \mathcal{L}(a^{(i)}, y^{(i)}) + \frac{\lambda}{2m} ||w||_2^2
\]</span></p>
<p>其中： <span class="math display">\[
||w||^2_2 = \sum^{n_x}_{j=1} w_j^2 = w^Tw
\]</span></p>
<p>尽管 <span class="math inline">\(b\)</span> 也是参数, 但我们没有必要添加 <span class="math inline">\(\frac{\lambda}{2m}b^2\)</span> 项， 因为 <span class="math inline">\(w\)</span> 几乎涵盖了所有参数, 而 <span class="math inline">\(b\)</span> 只是众多参数中的一个, 可以忽略不计(当然加上也没问题).</p>
<h2 id="神经网络中的l2正则化">神经网络中的L2正则化</h2>
<p>对于神经网络L2正则化，为代价函数添加L2范数： <span class="math display">\[
J(w, b) = \frac{1}{m} \sum^{m}_{i=1} \mathcal{L}(\hat{y}^{(i)}, y^{(i)}) + \frac{\lambda}{2m} \sum_{l=1}^{L}||w||_F^2   \\
注: W: (n^{[l-1]}, n^{[l]})
\]</span></p>
<p>其中，弗罗贝尼乌斯范数(即矩阵L2范数,矩阵中所有元素平方和): <span class="math display">\[
||w^{[l]}||_F^2 = \sum_{i=1}^{n^{[l-1]}} \sum_{j=1}^{n^{[l]}} (w_{ij}^{[l]})^2
\]</span> 则在反向传播时, <span class="math display">\[
\begin{aligned}
dw^{[l]} &amp; = (\text{from backprop}) + \frac{\lambda}{m}w^{[l]} \\
w^{[l]} &amp; = w^{[l]} -\alpha dw^{[l]} \\
\end{aligned}
\]</span> 正则项说明, 无论 <span class="math inline">\(w^{[l]}\)</span> 是什么, 我们都努力使之更小(趋于0). 则计算得的 <span class="math inline">\(z^{[l]}=w^{[l]}a^{[l−1]}+b^{[l]}\)</span> 此时也更小；</p>
<p><span class="math inline">\(z^{[l]}\)</span> 更容易(以tanh例) 落在激活函数 <span class="math inline">\(g(z^{[l]})\)</span> 中间那一段接近线性的部分, 以达到简化网络的目的</p>
<ul>
<li>注：线性的激活函数使得无论多少层的网络, 效果都和一层一样</li>
</ul>
<h2 id="随机失活dropout正则化">随机失活(Dropout)正则化</h2>
<ul>
<li>对每一轮的训练, Dropout 遍历网络的每一层, 设置神经网络中每一层每个节点的失活概率</li>
<li>被随机选中失活的节点临时被消除, 不参与本轮的训练, 于是得到一个更小的网络.</li>
</ul>
<p>最常用的为 <strong>反向随机失活(Inverted Dropout)</strong> .</p>
<blockquote>
<ul>
<li><p>该方法在向前传播时, 根据随机失活的概率 (例如0.2)，将每一层(例如 <span class="math inline">\(l\)</span> 层)的 <span class="math inline">\(a^{[l]}\)</span> 矩阵(a=g(z)) 中被选中失活的元素置为0， 则该层的 <span class="math inline">\(a^{[l]}\)</span> 相当于少了 20% 的元素.</p></li>
<li><p>为了不影响下一层 <span class="math inline">\(z^{[l+1]}\)</span> 的期望值, 我们需要 <span class="math inline">\(a^{[l]}\)</span> /= 0.8 以修正权重.</p></li>
</ul>
</blockquote>
<p>由于训练时的 &quot;<span class="math inline">\(a^{[l]}\)</span> /= 0.8&quot; 修复了权重, 在测试阶段无需使用 Dropout. Dropout 不能与梯度检验同时使用，因为 Dropout 在梯度下降上的代价函数J难以计算.</p>
<h2 id="其他正则化">其他正则化</h2>
<p>数据扩增:</p>
<ul>
<li>比如训练分类猫咪的图片, 将图片左右翻转、旋转一个小角度、稍微变形处理等, 可以人工合成数据.</li>
</ul>
<p>Early Stopping:</p>
<ul>
<li>运行梯度下降时, 我们可以绘制训练误差, 当验证集误差不降反增的时候, 停止训练.</li>
<li>缺点：是可能导致代价J值不够小, 却又没解决继续训练可能导致的过拟合问题.</li>
</ul>
<h1 id="归一化normalizing">归一化(Normalizing)</h1>
<p>输入的归一化有两个步骤:</p>
<pre><code>1. 均值调整为0
2. 方差归一化</code></pre>
<p>归一化直观的理解就是使得代价函数更圆, 更容易优化代价函数.</p>
<h1 id="梯度消失爆炸vanishing-exploding-gradients">梯度消失/爆炸(Vanishing / Exploding Gradients)</h1>
<p>为了方便理解，假设使用了线性激活函数 g(z)=z , 且</p>
<p><span class="math display">\[
W=W^{[L-1]}=...=W^{[2]}=W^{[1]}
\]</span></p>
<p>则： <span class="math display">\[
\begin{aligned}
\hat{y} &amp; = W^{[L]}W^{[L-1]}...W^{[2]}W^{[1]}x \\
&amp; = W^{[L]}W^{L-1}x
\end{aligned}
\]</span></p>
<p>可知若 <span class="math inline">\(W\)</span> 中有元素权重为 1.5 , 则最终得到 <span class="math inline">\({1.5}^{L−1}\)</span> 若层数很深, 计算得 <span class="math inline">\(\hat{y}\)</span> 也很大;</p>
<p>同理若权重为 0.5 , 进行 L−1 次幂运算后值会很小. 这便是梯度爆炸 与 梯度消失.</p>
<p><strong>有效的解决方案:</strong></p>
<ul>
<li><p>由于 <span class="math inline">\(z=w_1x_1+w_2x_2+...+w_nx_n\)</span> (忽略 <span class="math inline">\(b\)</span>), 为了预防 <span class="math inline">\(z\)</span> 太大或太小, 则 <span class="math inline">\(n\)</span> 越大时, 期望 <span class="math inline">\(w_i\)</span> 越小</p></li>
<li>则在随机(0~1)初始化 <span class="math inline">\(W\)</span> 时, 我们对其乘上一个小于1的倍数, 使之更小.
<ul>
<li>对于Tanh， 权重乘上 <span class="math inline">\(\sqrt{\frac{1}{n^{[l-1]}}}​\)</span> 或者 <span class="math inline">\(\sqrt{\frac{2}{n^{[l-1]}+n^{[l]}}}​\)</span></li>
<li>对于Relu， 权重乘上 <span class="math inline">\(\sqrt{\frac{2}{n^{[l-1]}}}​\)</span></li>
</ul></li>
</ul>
<h1 id="梯度检验">梯度检验</h1>
<p>在反向传播的时候, 如果怕自己 <span class="math inline">\(d\theta[i] = \frac{\partial J}{\partial \theta_i}\)</span> 等算错, 可以用导数的定义, 计算</p>
<p><span class="math display">\[
d\theta_{approx}[i] = \frac{J(\theta_1, \theta_2, ..., \theta_i + \varepsilon, ...) - J(\theta_1, \theta_2, ..., \theta_i - \varepsilon, ...)}{2\varepsilon}
\]</span></p>
<p>然后根据两者误差估计自己是否算错. 该方法仅用来调试, 且不能同 Dropout 同时使用.</p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>Coursera Deep Learning</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Coursera Deep Learning笔记 逻辑回归典型的训练过程</title>
    <url>/posts/20321.html</url>
    <content><![CDATA[<p>Deep Learning 用逻辑回归训练图片的典型步骤.</p>
<a id="more"></a>
<p>笔记摘自：<a href="https://xienaoban.github.io/posts/59595.html" target="_blank" rel="noopener" class="uri">https://xienaoban.github.io/posts/59595.html</a></p>
<h1 id="处理数据">处理数据</h1>
<h2 id="向量化vectorization">向量化(Vectorization)</h2>
<p>将每张图片的高和宽和RGB展为向量，最终X的shape为 <code>(height*width*3, m)</code> .</p>
<h2 id="特征归一化normalization">特征归一化(Normalization)</h2>
<blockquote>
<p>对于一般数据，使用标准化(Standardization)：<span class="math inline">\(X_{scale} = \frac{(X(axis=0) - X.mean(axis=0))}{X.std(axis=0)}\)</span></p>
</blockquote>
<ul>
<li><code>z_i = (x_i - mean) / delta</code> , <code>mean</code> 与 <code>delta</code> 代表X的均值和标准差. 最终特征处于[-1, 1]区间.</li>
</ul>
<blockquote>
<p>对于图片, 可直接使用Min-Max Scaling</p>
</blockquote>
<ul>
<li>即将每个特征除以255(每个像素分为R, G, B, 范围在0~255)使得值处于[0, 1].</li>
</ul>
<h1 id="初始化参数">初始化参数</h1>
<p>一般将 <code>w</code> 和 <code>b</code> 随机选择.</p>
<h1 id="梯度下降gradient-descent">梯度下降(Gradient descent)</h1>
<p>根据 <code>w</code> , <code>b</code> 和训练集，来训练数据.</p>
<ul>
<li>需要设定 <u>迭代次数</u> 与 <u>学习率</u> .</li>
</ul>
<p>以下为大循环(迭代次数)中内容：</p>
<h2 id="计算代价函数">计算代价函数</h2>
<p>对于<span class="math inline">\(x^{(i)} \in X\)</span>， 有 <span class="math display">\[
z^{(i)} = w^Tx^{(i)} + b
\]</span></p>
<p><span class="math display">\[
a^{(i)} = \hat{y}^{(i)} = sigmod(z^{(i)}) = \sigma(z^{(i)}) = \frac{1}{1 + e^{-z^{(i)}}}
\]</span></p>
<p><span class="math display">\[
loss: {L}(a^{(i)}, y^{(i)}) = {L}(\hat{y}^{(i)}, y^{(i)}) = - y^{(i)}  \log(a^{(i)}) - (1-y^{(i)} )  \log(1-a^{(i)})
\]</span></p>
<p><span class="math display">\[
A = (a^{(1)}, a^{(2)}, ... , a^{(m-1)}, a^{(m)}) 
  = \sigma(w^TX+b) 
  = \frac{1}{1+e^{-(w^TX+b)}}
\]</span></p>
<p><span class="math display">\[
cost:J(w,b) = -\frac{1}{m} \sum^{m}_{i=1} \mathcal{L}(\hat{y}^{(i)}, y^{(i)}) 
  = -\frac{1}{m} \sum^{m}_{i=1} (y^{(i)} log(a^{(i)}) + (1-y^{(i)}) log(1-a^{(i)}))
\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 激活函数</span></span><br><span class="line">A = sigmoid(w.T.dot(X) + b)</span><br><span class="line"><span class="comment"># 代价函数</span></span><br><span class="line">cost = -np.sum(Y * np.log(A) + (<span class="number">1</span>-Y) * np.log(<span class="number">1</span> - A)) / m</span><br></pre></td></tr></table></figure>
<h2 id="计算反向传播的梯度">计算反向传播的梯度</h2>
<blockquote>
<p>即：对 <span class="math inline">\(J = -\dfrac{1}{m} \sum L(a, y)\)</span> 计算导数，即对<span class="math inline">\({L}(a, y)\)</span> 计算导数，以下求导，均省略上标。</p>
<p>求：<span class="math inline">\(\dfrac{\partial J}{\partial w}\)</span> 和 <span class="math inline">\(\dfrac{\partial J}{\partial b} ​\)</span> (dw 和 db)</p>
</blockquote>
<p><span class="math display">\[
\dfrac{\partial L}{\partial a}
= \dfrac{\partial L(a, y)}{\partial a}
= -\frac{y}{a} + \frac{1-y}{1-a}
\]</span></p>
<p><span class="math display">\[
\dfrac{da}{dz}
= (\frac{1}{1 + e^{-z}})&#39;
= \dfrac{e^{-z}}{(1+e^{-z})^2}
= \dfrac{1}{1+e^{-z}} - \dfrac{1}{(1+e^{-z})^2}
= a-a^2
= a · (1-a)
\]</span></p>
<p><span class="math display">\[
\dfrac{\partial L}{\partial z}
= \dfrac{\partial L}{\partial a} \dfrac{da}{dz}
= (-\dfrac{y}{a} + \dfrac{1-y}{1-a}) · a · (1-a)
= a - y
\]</span></p>
<p><span class="math display">\[
\dfrac{\partial L}{\partial w}
= \dfrac{\partial L}{\partial z} \dfrac{\partial z}{\partial w}
= (a-y) · x
\]</span></p>
<p><span class="math display">\[
\dfrac{\partial L}{\partial b}
= \dfrac{\partial L}{\partial z} \dfrac{\partial z}{\partial b}
= a-y
\]</span></p>
<p>根据 <span class="math inline">\(J = -\dfrac{1}{m} \sum L(a, y)​\)</span> 最终可得： <span class="math display">\[
\dfrac{\partial J}{\partial w}
= \dfrac{\partial J}{\partial a} \dfrac{\partial a}{\partial w}
= \dfrac{1}{m} X(A-Y)^T
\]</span></p>
<p><span class="math display">\[
\dfrac{\partial J}{\partial b} = \dfrac{1}{m} \sum^{m}_{i=1} (a^{(i)} - y^{(i)})
\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dw = X.dot((A - Y).T) / m</span><br><span class="line">db = np.sum(A - Y) / m</span><br></pre></td></tr></table></figure>
<h2 id="更新-w-b">更新 <code>w</code> , <code>b</code></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w = w - learning_rate * dw</span><br><span class="line">b = b - learning_rate * db</span><br></pre></td></tr></table></figure>
<h1 id="预测测试集">预测测试集</h1>
<ul>
<li><p>使用训练出来的 <code>w</code> , <code>b</code> , 对测试集使用 <code>y_pred = sigmoid(wx+b)</code> , 计算得预测的概率</p></li>
<li><p>对其取整, 例如大于0.7则判定为 '是', 否则为'否'.</p></li>
</ul>
<h1 id="实例实现一个图像识别算法">实例：实现一个图像识别算法</h1>
<p><a href="https://www.cnblogs.com/douzujun/p/10267165.html" target="_blank" rel="noopener" class="uri">https://www.cnblogs.com/douzujun/p/10267165.html</a></p>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>Coursera Deep Learning</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Coursera Deep Learning笔记 一步步实现神经网络</title>
    <url>/posts/56835.html</url>
    <content><![CDATA[<p>一步步实现神经网络，并实现一个识别猫的应用</p>
<a id="more"></a>
<ul>
<li>公式推导</li>
</ul>
<p>https://www.cnblogs.com/douzujun/p/13046923.html https://xienaoban.github.io/posts/12524.html</p>
<ul>
<li><a href="https://www.cnblogs.com/douzujun/p/10325980.html" target="_blank" rel="noopener">代码拆分实现</a>
<ol type="1">
<li>Initialize parameters / Define hyperparameters</li>
<li>Loop for num_iterations:
<ol type="a">
<li>Forward propagation</li>
<li>Compute cost function</li>
<li>Backward propagation</li>
<li>Update parameters (using parameters, and grads from backprop)</li>
</ol></li>
<li>Use trained parameters to predict labels</li>
</ol></li>
<li><a href="https://www.cnblogs.com/douzujun/p/10344361.html" target="_blank" rel="noopener">实例：用手写神经网络实现识别猫</a></li>
</ul>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>Coursera Deep Learning</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Homework of deepLearning by Andrew Ng</title>
    <url>/posts/45669.html</url>
    <content><![CDATA[<p>吴恩达深度学习课程的课堂笔记以及课后作业</p>
<a id="more"></a>
<p>代码下载：<a href="https://github.com/douzujun/Deep-Learning-Coursera" target="_blank" rel="noopener" class="uri">https://github.com/douzujun/Deep-Learning-Coursera</a></p>
<h1 id="课程1---神经网络和深度学习">课程1 - 神经网络和深度学习</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">周数</th>
<th style="text-align: center;">名称</th>
<th style="text-align: center;">类型</th>
<th style="text-align: center;">地址</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">week1</td>
<td style="text-align: center;">深度学习简介</td>
<td style="text-align: center;">测验</td>
<td style="text-align: center;">略</td>
</tr>
<tr class="even">
<td style="text-align: center;">week2</td>
<td style="text-align: center;">神经网络基础</td>
<td style="text-align: center;">笔记</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/10250917.html" target="_blank" rel="noopener">逻辑回归</a> <a href="https://www.cnblogs.com/douzujun/p/13036584.html" target="_blank" rel="noopener">逻辑回归推导</a></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">具有神经网络思维的Logistic回归</td>
<td style="text-align: center;">编程作业</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/10267165.html" target="_blank" rel="noopener">识别猫</a></td>
</tr>
<tr class="even">
<td style="text-align: center;">week3</td>
<td style="text-align: center;">浅层神经网络</td>
<td style="text-align: center;">笔记</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/10282133.html" target="_blank" rel="noopener">浅层神经网络</a></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">带有一个隐藏层的平面数据分类</td>
<td style="text-align: center;">编程作业</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/10289799.html" target="_blank" rel="noopener">平面数据分类</a></td>
</tr>
<tr class="even">
<td style="text-align: center;">week4</td>
<td style="text-align: center;">深度神经网络的关键概念</td>
<td style="text-align: center;">笔记</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/10316856.html" target="_blank" rel="noopener">深层神经网络</a> <a href="https://www.cnblogs.com/douzujun/p/13046923.html" target="_blank" rel="noopener">公式推导</a></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">一步步搭建多层神经网络</td>
<td style="text-align: center;">编程作业</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/10325980.html" target="_blank" rel="noopener">手写神经网络</a></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">深层神经网络应用 (识别猫)</td>
<td style="text-align: center;">编程作业</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/10344361.html" target="_blank" rel="noopener">识别猫</a></td>
</tr>
</tbody>
</table>
<h1 id="课程2---改善深层神经网络超参数调试正则化以及优化">课程2 - 改善深层神经网络：超参数调试、正则化以及优化</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">周数</th>
<th style="text-align: center;">名称</th>
<th style="text-align: center;">类型</th>
<th style="text-align: center;">地址</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">week1</td>
<td style="text-align: center;">改善深层神经网络：超参数调试 正则化以及梯度相关</td>
<td style="text-align: center;">笔记</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13065303.html" target="_blank" rel="noopener">超参数调试 正则化以及梯度相关</a></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">编程作业</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13072511.html" target="_blank" rel="noopener">Initializaion</a><br><a href="https://www.cnblogs.com/douzujun/p/13074312.html" target="_blank" rel="noopener">Regularization</a><br><a href="https://www.cnblogs.com/douzujun/p/13084271.html" target="_blank" rel="noopener">GradientChecking</a></td>
</tr>
<tr class="odd">
<td style="text-align: center;">week2</td>
<td style="text-align: center;">改善深层神经网络：优化算法</td>
<td style="text-align: center;">笔记</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13084911.html" target="_blank" rel="noopener">优化算法</a></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">编程作业</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13092358.html" target="_blank" rel="noopener">Optimization Methods</a></td>
</tr>
<tr class="odd">
<td style="text-align: center;">week3</td>
<td style="text-align: center;">改善深层神经网络：超参数调试 Batch归一化 Softmax</td>
<td style="text-align: center;">笔记</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13096953.html" target="_blank" rel="noopener">超参数调试 Batch归一化 Softmax</a></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">编程作业</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13109664.html" target="_blank" rel="noopener">Tensorflow 实现手势识别</a></td>
</tr>
</tbody>
</table>
<h1 id="课程3---结构化机器学习项目">课程3 - 结构化机器学习项目</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">周数</th>
<th style="text-align: center;">名称</th>
<th style="text-align: center;">类型</th>
<th style="text-align: center;">地址</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">week1</td>
<td style="text-align: center;">结构化机器学习项目（上）</td>
<td style="text-align: center;">笔记</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13115848.html" target="_blank" rel="noopener">结构化机器学习项目 （上）</a></td>
</tr>
<tr class="even">
<td style="text-align: center;">week2</td>
<td style="text-align: center;">结构化机器学习项目（下）</td>
<td style="text-align: center;">笔记</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13122094.html" target="_blank" rel="noopener">结构化机器学习项目 （下）</a></td>
</tr>
</tbody>
</table>
<h1 id="课程4---卷积神经网络">课程4 - 卷积神经网络</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">周数</th>
<th style="text-align: center;">名称</th>
<th style="text-align: center;">类型</th>
<th style="text-align: center;">地址</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">week1</td>
<td style="text-align: center;">卷积神经网络基础</td>
<td style="text-align: center;">笔记</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13125622.html" target="_blank" rel="noopener">卷积神经网络基础</a></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">编程作业</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13137696.html" target="_blank" rel="noopener">一步步搭建CNN模型</a><br><a href="https://www.cnblogs.com/douzujun/p/13143708.html" target="_blank" rel="noopener">TensorFlow实现手势数字识别</a></td>
</tr>
<tr class="odd">
<td style="text-align: center;">week2</td>
<td style="text-align: center;">深度卷积网络</td>
<td style="text-align: center;">笔记</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13154258.html" target="_blank" rel="noopener">深度卷积网络</a></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">编程作业</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13158507.html" target="_blank" rel="noopener">Keras tutorial - 笑脸识别</a> <br><a href="https://www.cnblogs.com/douzujun/p/13160666.html" target="_blank" rel="noopener">Residual Networks</a></td>
</tr>
<tr class="odd">
<td style="text-align: center;">week3</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">笔记</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">编程作业</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;">week4</td>
<td style="text-align: center;"></td>
<td style="text-align: center;">笔记</td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">编程作业</td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">编程作业</td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<h1 id="课程5---序列模型">课程5 - 序列模型</h1>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">周数</th>
<th style="text-align: center;">名称</th>
<th style="text-align: center;">类型</th>
<th style="text-align: center;">地址</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">week1</td>
<td style="text-align: center;">循环序列模型[RNN GRU LSTM]</td>
<td style="text-align: center;">笔记</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13162263.html" target="_blank" rel="noopener">序列模型1</a></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">编程作业</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13179646.html" target="_blank" rel="noopener">一步步实现RNN与LSTM</a> <br> <a href="https://www.cnblogs.com/douzujun/p/13193588.html" target="_blank" rel="noopener">Character level language model</a> <br><a href="https://www.cnblogs.com/douzujun/p/13196807.html" target="_blank" rel="noopener">LSTM网络生成爵士乐</a></td>
</tr>
<tr class="odd">
<td style="text-align: center;">week2</td>
<td style="text-align: center;">NLP &amp; Word Embeddings</td>
<td style="text-align: center;">笔记</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13202281.html" target="_blank" rel="noopener">序列模型（二）</a></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">编程作业</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13211014.html" target="_blank" rel="noopener">词向量的操作</a> <br><a href="https://www.cnblogs.com/douzujun/p/13216532.html" target="_blank" rel="noopener">Emoji表情生成器</a></td>
</tr>
<tr class="odd">
<td style="text-align: center;">week3</td>
<td style="text-align: center;">Sequence models &amp; Attention mechanism</td>
<td style="text-align: center;">笔记</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13232215.html" target="_blank" rel="noopener">序列模型（三）</a></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;">编程作业</td>
<td style="text-align: center;"><a href="https://www.cnblogs.com/douzujun/p/13251998.html" target="_blank" rel="noopener">Neural Machine Translation with Attention</a><br><a href="https://www.cnblogs.com/douzujun/p/13258637.html" target="_blank" rel="noopener">Trigger Word Detection</a></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>深度学习</category>
        <category>Coursera Deep Learning</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>python</tag>
        <tag>TensorFlow</tag>
        <tag>Keras</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch-从零开发NLP聊天机器人</title>
    <url>/posts/53738.html</url>
    <content><![CDATA[<p>基于python 从零实现NLP聊天机器人</p>
<a id="more"></a>
<p><a href="https://github.com/douzujun/NLP-Chatbot" target="_blank" rel="noopener">全部代码</a></p>
<p><a href="https://share.weiyun.com/5Yb4vI4" target="_blank" rel="noopener">已训练模型</a></p>
<h1 id="聊天机器人综合介绍">聊天机器人综合介绍</h1>
<p><img src="https://img2020.cnblogs.com/blog/817161/202009/817161-20200905124836635-1199875296.png" style="width:700px; height:350px"></p>
<h1 id="nlp基础">NLP基础</h1>
<ul>
<li><font size="4px"><strong>NLP领域</strong></font></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202009/817161-20200905170054672-1508205467.png" style="width:400px;height=500px"><br></p>
<p><img src="https://img2020.cnblogs.com/blog/817161/202009/817161-20200905170234936-535970560.png" style="width:350px;height=450px"></p>
<ul>
<li><font size="4px"><strong>NLP研究难点</strong></font></li>
</ul>
<blockquote>
<ul>
<li><p>单词边界界定</p></li>
<li><p>词义的消歧</p></li>
<li><p>不规范的输入</p></li>
<li><p>句法的模糊性</p></li>
<li><p>语言行为与计划</p></li>
</ul>
</blockquote>
<ul>
<li><font color="red" size="4px"><strong>词处理</strong></font></li>
</ul>
<blockquote>
<ul>
<li><p>分词</p></li>
<li><font color="red">词性标注(Part-of-speech tagging)</font>
<ul>
<li>把分好的词一个一个分类(如, 动词, 形容词，名词)</li>
</ul></li>
<li>实体识别
<ul>
<li>名词识别</li>
</ul></li>
<li>词义消歧
<ul>
<li>联系上下文</li>
</ul></li>
</ul>
</blockquote>
<ul>
<li><font color="red" size="4px"><strong>语句处理</strong></font></li>
</ul>
<blockquote>
<ul>
<li><font color="red">句法分析(Syntactic Analysis)</font>
<ul>
<li>“我去北京天安门”: 主谓分开</li>
</ul></li>
<li><font color="red">语义分析(Senmantic Analysis)</font>
<ul>
<li>句子的理解</li>
</ul></li>
<li><p><font color="red">机器翻译</font></p></li>
<li><p><strong>语音合成</strong></p></li>
</ul>
</blockquote>
<ul>
<li><font size="4px"><strong>篇章处理</strong></font></li>
</ul>
<blockquote>
<ul>
<li>自动文摘
<ul>
<li>机器读文章，写出摘要</li>
</ul></li>
</ul>
</blockquote>
<ul>
<li><font size="4px"><strong>统计语言模型</strong></font></li>
</ul>
<blockquote>
<ul>
<li><p><a href="https://www.cnblogs.com/douzujun/p/13021227.html#_label1_1" target="_blank" rel="noopener">N-gram统计模型</a></p></li>
<li><p>马尔科夫模型</p></li>
<li><p>隐马尔科夫模型</p></li>
</ul>
</blockquote>
<h2 id="分词">分词</h2>
<ul>
<li><p>把句子变成词</p></li>
<li><p><strong>分词难点</strong></p></li>
</ul>
<blockquote>
<ul>
<li><strong>分词标准</strong></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202009/817161-20200905181351884-416050950.png"></p>
<ul>
<li><strong>切分歧义(分词造成的语义分歧)</strong>
<ul>
<li>分词细粒度不同： <img src="https://img2020.cnblogs.com/blog/817161/202009/817161-20200905181645629-1821701734.png"></li>
<li>真正存在歧义的句子： <img src="https://img2020.cnblogs.com/blog/817161/202009/817161-20200905181737439-1973410367.png"></li>
<li>交集型的歧义 <img src="https://img2020.cnblogs.com/blog/817161/202009/817161-20200905182226165-2078007290.png"></li>
</ul></li>
<li><strong>新词</strong>
<ul>
<li>给力，花呗，贸易战等等</li>
</ul></li>
</ul>
</blockquote>
<ul>
<li><strong>分词的算法</strong></li>
</ul>
<blockquote>
<ul>
<li>基于词典的分词算法
<ul>
<li>正向最大匹配法</li>
<li>逆向最大匹配法</li>
<li>双向匹配分词<br>
</li>
<li>全切分路径选择</li>
</ul></li>
<li>基于统计的分词算法
<ul>
<li>HMM，隐马尔科夫模型</li>
<li>CRF，条件随机场</li>
<li>深度学习</li>
</ul></li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">'我来到北京清华大学'</span>, cut_all=<span class="literal">True</span>)</span><br><span class="line">print(<span class="string">'Full Mode: '</span> + <span class="string">'/ '</span>.join(seg_list))      <span class="comment"># 全模式</span></span><br><span class="line"><span class="comment"># Full Mode: 我/ 来到/ 北京/ 清华/ 清华大学/ 华大/ 大学</span></span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">'我来到北京清华大学'</span>, cut_all=<span class="literal">False</span>)</span><br><span class="line">print(<span class="string">'Default Mode: '</span> + <span class="string">'/ '</span>.join(seg_list))   <span class="comment"># 精确模式</span></span><br><span class="line"><span class="comment"># Default Mode: 我/ 来到/ 北京/ 清华大学</span></span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">'他来到了网易杭研大厦'</span>)    <span class="comment"># 默认是精确模式</span></span><br><span class="line">print(<span class="string">'/ '</span>.join(seg_list))</span><br><span class="line"><span class="comment"># 他/ 来到/ 了/ 网易/ 杭研/ 大厦</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索引擎模式</span></span><br><span class="line">seg_list = jieba.cut_for_search(<span class="string">'小明硕士毕业于中国科学院计算所，后在日本京都大学深造'</span>)</span><br><span class="line">print(<span class="string">'/ '</span>.join(seg_list))</span><br><span class="line"><span class="comment"># 小明/ 硕士/ 毕业/ 于/ 中国/ 科学/ 学院/ 科学院/ 中国科学院/ 计算/ 计算所/ ，/ 后/ 在/ 日本/ 京都/ 大学/ 日本京都大学/ 深造</span></span><br></pre></td></tr></table></figure>
<h2 id="tf-idf">TF-IDF</h2>
<p><img src="https://img2020.cnblogs.com/blog/817161/202009/817161-20200905231815959-778744901.png"> <img src="https://img2020.cnblogs.com/blog/817161/202009/817161-20200905234801950-355607453.png"> <img src="https://img2020.cnblogs.com/blog/817161/202009/817161-20200905234935857-777057823.png"></p>
<ul>
<li><p><strong>TF-IDF的作用</strong></p>
<ul>
<li>提取文本向量的特征</li>
</ul></li>
<li><p><strong>TF-IDF算法代码示例</strong></p></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np   <span class="comment"># 数值计算、矩阵运算、向量运算</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  <span class="comment"># 数值分析、科学计算</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 定义数据和预处理</span></span><br><span class="line"><span class="comment"># 定义文档</span></span><br><span class="line">docA = <span class="string">'The cat sat on my bed'</span></span><br><span class="line">docB = <span class="string">'The dog sat on my knees'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切割文档</span></span><br><span class="line">bowA = docA.split(<span class="string">' '</span>)</span><br><span class="line">bowB = docB.split(<span class="string">' '</span>)</span><br><span class="line"><span class="comment"># bowA # ['The', 'cat', 'sat', 'on', 'my', 'bed']</span></span><br><span class="line"><span class="comment"># bowB # ['The', 'dog', 'sat', 'on', 'my', 'knees']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建词库</span></span><br><span class="line">wordSet = set(bowA).union(set(bowB))</span><br><span class="line"><span class="comment"># wordSet # &#123;'The', 'bed', 'cat', 'dog', 'knees', 'my', 'on', 'sat'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 进行词数统计</span></span><br><span class="line"><span class="comment"># 用字典来保存词出现的次数</span></span><br><span class="line">wordDictA = dict.fromkeys(wordSet, <span class="number">0</span>)</span><br><span class="line">wordDictB = dict.fromkeys(wordSet, <span class="number">0</span>)</span><br><span class="line">wordDictA</span><br><span class="line">wordDictB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历文档，统计词数</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> bowA:</span><br><span class="line">    wordDictA[word] += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> bowB:</span><br><span class="line">    wordDictB[word] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">pd.DataFrame([wordDictA, wordDictB])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 计算词频 TF</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeTF</span><span class="params">(wordDict, bow)</span>:</span></span><br><span class="line">    <span class="comment"># 用一个字典对象保存 TF，把所有对应于 bow 文档里的 TF都计算出来</span></span><br><span class="line">    tfDict = &#123;&#125;</span><br><span class="line">    nbowCount = len(bow)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word, count <span class="keyword">in</span> wordDict.items():</span><br><span class="line">        tfDict[word] = count / nbowCount</span><br><span class="line">    <span class="keyword">return</span> tfDict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">tfA = computeTF(wordDictA, bowA)</span><br><span class="line">tfB = computeTF(wordDictB, bowB)</span><br><span class="line">print(tfA)</span><br><span class="line">print(tfB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 计算逆文档频率 IDF</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeIDF</span><span class="params">(wordDictList)</span>:</span></span><br><span class="line">    <span class="comment"># 用一个字典对象保存 IDF，每个词作为 key，初始值为 0</span></span><br><span class="line">    idfDict = dict.fromkeys(wordDictList[<span class="number">0</span>], <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 总文档数量</span></span><br><span class="line">    N = len(wordDictList)</span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> wordDict <span class="keyword">in</span> wordDictList:</span><br><span class="line">        <span class="comment"># 遍历字典中的每个词汇，统计 Ni</span></span><br><span class="line">        <span class="keyword">for</span> word, count <span class="keyword">in</span> wordDict.items():</span><br><span class="line">            <span class="keyword">if</span> count &gt; <span class="number">0</span> :</span><br><span class="line">                <span class="comment"># 先把 Ni 增加 1，存入到 idfDict 中</span></span><br><span class="line">                idfDict[word] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 已经得到所有词汇 i 对应的 Ni，现在根据公式把它替换成 idf 值</span></span><br><span class="line">    <span class="keyword">for</span> word, Ni <span class="keyword">in</span> idfDict.items():</span><br><span class="line">        idfDict[word] = math.log10((N + <span class="number">1</span>)/(Ni + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> idfDict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">idfs = computeIDF([wordDictA, wordDictB])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 计算 TF-IDF</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeTFIDF</span><span class="params">(tf, idfs)</span>:</span></span><br><span class="line">    tfidf = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> word, tfval <span class="keyword">in</span> tf.items():</span><br><span class="line">        tfidf[word] = tfval * idfs[word]</span><br><span class="line">    <span class="keyword">return</span> tfidf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">tfidfA = computeTFIDF(tfA, idfs)</span><br><span class="line">tfidfB = computeTFIDF(tfB, idfs)</span><br><span class="line"></span><br><span class="line">pd.DataFrame([tfidfA, tfidfB])</span><br><span class="line"></span><br><span class="line"><span class="comment">#       knees	   cat	        sat	The	on	dog	        bed	        my</span></span><br><span class="line"><span class="comment"># 0	0.000000   0.029349	0.0	0.0	0.0	0.000000	0.029349	0.0</span></span><br><span class="line"><span class="comment"># 1	0.029349   0.000000	0.0	0.0	0.0	0.029349	0.000000	0.0</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>scikit-learn计算TF-IDF</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfTransformer</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"></span><br><span class="line">corpus = [<span class="string">'I come to China to travel'</span>,</span><br><span class="line">          <span class="string">'This is a car polupar in China'</span>,</span><br><span class="line">          <span class="string">'I love tea and Apple'</span>,</span><br><span class="line">          <span class="string">'The work is to write some papers in science'</span>]</span><br><span class="line"></span><br><span class="line">vectorizer = CountVectorizer()</span><br><span class="line"></span><br><span class="line">transformer = TfidfTransformer()</span><br><span class="line">tfidf = transformer.fit_transform(vectorizer.fit_transform(corpus))</span><br><span class="line">print(tfidf)</span><br></pre></td></tr></table></figure>
<details>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">(<span class="number">0</span>, <span class="number">16</span>) <span class="number">0.4424621378947393</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">15</span>) <span class="number">0.697684463383976</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">4</span>)  <span class="number">0.4424621378947393</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">3</span>)  <span class="number">0.348842231691988</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">14</span>) <span class="number">0.45338639737285463</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">9</span>)  <span class="number">0.45338639737285463</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">6</span>)  <span class="number">0.3574550433419527</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">5</span>)  <span class="number">0.3574550433419527</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">3</span>)  <span class="number">0.3574550433419527</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)  <span class="number">0.45338639737285463</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">12</span>) <span class="number">0.5</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">7</span>)  <span class="number">0.5</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">1</span>)  <span class="number">0.5</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">0</span>)  <span class="number">0.5</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">18</span>) <span class="number">0.3565798233381452</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">17</span>) <span class="number">0.3565798233381452</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">15</span>) <span class="number">0.2811316284405006</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">13</span>) <span class="number">0.3565798233381452</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">11</span>) <span class="number">0.3565798233381452</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">10</span>) <span class="number">0.3565798233381452</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">8</span>)  <span class="number">0.3565798233381452</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">6</span>)  <span class="number">0.2811316284405006</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">5</span>)  <span class="number">0.2811316284405006</span></span><br></pre></td></tr></table></figure>
</details>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"> </span><br><span class="line">tfidf = TfidfVectorizer()</span><br><span class="line"> </span><br><span class="line">corpus=[<span class="string">"我 来到 北京 清华大学"</span>,          <span class="comment"># 第一类文本切词后的结果，词之间以空格隔开</span></span><br><span class="line">        <span class="string">"他 来到 了 网易 杭研 大厦"</span>,      <span class="comment"># 第二类文本的切词结果</span></span><br><span class="line">        <span class="string">"小明 硕士 毕业 与 中国 科学院"</span>,  <span class="comment"># 第三类文本的切词结果</span></span><br><span class="line">        <span class="string">"我 爱 北京 天安门"</span>]              <span class="comment"># 第四类文本的切词结果</span></span><br><span class="line"> </span><br><span class="line">result = tfidf.fit_transform(corpus).toarray()</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计关键词</span></span><br><span class="line">word = tfidf.get_feature_names()</span><br><span class="line">print(word)</span><br><span class="line"><span class="comment"># 统计关键词出现次数，几句话对比几次</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> tfidf.vocabulary_.items():</span><br><span class="line">    print(k,v)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 对比第i类文本的词语tf-idf权重</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(result)):</span><br><span class="line">    print(<span class="string">'----------------------'</span>,i,<span class="string">'--------------------'</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(word)):</span><br><span class="line">        print(word[j],result[i][j])</span><br></pre></td></tr></table></figure>
<details>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[[<span class="number">0.</span>         <span class="number">0.52640543</span> <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.52640543</span></span><br><span class="line">  <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.66767854</span> <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.</span>        ]</span><br><span class="line"> [<span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.52547275</span> <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.41428875</span></span><br><span class="line">  <span class="number">0.52547275</span> <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.52547275</span>]</span><br><span class="line"> [<span class="number">0.4472136</span>  <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.4472136</span>  <span class="number">0.</span></span><br><span class="line">  <span class="number">0.</span>         <span class="number">0.4472136</span>  <span class="number">0.</span>         <span class="number">0.4472136</span>  <span class="number">0.4472136</span>  <span class="number">0.</span>        ]</span><br><span class="line"> [<span class="number">0.</span>         <span class="number">0.6191303</span>  <span class="number">0.</span>         <span class="number">0.78528828</span> <span class="number">0.</span>         <span class="number">0.</span></span><br><span class="line">  <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.</span>         <span class="number">0.</span>        ]]</span><br><span class="line">[<span class="string">'中国'</span>, <span class="string">'北京'</span>, <span class="string">'大厦'</span>, <span class="string">'天安门'</span>, <span class="string">'小明'</span>, <span class="string">'来到'</span>, <span class="string">'杭研'</span>, <span class="string">'毕业'</span>, <span class="string">'清华大学'</span>, <span class="string">'硕士'</span>, <span class="string">'科学院'</span>, <span class="string">'网易'</span>]</span><br><span class="line">来到 <span class="number">5</span></span><br><span class="line">北京 <span class="number">1</span></span><br><span class="line">清华大学 <span class="number">8</span></span><br><span class="line">网易 <span class="number">11</span></span><br><span class="line">杭研 <span class="number">6</span></span><br><span class="line">大厦 <span class="number">2</span></span><br><span class="line">小明 <span class="number">4</span></span><br><span class="line">硕士 <span class="number">9</span></span><br><span class="line">毕业 <span class="number">7</span></span><br><span class="line">中国 <span class="number">0</span></span><br><span class="line">科学院 <span class="number">10</span></span><br><span class="line">天安门 <span class="number">3</span></span><br><span class="line">---------------------- <span class="number">0</span> --------------------</span><br><span class="line">中国 <span class="number">0.0</span></span><br><span class="line">北京 <span class="number">0.5264054336099155</span></span><br><span class="line">大厦 <span class="number">0.0</span></span><br><span class="line">天安门 <span class="number">0.0</span></span><br><span class="line">小明 <span class="number">0.0</span></span><br><span class="line">来到 <span class="number">0.5264054336099155</span></span><br><span class="line">杭研 <span class="number">0.0</span></span><br><span class="line">毕业 <span class="number">0.0</span></span><br><span class="line">清华大学 <span class="number">0.6676785446095399</span></span><br><span class="line">硕士 <span class="number">0.0</span></span><br><span class="line">科学院 <span class="number">0.0</span></span><br><span class="line">网易 <span class="number">0.0</span></span><br><span class="line">---------------------- <span class="number">1</span> --------------------</span><br><span class="line">中国 <span class="number">0.0</span></span><br><span class="line">北京 <span class="number">0.0</span></span><br><span class="line">大厦 <span class="number">0.5254727492640658</span></span><br><span class="line">天安门 <span class="number">0.0</span></span><br><span class="line">小明 <span class="number">0.0</span></span><br><span class="line">来到 <span class="number">0.41428875116588965</span></span><br><span class="line">杭研 <span class="number">0.5254727492640658</span></span><br><span class="line">毕业 <span class="number">0.0</span></span><br><span class="line">清华大学 <span class="number">0.0</span></span><br><span class="line">硕士 <span class="number">0.0</span></span><br><span class="line">科学院 <span class="number">0.0</span></span><br><span class="line">网易 <span class="number">0.5254727492640658</span></span><br><span class="line">---------------------- <span class="number">2</span> --------------------</span><br><span class="line">中国 <span class="number">0.4472135954999579</span></span><br><span class="line">北京 <span class="number">0.0</span></span><br><span class="line">大厦 <span class="number">0.0</span></span><br><span class="line">天安门 <span class="number">0.0</span></span><br><span class="line">小明 <span class="number">0.4472135954999579</span></span><br><span class="line">来到 <span class="number">0.0</span></span><br><span class="line">杭研 <span class="number">0.0</span></span><br><span class="line">毕业 <span class="number">0.4472135954999579</span></span><br><span class="line">清华大学 <span class="number">0.0</span></span><br><span class="line">硕士 <span class="number">0.4472135954999579</span></span><br><span class="line">科学院 <span class="number">0.4472135954999579</span></span><br><span class="line">网易 <span class="number">0.0</span></span><br><span class="line">---------------------- <span class="number">3</span> --------------------</span><br><span class="line">中国 <span class="number">0.0</span></span><br><span class="line">北京 <span class="number">0.6191302964899972</span></span><br><span class="line">大厦 <span class="number">0.0</span></span><br><span class="line">天安门 <span class="number">0.7852882757103967</span></span><br><span class="line">小明 <span class="number">0.0</span></span><br><span class="line">来到 <span class="number">0.0</span></span><br><span class="line">杭研 <span class="number">0.0</span></span><br><span class="line">毕业 <span class="number">0.0</span></span><br><span class="line">清华大学 <span class="number">0.0</span></span><br><span class="line">硕士 <span class="number">0.0</span></span><br><span class="line">科学院 <span class="number">0.0</span></span><br><span class="line">网易 <span class="number">0.0</span></span><br></pre></td></tr></table></figure>
</details>
<ul>
<li><strong>NLTK计算TF-IDF</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.text <span class="keyword">import</span> TextCollection</span><br><span class="line"></span><br><span class="line">corpus = [<span class="string">'I come to China to travel'</span>,</span><br><span class="line">          <span class="string">'This is a car polupar in China'</span>,</span><br><span class="line">          <span class="string">'I love tea and Apple'</span>,</span><br><span class="line">          <span class="string">'The work is to write some papers in science'</span>]</span><br><span class="line"></span><br><span class="line">corpus = TextCollection(corpus)</span><br><span class="line"><span class="comment"># 直接就能算出TF-IDF</span></span><br><span class="line">print(corpus.tf_idf(<span class="string">'China'</span>, <span class="string">'I come to China to travel'</span>))</span><br><span class="line"><span class="comment"># 0.027725887222397813</span></span><br></pre></td></tr></table></figure>
<h2 id="nltk">NLTK</h2>
<p><img src="https://img2020.cnblogs.com/blog/817161/202009/817161-20200905175021602-2048815200.png" style="width:330px;height:200px"></p>
<ul>
<li><strong>示例</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line">sentence = <span class="string">"""At eight o'clock on Thursday morning</span></span><br><span class="line"><span class="string">Arthur didn't feel very good.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">tokens = nltk.word_tokenize(sentence)</span><br><span class="line">print(tokens)</span><br><span class="line"><span class="comment"># ['At', 'eight', "o'clock", 'on', 'Thursday', 'morning', 'Arthur', 'did', "n't", 'feel', 'very', 'good', '.']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 词性标注</span></span><br><span class="line">targed = nltk.pos_tag(tokens)</span><br><span class="line">print(targed[<span class="number">0</span>:<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># [('At', 'IN'), ('eight', 'CD'), ("o'clock", 'NN'), ('on', 'IN'), ('Thursday', 'NNP'), ('morning', 'NN')]</span></span><br></pre></td></tr></table></figure>
<h2 id="预料及词性标注">预料及词性标注</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 中文词性标注, jieba</span></span><br><span class="line"><span class="keyword">import</span> jieba.posseg <span class="keyword">as</span> pseg</span><br><span class="line"></span><br><span class="line">words = pseg.cut(<span class="string">'我爱北京天安门'</span>)</span><br><span class="line"><span class="keyword">for</span> word, flag <span class="keyword">in</span> words:</span><br><span class="line">    print(word, flag)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 我 r</span></span><br><span class="line"><span class="comment"># 爱 v</span></span><br><span class="line"><span class="comment"># 北京 ns</span></span><br><span class="line"><span class="comment"># 天安门 ns</span></span><br></pre></td></tr></table></figure>
<h1 id="检索类聊天机器人客服">检索类聊天机器人(客服)</h1>
<h1 id="生成类聊天机器人娱乐">生成类聊天机器人(娱乐)</h1>
<h1 id="pytorch基础">pytorch基础</h1>
<h1 id="机器人发展方向与seqgan实战">机器人发展方向与seqGAN实战</h1>
<h1 id="基于pytorch聊天机器人代码实战">基于pytorch聊天机器人代码实战</h1>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>pytorch</tag>
        <tag>自然语言处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>机器学习</title>
    <url>/posts/29139.html</url>
    <content><![CDATA[<h1 id="导学">1. 导学</h1>
<blockquote>
<ul>
<li>如何使用算法</li>
<li>如何评价算法的好坏</li>
<li>如何解决过拟合和欠拟合</li>
<li>如何调节算法的参数</li>
<li>如何验证算法的正确性</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="要求">1.1 要求</h2>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200530144215672-1765480003.png"></p>
<h2 id="如何使用算法">1.2 如何使用算法</h2>
<ul>
<li>如何评价算法的好坏</li>
<li>如何解决过拟合和欠拟合</li>
<li>如何调节算法的参数</li>
<li>如何验证算法的正确性</li>
</ul>
<h1 id="机器学习的数据">2. 机器学习的数据</h1>
<h2 id="样本">2.1 样本</h2>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200530150853222-770665335.png" style="zoom:100%"></p>
<h2 id="特征">2.2 特征</h2>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200530152307608-1496852643.png" style="zoom:100%"></p>
<h2 id="特征空间">2.3 特征空间</h2>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200530153351376-1807219682.png" style="zoom:100%"></p>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200530153849062-558615798.png" style="zoom:100%"></p>
<h1 id="机器学习分类">3. 机器学习分类</h1>
<h2 id="监督学习">3.1 监督学习</h2>
<blockquote>
<p>给机器的训练数据拥有 “标记” 或者 “答案”</p>
</blockquote>
<ul>
<li>k近邻</li>
<li>线性回归和多项式回归</li>
<li>逻辑回归</li>
<li>SVM</li>
<li>决策树和随机森林</li>
</ul>
<h2 id="非监督学习">3.2 非监督学习</h2>
<blockquote>
<p>给机器的训练数据没有任何“标记” 或者 “答案”</p>
<p>对没有“标记”的数据进行分类--聚类分析</p>
</blockquote>
<p><strong>意义：</strong></p>
<ul>
<li><strong>对数据进行降维处理</strong>
<ul>
<li><strong>特征提取： </strong> 信用卡的信用评级 和 人的胖瘦无关？</li>
<li><strong>特征压缩：</strong> PCA （不损失数据的情况下，将高维数据压缩成低维数据）</li>
<li><strong>降维处理的意义：方便可视化</strong></li>
</ul></li>
<li><strong>异常检测：</strong></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200530181603890-284389522.png" style="zoom:90%"></p>
<h2 id="半监督学习">3.3 半监督学习</h2>
<blockquote>
<p>一部分数据有“标记” 或者 “答案“， 另一部分数据没有</p>
<p>更常见：各种原因产生的标记缺失</p>
<p>通常都先使用 <strong>无监督学习手段对数据做处理</strong>，之后使用 <strong>监督学习手段做模型的训练和预测</strong></p>
</blockquote>
<h2 id="增强学习">3.4 增强学习</h2>
<blockquote>
<ul>
<li>无人驾驶</li>
<li>机器人</li>
</ul>
</blockquote>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200530184358774-1028653002.png" style="zoom:80%"></p>
<h1 id="机器学习的其他分类">4. 机器学习的其他分类</h1>
<h2 id="在线学习和批量学习">4.1 在线学习和批量学习</h2>
<ul>
<li><strong>批量学习 Batch Learning（离线学习, 为主）</strong></li>
</ul>
<blockquote>
<ul>
<li><p>优点： 简单</p></li>
<li>问题：如何适应环境变化
<ul>
<li>解决方案：定时重新批量学习</li>
</ul></li>
<li><p>缺点：每次重新批量学习，运算量巨大;</p></li>
</ul>
</blockquote>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200530185519551-841258350.png" style="zoom:80%"></p>
<ul>
<li><strong>在线学习 Online Learning</strong></li>
</ul>
<blockquote>
<ul>
<li><p>优点：及时反映新的环境变化</p></li>
<li>问题：新的数据带来不会的变化
<ul>
<li>解决方案：需要加强对数据进行监控</li>
</ul></li>
<li><p>其他：也适用于数据量巨大，完全无法批量学习的环境</p></li>
</ul>
</blockquote>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200530190034224-207594180.png" style="zoom:80%"></p>
<h2 id="参数学习和非参数学习">4.2 参数学习和非参数学习</h2>
<ul>
<li><strong>参数学习 Parametric Learning</strong></li>
</ul>
<blockquote>
<p>一旦学到参数，就不再需要原有的数据集</p>
</blockquote>
<ul>
<li><strong>非参数学习 Nonparametric Learning</strong></li>
</ul>
<blockquote>
<ul>
<li>不对模型进行过多假设</li>
<li>非参数不等于没参数</li>
</ul>
</blockquote>
<h1 id="监督学习任务">5. 监督学习任务</h1>
<h2 id="分类任务">5.1 分类任务</h2>
<ul>
<li><strong>二分类</strong></li>
</ul>
<blockquote>
<ul>
<li>判断邮件是否为垃圾邮件</li>
<li>判断发给客户信用卡是否有风险</li>
<li>判断病患是良性肿瘤；恶性肿瘤</li>
<li>判断股票涨跌</li>
</ul>
</blockquote>
<ul>
<li><strong>多分类</strong></li>
</ul>
<blockquote>
<ul>
<li>手写数字识别</li>
<li>图像识别</li>
<li>判断发给客户信用卡的风险评级</li>
<li>2048游戏：转换为多分类，是否上移动，下移，左移等</li>
<li>围棋</li>
<li>无人车：根据环境信息，设置方向盘，油门、刹车</li>
<li><strong>多分类的任务可以转换成二分类任务</strong></li>
</ul>
</blockquote>
<ul>
<li><strong>多标签分类</strong></li>
</ul>
<blockquote>
<p>一个图片分到多个类别</p>
</blockquote>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200530155230571-734693011.png" style="zoom:65%"></p>
<h2 id="回归任务">5.2 回归任务</h2>
<ul>
<li><strong>结果是一个连续的数字的值，而非一个类别</strong></li>
</ul>
<blockquote>
<ul>
<li>房屋预测</li>
<li>市场分析</li>
<li>学生成绩</li>
<li>股票价格</li>
</ul>
</blockquote>
<ul>
<li><strong>一般情况下，回归任务可以简化成分类任务</strong></li>
</ul>
<blockquote>
<ul>
<li>无人驾驶</li>
</ul>
</blockquote>
<h2 id="工作流程">5.3 工作流程</h2>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200530160139974-1127480687.png" style="zoom:70%"></p>
<h1 id="jupyter-notebook">6. jupyter notebook</h1>
<h2 id="快捷键">6.1 快捷键</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">run cell: ctrl + enter</span><br><span class="line">change cell to md: m</span><br><span class="line">change cell to code: c</span><br><span class="line">delete cell: x</span><br><span class="line">line number: L</span><br></pre></td></tr></table></figure>
<h2 id="魔法命令">6.2 魔法命令</h2>
<ul>
<li><strong>%run：在 jupyter 中加载 .py文件代码</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%run ./magic.py              <span class="comment"># ./为文件路径</span></span><br><span class="line"></span><br><span class="line">[out1]: hello(<span class="string">'python'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> MagicTest.FirstML  <span class="comment"># 导入magictest的模块</span></span><br><span class="line">MagicTest.FirstML.predict(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">[out2]: predict: ?</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> MagicTest <span class="keyword">import</span> FirstML</span><br><span class="line">FirstML.predict(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">[out3]: predict: ?</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>%timeit: 测试代码性能</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%timeit L = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)]</span><br><span class="line"></span><br><span class="line">[out1]: <span class="number">535</span> µs ± <span class="number">11.4</span> µs per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000</span> loops each)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%timeit L = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000000</span>)]</span><br><span class="line"></span><br><span class="line">[out1]: <span class="number">5.89</span> s ± <span class="number">923</span> ms per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1</span> loop each)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%timeit</span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    L.append(n ** <span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">[out]: <span class="number">603</span> µs ± <span class="number">16.8</span> µs per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1000</span> loops each)</span><br></pre></td></tr></table></figure>
<h3 id="time-代码计时不用重复">%time: 代码计时(不用重复)</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%time L = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)]</span><br><span class="line"></span><br><span class="line">[out1]: Wall time: <span class="number">1e+03</span> µs</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%time</span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    L.append(i**<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">[out2]: Wall time: <span class="number">2</span> ms</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>其他魔法命令</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%lsmagic</span><br><span class="line"></span><br><span class="line">[out1]: </span><br><span class="line">Available line magics:</span><br><span class="line">%alias  %alias_magic  %autoawait  %autocall  %automagic  %autosave  %bookmark  %cd  %clear  %cls  %colors  %conda  %config  %connect_info  %copy  %ddir  %debug  %dhist  %dirs  %doctest_mode  %echo  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %macro  %magic  %matplotlib  %mkdir  %more  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %pip  %popd  %pprint  %precision  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %ren  %rep  %rerun  %reset  %reset_selective  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode</span><br><span class="line"></span><br><span class="line">Available cell magics:</span><br><span class="line">%%!  %%HTML  %%SVG  %%bash  %%capture  %%cmd  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%markdown  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile</span><br><span class="line"></span><br><span class="line">Automagic <span class="keyword">is</span> ON, % prefix IS NOT needed <span class="keyword">for</span> line magics.</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">%run?   # 查看文档</span><br></pre></td></tr></table></figure>
<h1 id="numpy和matplotlib">7. numpy和matplotlib</h1>
<h2 id="numpy">7.1 Numpy</h2>
<h3 id="numpy.array">7.11 Numpy.array</h3>
<ul>
<li><strong>使用一：</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">L = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(L)</span><br><span class="line">L[<span class="number">5</span>] = <span class="string">'Machine Learning'</span></span><br><span class="line">print(L)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> array</span><br><span class="line">arr = array.array(<span class="string">'i'</span>, [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])  <span class="comment"># 只能定义一种类型</span></span><br><span class="line">print(arr)</span><br><span class="line">arr[<span class="number">5</span>] = <span class="number">100</span></span><br><span class="line">print(arr)</span><br><span class="line"></span><br><span class="line">nparr = np.array([i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)])      <span class="comment"># 只能定义一种类型</span></span><br><span class="line">print(nparr)</span><br><span class="line">print(nparr.dtype)</span><br><span class="line"></span><br><span class="line">nparr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.0</span>])   <span class="comment"># float</span></span><br><span class="line">print(nparr.dtype)</span><br><span class="line"></span><br><span class="line">[out1]: </span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'Machine Learning'</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">array(<span class="string">'i'</span>, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">array(<span class="string">'i'</span>, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">100</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">int32</span><br><span class="line">float64</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>使用二：</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全为0，默认浮点型</span></span><br><span class="line">print(<span class="string">'=================np.zero==================='</span>)</span><br><span class="line">print(np.zeros(<span class="number">10</span>))</span><br><span class="line">print(np.zeros(<span class="number">10</span>).dtype)                     </span><br><span class="line">print(np.zeros(<span class="number">10</span>, dtype=int)) </span><br><span class="line">print(np.zeros(shape=(<span class="number">3</span>, <span class="number">5</span>), dtype=int))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'=================np.ones==================='</span>)</span><br><span class="line"><span class="comment"># 全为1，默认浮点型</span></span><br><span class="line">print(np.ones(<span class="number">10</span>))          <span class="comment"># 向量</span></span><br><span class="line">print(np.ones( (<span class="number">3</span>, <span class="number">5</span>) ))    <span class="comment"># 矩阵</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'=================np.full================='</span>)</span><br><span class="line"><span class="comment"># 指定值</span></span><br><span class="line">print(np.full(shape=(<span class="number">3</span>, <span class="number">5</span>), fill_value=<span class="number">666</span>))   <span class="comment"># 为指定类型</span></span><br><span class="line">print(np.full(shape=(<span class="number">3</span>, <span class="number">5</span>), fill_value=<span class="number">666.0</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'=================np.full================='</span>)</span><br><span class="line"><span class="comment"># arange</span></span><br><span class="line">print(np.arange(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.2</span>))   <span class="comment"># 可以有浮点数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># linspace</span></span><br><span class="line">print(<span class="string">'=================np.linspace==================='</span>)</span><br><span class="line">print(np.linspace(<span class="number">0</span>, <span class="number">20</span>, <span class="number">10</span>))   <span class="comment"># [0,20]区间，生成10个等差数列</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># random</span></span><br><span class="line">print(<span class="string">'=================np.random==================='</span>)</span><br><span class="line">np.random.seed(<span class="number">100</span>)</span><br><span class="line">print(np.random.randint(<span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>))   <span class="comment"># [0, 1), 不包含1</span></span><br><span class="line">print(np.random.randint(<span class="number">4</span>, <span class="number">8</span>, size=(<span class="number">3</span>, <span class="number">5</span>)))</span><br><span class="line">print(np.random.randint(<span class="number">4</span>, <span class="number">8</span>, size=<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成10个0-1之间均匀的浮点数</span></span><br><span class="line">print(np.random.random(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正态分布</span></span><br><span class="line">print(np.random.normal())</span><br><span class="line">print(np.random.normal(<span class="number">10</span>, <span class="number">100</span>))  <span class="comment"># [10, 100)</span></span><br><span class="line">print(np.random.normal(<span class="number">0</span>, <span class="number">1</span>, (<span class="number">3</span>, <span class="number">5</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[out1]:</span><br><span class="line">=================np.zero===================</span><br><span class="line">[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">float64</span><br><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line">[[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]]</span><br><span class="line">=================np.ones===================</span><br><span class="line">[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line">[[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]]</span><br><span class="line">=================np.full=================</span><br><span class="line">[[<span class="number">666</span> <span class="number">666</span> <span class="number">666</span> <span class="number">666</span> <span class="number">666</span>]</span><br><span class="line"> [<span class="number">666</span> <span class="number">666</span> <span class="number">666</span> <span class="number">666</span> <span class="number">666</span>]</span><br><span class="line"> [<span class="number">666</span> <span class="number">666</span> <span class="number">666</span> <span class="number">666</span> <span class="number">666</span>]]</span><br><span class="line">[[<span class="number">666.</span> <span class="number">666.</span> <span class="number">666.</span> <span class="number">666.</span> <span class="number">666.</span>]</span><br><span class="line"> [<span class="number">666.</span> <span class="number">666.</span> <span class="number">666.</span> <span class="number">666.</span> <span class="number">666.</span>]</span><br><span class="line"> [<span class="number">666.</span> <span class="number">666.</span> <span class="number">666.</span> <span class="number">666.</span> <span class="number">666.</span>]]</span><br><span class="line">=================np.full=================</span><br><span class="line">[<span class="number">0.</span>  <span class="number">0.2</span> <span class="number">0.4</span> <span class="number">0.6</span> <span class="number">0.8</span>]</span><br><span class="line">=================np.linspace===================</span><br><span class="line">[ <span class="number">0.</span>          <span class="number">2.22222222</span>  <span class="number">4.44444444</span>  <span class="number">6.66666667</span>  <span class="number">8.88888889</span> <span class="number">11.11111111</span></span><br><span class="line"> <span class="number">13.33333333</span> <span class="number">15.55555556</span> <span class="number">17.77777778</span> <span class="number">20.</span>        ]</span><br><span class="line">=================np.random===================</span><br><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line">[[<span class="number">4</span> <span class="number">4</span> <span class="number">7</span> <span class="number">7</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">6</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">6</span> <span class="number">5</span> <span class="number">6</span> <span class="number">6</span> <span class="number">6</span>]]</span><br><span class="line">[<span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">4</span> <span class="number">7</span> <span class="number">4</span> <span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">4</span>]</span><br><span class="line">[<span class="number">0.56229626</span> <span class="number">0.00581719</span> <span class="number">0.30742321</span> <span class="number">0.95018431</span> <span class="number">0.12665424</span> <span class="number">0.07898787</span></span><br><span class="line"> <span class="number">0.31135313</span> <span class="number">0.63238359</span> <span class="number">0.69935892</span> <span class="number">0.64196495</span>]</span><br><span class="line"><span class="number">-0.23028508500632336</span></span><br><span class="line"><span class="number">58.09241158682933</span></span><br><span class="line">[[<span class="number">-1.26691058</span>  <span class="number">0.27100509</span>  <span class="number">2.14076322</span>  <span class="number">0.47536904</span>  <span class="number">0.24652489</span>]</span><br><span class="line"> [<span class="number">-1.08417396</span> <span class="number">-2.3815826</span>  <span class="number">-0.4363488</span>  <span class="number">-2.07241186</span> <span class="number">-1.29543984</span>]</span><br><span class="line"> [<span class="number">-0.46402358</span> <span class="number">-0.05702664</span>  <span class="number">0.27592974</span>  <span class="number">1.49451522</span>  <span class="number">0.56682064</span>]]</span><br></pre></td></tr></table></figure>
<ul>
<li>查询相应文档</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random?</span><br><span class="line">help(np.random.normal)</span><br></pre></td></tr></table></figure>
<h3 id="numpy基本操作">7.12 numpy基本操作</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">print(<span class="string">'x: '</span>, x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换 维度</span></span><br><span class="line">X = np.arange(<span class="number">15</span>).reshape(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">print(<span class="string">'X:'</span>, X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本属性</span></span><br><span class="line">print(<span class="string">'x维度:'</span>, x.ndim)    <span class="comment"># 查看维度属性</span></span><br><span class="line">print(<span class="string">'X维度:'</span>, X.ndim)</span><br><span class="line">print(<span class="string">'X.shape: '</span>, X.shape)</span><br><span class="line">print(<span class="string">'X.size: '</span>, X.size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy.array的数据访问</span></span><br><span class="line">print(<span class="string">'X:'</span>, X)</span><br><span class="line">print(<span class="string">'X[0][0]: (不推荐)'</span>, X[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">print(<span class="string">'X[2, 2]: (推荐) '</span>, X[<span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">print(<span class="string">'X[:2, :3]: (前2行前3列)'</span>, X[:<span class="number">2</span>, :<span class="number">3</span>])</span><br><span class="line">print(<span class="string">'X[:2][:3]: (预料不符)'</span>, X[:<span class="number">2</span>][:<span class="number">3</span>])</span><br><span class="line">print(<span class="string">'X[:2, ::2]: '</span>, X[:<span class="number">2</span>, ::<span class="number">2</span>])</span><br><span class="line">print(<span class="string">'X[: , 0]: (取一列) '</span>, X[:, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">subX = X[:<span class="number">2</span>, :<span class="number">3</span>]         <span class="comment"># 浅拷贝</span></span><br><span class="line">print(<span class="string">"subX:"</span>, subX)</span><br><span class="line">print(<span class="string">"X: "</span>, X)</span><br><span class="line"></span><br><span class="line">X[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">999</span></span><br><span class="line">print(<span class="string">"subX:"</span>, subX)</span><br><span class="line">print(<span class="string">"X: "</span>, X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 深拷贝</span></span><br><span class="line">subX = X[:<span class="number">2</span>, :<span class="number">3</span>].copy()</span><br><span class="line">X[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">888</span></span><br><span class="line">print(<span class="string">"subX:"</span>, subX)</span><br><span class="line">print(<span class="string">"X: "</span>, X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reshape</span></span><br><span class="line">print(<span class="string">'x.shape: '</span>, x.shape)</span><br><span class="line">A = x.reshape((<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">print(<span class="string">'x.reshape(2, 5): '</span>, A)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只想要十行</span></span><br><span class="line">tenlines = x.reshape(<span class="number">10</span>, <span class="number">-1</span>)    <span class="comment"># 每行元素自动计算</span></span><br><span class="line">print(<span class="string">"转换为10行: "</span>, tenlines)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[out]:</span><br><span class="line">x:  [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">X: [[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]]</span><br><span class="line">x维度: <span class="number">1</span></span><br><span class="line">X维度: <span class="number">2</span></span><br><span class="line">X.shape:  (<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">X.size:  <span class="number">15</span></span><br><span class="line">X: [[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]]</span><br><span class="line">X[<span class="number">0</span>][<span class="number">0</span>]: (不推荐) <span class="number">0</span></span><br><span class="line">X[<span class="number">2</span>, <span class="number">2</span>]: (推荐)  <span class="number">12</span></span><br><span class="line">X[:<span class="number">2</span>, :<span class="number">3</span>]: (前<span class="number">2</span>行前<span class="number">3</span>列) [[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]]</span><br><span class="line">X[:<span class="number">2</span>][:<span class="number">3</span>]: (预料不符) [[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br><span class="line">X[:<span class="number">2</span>, ::<span class="number">2</span>]:  [[<span class="number">0</span> <span class="number">2</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">7</span> <span class="number">9</span>]]</span><br><span class="line">X[: , <span class="number">0</span>]: (取一列)  [ <span class="number">0</span>  <span class="number">5</span> <span class="number">10</span>]</span><br><span class="line">subX: [[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]]</span><br><span class="line">X:  [[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]]</span><br><span class="line">subX: [[<span class="number">999</span>   <span class="number">1</span>   <span class="number">2</span>]</span><br><span class="line"> [  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>]]</span><br><span class="line">X:  [[<span class="number">999</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>]</span><br><span class="line"> [  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span>]</span><br><span class="line"> [ <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>]]</span><br><span class="line">subX: [[<span class="number">999</span>   <span class="number">1</span>   <span class="number">2</span>]</span><br><span class="line"> [  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>]]</span><br><span class="line">X:  [[<span class="number">888</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>]</span><br><span class="line"> [  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span>]</span><br><span class="line"> [ <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>]]</span><br><span class="line">x.shape:  (<span class="number">10</span>,)</span><br><span class="line">x.reshape(<span class="number">2</span>, <span class="number">5</span>):  [[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>] [<span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br><span class="line">[[<span class="number">0</span>] [<span class="number">1</span>] [<span class="number">2</span>] [<span class="number">3</span>] [<span class="number">4</span>] [<span class="number">5</span>] [<span class="number">6</span>] [<span class="number">7</span>] [<span class="number">8</span>] [<span class="number">9</span>]]</span><br></pre></td></tr></table></figure>
<h3 id="合并操作">7.13 合并操作</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">y = np.array([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">print(<span class="string">'x: '</span>, x)</span><br><span class="line">print(<span class="string">'y: '</span>, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并操作</span></span><br><span class="line">print(<span class="string">"合并x, y: "</span>, np.concatenate([x, y]))</span><br><span class="line"></span><br><span class="line">z = np.array([<span class="number">666</span>, <span class="number">666</span>, <span class="number">666</span>])</span><br><span class="line">print(<span class="string">'合并x, y, z: '</span>, np.concatenate([x, y, z]))</span><br><span class="line"></span><br><span class="line">A = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">print(<span class="string">'合并两个A: '</span>, np.concatenate([A, A]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 沿着不同维度来合并操作</span></span><br><span class="line"><span class="comment"># axis = 0: 按行来拼接</span></span><br><span class="line"><span class="comment"># axis = 1 按列来拼接</span></span><br><span class="line">print(<span class="string">'axis=0: '</span>, np.concatenate([A, A], axis=<span class="number">0</span>))</span><br><span class="line">print(<span class="string">'axos=1: '</span>, np.concatenate([A, A], axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将向量和矩阵合并(按行)，不能使用concatenate</span></span><br><span class="line">print(<span class="string">'A和x合并: '</span>, np.concatenate([A, x.reshape(<span class="number">1</span>, <span class="number">-1</span>)]))</span><br><span class="line">      </span><br><span class="line">print(<span class="string">'使用vstack来拼接A和x: (按行)'</span>, np.vstack([A, x]))</span><br><span class="line"></span><br><span class="line">B = np.full((<span class="number">2</span>, <span class="number">2</span>), <span class="number">100</span>)</span><br><span class="line">print(<span class="string">'使用hstack来拼接A和B: (按列)'</span>, np.hstack([A, B]))</span><br><span class="line"></span><br><span class="line">[out1]:</span><br><span class="line">x:  [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">y:  [<span class="number">3</span> <span class="number">2</span> <span class="number">1</span>]</span><br><span class="line">合并x, y:  [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span>]</span><br><span class="line">合并x, y, z:  [  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">3</span>   <span class="number">2</span>   <span class="number">1</span> <span class="number">666</span> <span class="number">666</span> <span class="number">666</span>]</span><br><span class="line">合并两个A:  [[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line">axis=<span class="number">0</span>:  [[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line">axos=<span class="number">1</span>:  [[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line">A和x合并:  [[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]]</span><br><span class="line">使用vstack来拼接A和x: (按行) [[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]]</span><br><span class="line">使用hstack来拼接A和B: (按列) [[  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span> <span class="number">100</span> <span class="number">100</span>]</span><br><span class="line"> [  <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span> <span class="number">100</span> <span class="number">100</span>]]</span><br></pre></td></tr></table></figure>
<h3 id="分割操作">7.14 分割操作</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">print(<span class="string">'x: \n'</span>, x)</span><br><span class="line"></span><br><span class="line">x1, x2, x3 = np.split(x, [<span class="number">3</span>, <span class="number">7</span>])</span><br><span class="line">print(<span class="string">'x1: \n'</span>, x1)</span><br><span class="line">print(<span class="string">'x2: \n'</span>, x2)</span><br><span class="line">print(<span class="string">'x3: \n'</span>, x3)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'='</span>*<span class="number">20</span>)</span><br><span class="line">A = np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line">print(<span class="string">'A: \n'</span>, A)</span><br><span class="line"></span><br><span class="line">A1, A2 = np.split(A, [<span class="number">2</span>])           <span class="comment"># np.vsplit(A, [2]): 从第二行开始分割 </span></span><br><span class="line">print(<span class="string">'A1: \n'</span>, A1)</span><br><span class="line">print(<span class="string">'A2; \n'</span>, A2)</span><br><span class="line"> </span><br><span class="line">B1, B2 = np.split(A, [<span class="number">2</span>], axis=<span class="number">1</span>)   <span class="comment"># np.hsplit(A, [2]): 从第二列开始分割</span></span><br><span class="line">print(<span class="string">'B1: \n'</span>, B1)</span><br><span class="line">print(<span class="string">'B2: \n'</span>, B2)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'='</span>*<span class="number">20</span>)</span><br><span class="line">data = np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line">x, y =  np.hsplit(data, [<span class="number">-1</span>])     <span class="comment"># 分离特征 和 标签值</span></span><br><span class="line">print(<span class="string">'x: \n'</span>, x)</span><br><span class="line">print(<span class="string">'y: \n'</span>, y)</span><br><span class="line"></span><br><span class="line">[out1]:</span><br><span class="line">x: </span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">x1: </span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">x2: </span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">x3: </span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">====================</span><br><span class="line">A: </span><br><span class="line"> [[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span>]]</span><br><span class="line">A1: </span><br><span class="line"> [[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]]</span><br><span class="line">A2; </span><br><span class="line"> [[ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span>]]</span><br><span class="line">B1: </span><br><span class="line"> [[ <span class="number">0</span>  <span class="number">1</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">13</span>]]</span><br><span class="line">B2: </span><br><span class="line"> [[ <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">14</span> <span class="number">15</span>]]</span><br><span class="line">====================</span><br><span class="line">x: </span><br><span class="line"> [[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]]</span><br><span class="line">y: </span><br><span class="line"> [[ <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">7</span>]</span><br><span class="line"> [<span class="number">11</span>]</span><br><span class="line"> [<span class="number">15</span>]]</span><br></pre></td></tr></table></figure>
<h3 id="矩阵运算">7.15 矩阵运算</h3>
<ul>
<li><strong>矩阵对应元素间运算：</strong>
<ul>
<li>A*2, A+2, np.exp(A)等都是对A中所有元素进行操作</li>
<li>A+B, A*B, A/B: 都是矩阵元素之间对应运算</li>
</ul></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200531175742132-377240276.png" style="zoom:80%"></p>
<ul>
<li><strong>矩阵乘法:</strong>
<ul>
<li>A.dot(B)</li>
</ul></li>
<li><strong>矩阵转置:</strong>
<ul>
<li>A.T</li>
</ul></li>
<li><strong>矩阵的逆: <span class="math inline">\(A*A^{-1}=E\)</span></strong>
<ul>
<li>np.linalg.inv(A) (方阵)</li>
<li>伪逆矩阵： np.linalg.pinv(x) (非方阵使用)</li>
</ul></li>
</ul>
<h3 id="聚合操作">7.16 聚合操作</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = np.random.rand(<span class="number">1000000</span>)</span><br><span class="line">%timeit = sum(data)</span><br><span class="line">%timeit = np.sum(data)  <span class="comment"># 更快</span></span><br></pre></td></tr></table></figure>
<ul>
<li>np.sum(A, axis=0) : 每一列的和</li>
<li>np.sum(A, axis=1) : 每一行的和</li>
<li>np.mean(X) : 均值</li>
<li>np.median(X) ： 中位数</li>
<li>np.percentile(X, q=50) : 求 50% 的数</li>
<li>np.var(X) : 方差</li>
<li>np.std(X) : 标准差</li>
</ul>
<h3 id="索引">7.17 索引</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.min(x)</span><br><span class="line">np.argmin(x)    <span class="comment"># 返回 min的值的 索引值</span></span><br><span class="line">np.argmax(x)    <span class="comment"># 最大值索引</span></span><br></pre></td></tr></table></figure>
<h3 id="排序">7.18 排序</h3>
<ul>
<li>np.sort(A, axis=1) ：默认为1，按行排序
<ul>
<li>axis=0 : 按列排序</li>
</ul></li>
<li><p>np.argsort(x) ： 按照索引排序</p></li>
<li><p>np.partition(x, 3) : 3前面的数字都比他小，后面的都比他大</p></li>
</ul>
<h3 id="fancyindexing">7.19 FancyIndexing</h3>
<ul>
<li>X[row, col]
<ul>
<li>row, col 为索引组成的向量</li>
</ul></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">16</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">ind = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line">print(x[ind])</span><br><span class="line"></span><br><span class="line">X = x.reshape(<span class="number">4</span>, <span class="number">-1</span>)</span><br><span class="line">print(X)</span><br><span class="line"></span><br><span class="line">row = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">col = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">print(<span class="string">"对角线元素: "</span>, X[row, col])</span><br><span class="line"></span><br><span class="line">[out1]:</span><br><span class="line">[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span>]</span><br><span class="line">[<span class="number">3</span> <span class="number">5</span> <span class="number">8</span>]</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span>]]</span><br><span class="line">[ <span class="number">0</span>  <span class="number">5</span> <span class="number">10</span> <span class="number">15</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>重要: 使用bool值</strong>
<ul>
<li>a = [True, False, False, True]</li>
<li>X[a] : 这种用法很常用</li>
</ul></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(x &lt; <span class="number">3</span>)</span><br><span class="line">print(x == <span class="number">3</span>)</span><br><span class="line">print(x*<span class="number">2</span> == <span class="number">25</span> - <span class="number">4</span>*x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子: 样本中有多少小于3岁的人</span></span><br><span class="line">np.sum(x &lt;= <span class="number">3</span>)</span><br><span class="line">np.count_nonzero(x &lt;= <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否有为0的元素, 有任意一个数为 0 则返回True</span></span><br><span class="line">np.any(x == <span class="number">0</span>)   </span><br><span class="line">np.any(x &lt; <span class="number">0</span>)   <span class="comment"># 有一个 小于0 则返回 True</span></span><br><span class="line">np.all(x &gt; <span class="number">0</span>)   <span class="comment"># 所有元素都 &gt; 0 则返回 True</span></span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line">np.sum(~(x==<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">print(X[X[:, <span class="number">3</span>] % <span class="number">3</span> == <span class="number">0</span>, :])</span><br></pre></td></tr></table></figure>
<h2 id="matplotlib">7.2 matplotlib</h2>
<h1 id="评价分类结果">10. 评价分类结果</h1>
<h2 id="混淆矩阵confusion-matrix">10.1 混淆矩阵Confusion Matrix</h2>
<h2 id="精准率和召回率">10.2 精准率和召回率</h2>
<blockquote>
<p>精准率：预测有100个人有癌症，在这些预测中，有多少是准确的。 <span class="math inline">\(precision = \frac{TP}{TP + FP}\)</span></p>
<ul>
<li>需要的是精确度</li>
</ul>
<p>召回率：实际上100人有癌症，我们的预测算法能从中正确的挑出多少。 <span class="math inline">\(recall = \frac{TP}{P} = \frac{TP}{TP + FN}\)</span></p>
<ul>
<li>需要的是预测的范围，预测的多不多</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">digits = datasets.load_digits()        <span class="comment"># 手写数字识别</span></span><br><span class="line">X = digits.data</span><br><span class="line">y = digits.target.copy()     <span class="comment"># 深拷贝</span></span><br><span class="line"><span class="comment"># print(X)</span></span><br><span class="line"><span class="comment"># print(y)</span></span><br><span class="line"></span><br><span class="line">y[digits.target==<span class="number">9</span>] = <span class="number">1</span>      <span class="comment"># 等于9的，  为1</span></span><br><span class="line">y[digits.target!=<span class="number">9</span>] = <span class="number">0</span>      <span class="comment"># 不等于9的，为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切割数据</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># 切分数据集为 训练集 和 测试集</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑回归</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">log_reg = LogisticRegression()</span><br><span class="line">log_reg.fit(X_train, y_train)</span><br><span class="line">print(log_reg.score(X_test, y_test))      <span class="comment"># 这是准确度 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意，此数据为 偏斜较大的数据，因此，需要考察其他指标</span></span><br><span class="line"><span class="comment"># 逻辑回归的预测值</span></span><br><span class="line">y_log_predict = log_reg.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于混淆矩阵</span></span><br><span class="line"><span class="comment"># TN</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TN</span><span class="params">(y_true, y_predict)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(y_true) == len(y_predict)</span><br><span class="line">    <span class="keyword">return</span> np.sum((y_true == <span class="number">0</span>) &amp; (y_predict == <span class="number">0</span>))    <span class="comment"># 预测为0，预测正确，y_true为 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TN 值</span></span><br><span class="line">print(TN(y_test, y_log_predict))</span><br><span class="line"></span><br><span class="line"><span class="comment"># FP</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FP</span><span class="params">(y_true, y_predict)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(y_true) == len(y_predict)</span><br><span class="line">    <span class="keyword">return</span> np.sum((y_true == <span class="number">0</span>) &amp; (y_predict == <span class="number">1</span>))    <span class="comment"># 预测为9，预测错误，y_true为 0</span></span><br><span class="line"></span><br><span class="line">print(FP(y_test, y_log_predict))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FN</span><span class="params">(y_true, y_predict)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(y_true) == len(y_predict)</span><br><span class="line">    <span class="keyword">return</span> np.sum((y_true == <span class="number">1</span>) &amp; (y_predict == <span class="number">0</span>))   <span class="comment"># 预测成0，预测错误，y_true为 1</span></span><br><span class="line"></span><br><span class="line">print(FN(y_test, y_log_predict))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TP</span><span class="params">(y_true, y_predict)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(y_true) == len(y_predict)</span><br><span class="line">    <span class="keyword">return</span> np.sum((y_true == <span class="number">1</span>) &amp; (y_predict == <span class="number">1</span>))   <span class="comment"># 预测成 9，预测正确，y_true为 1</span></span><br><span class="line"></span><br><span class="line">print(TP(y_test, y_log_predict))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">confusion_matrix</span><span class="params">(y_true, y_predict)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.array([</span><br><span class="line">                     [TP(y_true, y_predict), FN(y_true, y_predict)],</span><br><span class="line">                     [FP(y_true, y_predict), TN(y_true, y_predict)]</span><br><span class="line">                    ])</span><br><span class="line"></span><br><span class="line">confusion_matrix(y_test, y_log_predict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># precision</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">precision_score</span><span class="params">(y_true, y_predict)</span>:</span></span><br><span class="line">    tp = TP(y_true, y_predict)</span><br><span class="line">    fp = FP(y_true, y_predict)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> tp / (tp + fp)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span></span><br><span class="line">    </span><br><span class="line">print(<span class="string">"精准率: "</span>, precision_score(y_test, y_log_predict))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># recall</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recall_score</span><span class="params">(y_true, y_predict)</span>:</span></span><br><span class="line">    tp = TP(y_true, y_predict)</span><br><span class="line">    fn = FN(y_true, y_predict)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> tp / (tp + fn)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span></span><br><span class="line">    </span><br><span class="line">print(<span class="string">"召回率:"</span>, recall_score(y_test, y_log_predict))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0.9755555555555555</span></span><br><span class="line"><span class="number">403</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">36</span></span><br><span class="line">[[ <span class="number">36</span>   <span class="number">9</span>]</span><br><span class="line"> [  <span class="number">2</span> <span class="number">403</span>]]</span><br><span class="line">精准率:  <span class="number">0.9473684210526315</span></span><br><span class="line">召回率: <span class="number">0.8</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习代码索引</title>
    <url>/posts/8245.html</url>
    <content><![CDATA[<p>本篇博客总结了，可能会重复使用的代码的索引，方便查找</p>
<a id="more"></a>
<h1 id="机器学习">机器学习</h1>
<h2 id="分类性能度量">分类性能度量</h2>
<h3 id="精准率和召回率">精准率和召回率</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 混淆矩阵</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line">confusion_matrix(y_test, y_log_predict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 精确率</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> precision_score</span><br><span class="line">precision_score(y_test, y_log_predict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> recall_score</span><br><span class="line">recall_score(y_test, y_log_predict)</span><br></pre></td></tr></table></figure>
<h3 id="p-r曲线绘制">P-R曲线绘制</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#利用鸢尾花数据集绘制P-R曲线</span></span><br><span class="line">print(__doc__)      <span class="comment">#打印注释</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm, datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> precision_recall_curve    <span class="comment"># 精确率和召回率</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> average_precision_score   </span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> label_binarize      <span class="comment"># 标签的标准化处理</span></span><br><span class="line"><span class="keyword">from</span> sklearn.multiclass <span class="keyword">import</span> OneVsRestClassifier    <span class="comment">#一对其余（每次将一个类作为正类，剩下的类作为负类）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from sklearn.cross_validation import train_test_split  #适用于anaconda 3.6及以前版本</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split     <span class="comment">#适用于anaconda 3.7，训练集和数据集拆分模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以iris数据为例，画出P-R曲线</span></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">X = iris.data    <span class="comment">#150*4</span></span><br><span class="line">y = iris.target  <span class="comment">#150*1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签二值化,将三个类转为001, 010, 100的格式.因为这是个多类分类问题，后面将要采用</span></span><br><span class="line"><span class="comment">#OneVsRestClassifier策略转为二类分类问题</span></span><br><span class="line">y = label_binarize(y, classes=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])    <span class="comment">#将150*1转化成150*3</span></span><br><span class="line">n_classes = y.shape[<span class="number">1</span>]                      <span class="comment">#列的个数，等于3</span></span><br><span class="line"><span class="keyword">print</span> (y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加了800维的噪声特征</span></span><br><span class="line">random_state = np.random.RandomState(<span class="number">0</span>)</span><br><span class="line">n_samples, n_features = X.shape</span><br><span class="line"></span><br><span class="line">X = np.c_[X, random_state.randn(n_samples, <span class="number">200</span> * n_features)]   <span class="comment">#行不变，只增加了列，150*804</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练集和测试集拆分，比例为0.5</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">.5</span>, random_state=random_state) <span class="comment">#随机数，填0或不填，每次都会不一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一对其余，转换成两类，构建新的分类器</span></span><br><span class="line">classifier = OneVsRestClassifier(svm.SVC(kernel=<span class="string">'linear'</span>, probability=<span class="literal">True</span>, random_state=random_state))</span><br><span class="line"><span class="comment">#训练集送给fit函数进行拟合训练，训练完后将测试集的样本特征注入，得到测试集中每个样本预测的分数</span></span><br><span class="line">y_score = classifier.fit(X_train, y_train).decision_function(X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute Precision-Recall and plot curve</span></span><br><span class="line"><span class="comment">#下面的下划线是返回的阈值。作为一个名称：此时“_”作为临时性的名称使用。</span></span><br><span class="line"><span class="comment">#表示分配了一个特定的名称，但是并不会在后面再次用到该名称。</span></span><br><span class="line">precision = dict()</span><br><span class="line">recall = dict()</span><br><span class="line">average_precision = dict()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_classes):</span><br><span class="line">    <span class="comment">#对于每一类，计算精确率和召回率的序列（:表示所有行，i表示第i列）</span></span><br><span class="line">    precision[i], recall[i], _ = precision_recall_curve(y_test[:, i],  y_score[:, i])</span><br><span class="line">    average_precision[i] = average_precision_score(y_test[:, i], y_score[:, i])<span class="comment">#切片，第i个类的分类结果性能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute micro-average curve and area. ravel()将多维数组降为一维</span></span><br><span class="line">precision[<span class="string">"micro"</span>], recall[<span class="string">"micro"</span>], _ = precision_recall_curve(y_test.ravel(),  y_score.ravel())</span><br><span class="line">average_precision[<span class="string">"micro"</span>] = average_precision_score(y_test, y_score, average=<span class="string">"micro"</span>) <span class="comment">#This score corresponds to the area under the precision-recall curve.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot Precision-Recall curve for each class</span></span><br><span class="line">plt.clf()<span class="comment">#clf 函数用于清除当前图像窗口</span></span><br><span class="line">plt.plot(recall[<span class="string">"micro"</span>], precision[<span class="string">"micro"</span>],</span><br><span class="line">         label=<span class="string">'micro-average Precision-recall curve (area = &#123;0:0.2f&#125;)'</span>.format(average_precision[<span class="string">"micro"</span>]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_classes):</span><br><span class="line">    plt.plot(recall[i], precision[i],</span><br><span class="line">             label=<span class="string">'Precision-recall curve of class &#123;0&#125; (area = &#123;1:0.2f&#125;)'</span>.format(i, average_precision[i]))</span><br><span class="line"></span><br><span class="line">plt.xlim([<span class="number">0.0</span>, <span class="number">1.0</span>])</span><br><span class="line">plt.ylim([<span class="number">0.0</span>, <span class="number">1.05</span>]) <span class="comment">#xlim、ylim：分别设置X、Y轴的显示范围。</span></span><br><span class="line">plt.xlabel(<span class="string">'Recall'</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Precision'</span>,fontsize=<span class="number">16</span>)</span><br><span class="line">plt.title(<span class="string">'Extension of Precision-Recall curve to multi-class'</span>,fontsize=<span class="number">16</span>)</span><br><span class="line">plt.legend(loc=<span class="string">"lower right"</span>)<span class="comment">#legend 是用于设置图例的函数</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h2 id="特征处理">特征处理</h2>
<h3 id="量纲缩放标准化缩放法和区间缩放法">量纲缩放(标准化缩放法和区间缩放法)</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">演示内容：量纲的特征缩放</span></span><br><span class="line"><span class="string">（两种方法：标准化缩放法和区间缩放法。每种方法举了两个例子：简单二维矩阵和iris数据集）</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#方法1：标准化缩放法 例1：对简单示例二维矩阵的列数据进行</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing   </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="comment">#采用numpy的array表示，因为要用到其mean等函数，而list没有这些函数</span></span><br><span class="line">X = np.array([[<span class="number">0</span>, <span class="number">0</span>], </span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>], </span><br><span class="line">        [<span class="number">100</span>, <span class="number">1</span>], </span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>]])  </span><br><span class="line"><span class="comment"># calculate mean  </span></span><br><span class="line">X_mean = X.mean(axis=<span class="number">0</span>)  </span><br><span class="line"><span class="comment"># calculate variance   </span></span><br><span class="line">X_std = X.std(axis=<span class="number">0</span>)  </span><br><span class="line"><span class="comment">#print (X_std)</span></span><br><span class="line"><span class="comment"># standardize X  </span></span><br><span class="line">X1 = (X-X_mean)/X_std</span><br><span class="line"><span class="keyword">print</span> (X1)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">""</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># we can also use function preprocessing.scale to standardize X  </span></span><br><span class="line">X_scale = preprocessing.scale(X)  </span><br><span class="line"><span class="keyword">print</span> (X_scale)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#方法1： 标准化缩放法 例2：对iris数据二维矩阵的列数据进行。这次采用一个集成的方法StandardScaler</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">X_scale = preprocessing.scale(iris.data)  </span><br><span class="line"><span class="keyword">print</span> (X_scale)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#方法2： 区间缩放法 例3：对简单示例二维矩阵的列数据进行</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"> </span><br><span class="line">data = [[<span class="number">0</span>, <span class="number">0</span>], </span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>], </span><br><span class="line">        [<span class="number">100</span>, <span class="number">1</span>], </span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line"> </span><br><span class="line">scaler = MinMaxScaler()</span><br><span class="line">print(scaler.fit(data))</span><br><span class="line">print(scaler.transform(data))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#方法2： 区间缩放法 例4：对iris数据二维矩阵的列数据进行</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"> </span><br><span class="line">data = iris.data</span><br><span class="line"> </span><br><span class="line">scaler = MinMaxScaler()</span><br><span class="line">print(scaler.fit(data))</span><br><span class="line">print(scaler.transform(data))</span><br></pre></td></tr></table></figure>
<h3 id="特征向量化">特征向量化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#特征向量化</span></span><br><span class="line"><span class="comment">#法一：布尔权重</span></span><br><span class="line"><span class="comment">#输入单词列表和句子列表</span></span><br><span class="line"><span class="comment">#返回特征向量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boolCountVectorizer</span><span class="params">(wordlst,senlst)</span>:</span></span><br><span class="line">    wordCount = len(wordlst)                 <span class="comment"># 总单词数，向量共wordCount列</span></span><br><span class="line">    senCount = len(senlst)                  <span class="comment"># 总句子数，向量共senCount行</span></span><br><span class="line">    mat = np.zeros((senCount,wordCount), dtype=int)</span><br><span class="line">    word_index=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(wordlst)):            <span class="comment">#提前记录每个单词在wordlst中的序号</span></span><br><span class="line">        word_index[str(wordlst[i])] = i</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(senCount):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(senlst[i])):</span><br><span class="line">            <span class="keyword">if</span> senlst[i][j] <span class="keyword">in</span> wordlst:</span><br><span class="line">                idx = word_index[str(senlst[i][j])]</span><br><span class="line">                mat[i][idx] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mat</span><br><span class="line"></span><br><span class="line"><span class="comment"># mat=boolCountVectorizer(wordlst, senlst)      </span></span><br><span class="line"><span class="comment"># print('mat.shape=',mat.shape)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#法二：tf-idf权重</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tfidfCountVectorizer</span><span class="params">(wordlst, senlst)</span>:</span></span><br><span class="line">    </span><br><span class="line">    wordCount=len(wordlst)</span><br><span class="line">    senCount=len(senlst)</span><br><span class="line">    weight = np.zeros((senCount,wordCount), dtype=float)</span><br><span class="line">    </span><br><span class="line">    n3 = senCount            <span class="comment">#n3表示句子总数</span></span><br><span class="line">    <span class="keyword">for</span> j,word <span class="keyword">in</span> enumerate(wordlst):</span><br><span class="line">        n4 = <span class="number">0</span>               <span class="comment">#n4表示包含该word的句子数</span></span><br><span class="line">        <span class="keyword">for</span> eve <span class="keyword">in</span> senlst:</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">in</span> eve:</span><br><span class="line">                n4 += <span class="number">1</span></span><br><span class="line">        idf = math.log(((n3+<span class="number">1</span>)/(n4+<span class="number">1</span>))+<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(senCount):</span><br><span class="line">            n1 = senlst[i].count(word)</span><br><span class="line">            n2 = len(senlst[i])</span><br><span class="line">            tf = n1/n2            <span class="comment">#tf表示word在句子senlst[i]中的出现频率</span></span><br><span class="line"></span><br><span class="line">            weight[i][j]=tf*idf   <span class="comment">#weight[i][j]表示第j个词在i个句子中的tf-idf权重</span></span><br><span class="line">    <span class="keyword">return</span> weight</span><br><span class="line"> </span><br><span class="line"><span class="comment"># mat=tfidfCountVectorizer(wordlst,senlst)</span></span><br><span class="line"><span class="comment"># print(mat)</span></span><br><span class="line"><span class="comment"># print(mat.shape)</span></span><br><span class="line"><span class="comment"># print(np.sum(mat!=0.0))</span></span><br></pre></td></tr></table></figure>
<h3 id="特征选择">特征选择</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#特征选择</span></span><br><span class="line"><span class="comment">#法一：方差选择法  </span></span><br><span class="line"><span class="comment">#输入特征向量mat，参数p，单词列表wordlst</span></span><br><span class="line"><span class="comment">#返回特征选择后的向量mat，特征单词wordlst</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">featureSupport1</span><span class="params">(mat, p, wordlst)</span>:</span>  </span><br><span class="line">    wordlst = np.array(wordlst)</span><br><span class="line">    </span><br><span class="line">    var = p * (<span class="number">1</span> - p)</span><br><span class="line">    lst = np.var(mat, axis=<span class="number">0</span>)               <span class="comment"># 计算每列的方差</span></span><br><span class="line">    mu = lst &gt;= var                    <span class="comment"># mu得到一个bool矩阵</span></span><br><span class="line">    <span class="keyword">return</span> mat[:,mu],wordlst[mu]</span><br><span class="line"></span><br><span class="line"><span class="comment">#法二：皮尔森相关系数法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">featureSupport2</span><span class="params">(mat,threshold,wordlst,y_train)</span>:</span></span><br><span class="line">    wordlst=np.array(wordlst)</span><br><span class="line">    y_train=np.array(y_train)</span><br><span class="line">    </span><br><span class="line">    lst=[pearsonr(mat[:,i],y_train.T)[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(mat.shape[<span class="number">1</span>])]</span><br><span class="line">    mu=np.abs(np.array(lst))&gt;=threshold</span><br><span class="line">    <span class="keyword">return</span> mat[:,mu],wordlst[mu]</span><br></pre></td></tr></table></figure>
<h1 id="深度学习">深度学习</h1>
<h1 id="自然语言处理">自然语言处理</h1>
<h2 id="分词">分词</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#过滤掉标点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tokens</span><span class="params">(text)</span>:</span></span><br><span class="line">    lowers = text.lower()</span><br><span class="line">    remove_punctuation_map = dict((ord(char), <span class="literal">None</span>) <span class="keyword">for</span> char <span class="keyword">in</span> string.punctuation)</span><br><span class="line">    no_punctuation = lowers.translate(remove_punctuation_map)</span><br><span class="line">    tokens = nltk.word_tokenize(no_punctuation)</span><br><span class="line">    <span class="keyword">return</span> tokens</span><br><span class="line"></span><br><span class="line"><span class="comment">#单词词形还原</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stem_tokens</span><span class="params">(tokens, stemmer)</span>:</span></span><br><span class="line">    stemmed = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> tokens:</span><br><span class="line">        stemmed.append(stemmer.stem(item))</span><br><span class="line">    <span class="keyword">return</span> stemmed</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>python</tag>
        <tag>pytorch</tag>
        <tag>自然语言处理</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习</title>
    <url>/posts/48513.html</url>
    <content><![CDATA[<ul>
<li>深度学习概述</li>
<li>特征工程</li>
</ul>
<a id="more"></a>
<h1 id="第一讲-深度学习概述">第一讲 深度学习概述</h1>
<h2 id="深度学习的引出">深度学习的引出</h2>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200531195431320-1095966772.png"></p>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200531195404449-620553540.png"></p>
<p><strong>特点：</strong></p>
<ul>
<li>通过 <strong>组合低层特征</strong>，形成了更加抽象的 <strong>高层特征</strong>。</li>
<li>表达式中的 u，w参数需要在训练中通过 <strong>反向传播多次迭代调整</strong>，使得整体的 <strong>分类误差最小</strong>。</li>
<li>深度学习网络往往 <strong>包含多个中间层（隐藏层）</strong>，且网络结构要更复杂一些。</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200531195908274-1184672399.png"></p>
<h2 id="数据集及其拆分">数据集及其拆分</h2>
<blockquote>
<ul>
<li><p>Iris（鸢尾花）数据集</p></li>
<li><p>分类特征：花萼和花瓣的宽度和长度</p></li>
</ul>
</blockquote>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200531201335444-1594057517.png"></p>
<blockquote>
<p>数据集在数学上通常表示为 $ {(x_1,y_1),(x_2,y_2),...,(x_i,y_i),...,(x_m,y_m)}​$</p>
<ul>
<li>其中 <span class="math inline">\(x_i\)</span> 为样本特征。由于样本（即一行）一般有多个特征，因而 $x_i = {x_i^1, x_i^2,..., x_i^n} $</li>
<li>而 <span class="math inline">\(y_i\)</span> 表示 <strong>样本i</strong> 的 <strong>类别标签</strong>。</li>
</ul>
</blockquote>
<ul>
<li><strong>类别标签的ground truth 与 gold standard</strong></li>
</ul>
<blockquote>
<p>ground truth：翻译为地面实况。机器学习领域一般用于表示真实值、标准答案等，表示通过直接观察收集到的真实结果。</p>
<p>gold standard：金标准，医学上一般指诊断疾病公认的最可靠的方法。</p>
<p>机器学习领域更倾向于使用ground truth，如果用gold standard则表示可以很好地代表ground truth。</p>
</blockquote>
<h3 id="数据集与有监督学习">数据集与有监督学习</h3>
<p>有监督学习中数据通常分成 <strong>训练集</strong>、<strong>测试集</strong> 两部分。</p>
<ul>
<li>训练集( training set)：用来<strong>训练模型</strong>，即被用来 <strong>学习</strong> 得到系统的 <strong>参数取值</strong>。</li>
<li>测试集( testing set)：用于最终报告模型的<strong>评价结果</strong>，因此在训练阶段测试集中的样本应该是不可见的。</li>
<li>对<strong>训练集</strong>做进一步划分为 <strong>训练集、验证集 validation set</strong>。
<ul>
<li>验证集：与测试集类似，也是用于评估模型的性能。</li>
<li><strong>区别</strong>：是 验证集 主要 用于 模型选择 和 调整超参数，因而一般不用于报告最终结果。</li>
</ul></li>
</ul>
<h3 id="训练集测试集拆分">训练集测试集拆分</h3>
<ul>
<li>留出法( Hold-out Method)数据拆分步骤</li>
</ul>
<p>​ 1.将数据随机分为两组，一组做为<strong>训练集</strong>，一组做为<strong>测试集</strong></p>
<p>​ 2.利用训练集训练分类器,然后利用测试集评估模型，记录最后的分类准确率为此分类器的性能指标</p>
<ul>
<li><strong><u>K折交叉验证</u> </strong></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200531205502620-1463495587.png"></p>
<ul>
<li><p>分层抽样策略（Stratified k-fold）</p>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200531210645121-2064840159.png"></p></li>
</ul>
<blockquote>
<ul>
<li><strong>过程：</strong>
<ul>
<li>将数据集划分成k份，特点在于，划分的k份中 ——</li>
<li>每一份内各个类别数据的比例 和 原始数据集中各个类别的比例 <strong>相同</strong>。</li>
</ul></li>
</ul>
</blockquote>
<h3 id="k折交叉验证的应用-用网格搜索来调超参数">K折交叉验证的应用-用网格搜索来调超参数</h3>
<ul>
<li>什么是超参数？
<ul>
<li>指在学习过程之前 需要设置其值的一些变量</li>
<li>而不是通过训练得到的参数数据。如深度学习中的学习速率（learning rate）等就是超参数。</li>
</ul></li>
<li><p>什么是网格搜索?</p></li>
<li><ul>
<li>假设模型中有2个超参数：A和B。</li>
<li>A的可能取值为 <span class="math inline">\({a1,a2,a3}\)</span>；</li>
<li>B的可能取值为连续的，如在区间[0-1]。由于B值为连续，通常进行离散化，如变为 {0, 0.25, 0.5, 0.75, 1.0}</li>
<li>如果使用网格搜索，就是尝试各种可能的 (A,B)对值，找到 能使的模型取得最高性能的 (A,B)值对。</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200531211413656-595539233.png"></p></li>
<li><blockquote>
<p>网格搜索与K折交叉验证结合调整超参数的具体步骤:</p>
<ol type="1">
<li>确定评价指标（准确率等）</li>
<li>对于超参数取值的每种组合,在 <u>训练集</u> 上使用 <u>交叉验证的方法</u> 求得 其 <strong>K次评价的性能均值</strong></li>
<li>最后，比较哪种超参数取值组合的性能最好，从而得到最优超参数的取值组合。</li>
</ol>
</blockquote></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200531213050368-402591670.png"></p>
<h2 id="分类及其性能度量">分类及其性能度量</h2>
<h3 id="分类">分类</h3>
<ul>
<li>分类问题是有监督学习的一个核心问题。分类解决的是要预测样本属于哪个或者哪些预定义的类别。此时输出变量通常取有限个离散值。</li>
<li><p>分类的机器学习的两大阶段</p>
<ol type="1">
<li>从训练数据中学习得到一个 分类决策函数 或 分类模型，称为 分类器( classifier)；</li>
<li>利用学习得到的分类器对新的输入样本进行类别预测。</li>
</ol></li>
<li><strong>两类分类问题 与 多类分类问题：</strong>
<ul>
<li>多类分类问题也可以转化为两类分类问题解决，如采用 一对其余（One-Vs-Rest） 的方法：</li>
<li>将其中一个类标记为正类，然后将剩余的其它类都标记成负类。</li>
</ul></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200531214407794-638106591.png"></p>
<h3 id="分类性能度量"><strong>分类性能度量</strong></h3>
<ul>
<li>假设只有两类样本，即 <u>正例( <strong>p</strong>ositive)</u> 和 <u>负例 (<strong>n</strong>egative)</u>。</li>
<li>通常以关注的类为正类，其他类为负类。</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202005/817161-20200531235150870-1333469783.png"></p>
<ul>
<li>表中AB模式：
<ul>
<li>第二个符号表示：预测的类别 ( <strong>P</strong>ositive or <strong>N</strong>egative )</li>
<li>第一个表示：预测结果 ( <strong>T</strong>rue or <strong>F</strong>alse)</li>
</ul></li>
<li><p><strong>分类准确率( accuracy)</strong>：分类器正确分类的样本数与总样本数之比：</p>
<ul>
<li><span class="math inline">\(accuracy = {\frac{TP+TN}{P+N} }\)</span></li>
</ul></li>
<li><strong><u>精确率( precision)</u></strong>：反映了模型 <strong>判定的正例中真正正例的比重</strong>。在垃圾短信分类器中，是指预测出的垃圾短信中真正垃圾短信的比例。
<ul>
<li><span class="math inline">\(precison = \frac{TP}{TP+FP}\)</span></li>
</ul></li>
<li><u><strong>召回率{ recall)</strong></u>：反映了 <strong>总正例</strong> 中被模型 <strong>正确判定正例</strong> 的比重。
<ul>
<li>医学领域也叫做灵敏度( sensitivity)。在垃圾短信分类器中,指所有真的垃圾短信被分类器正确找出来的比例。</li>
<li><span class="math inline">\(recall = \frac{TP}{P}\)</span></li>
</ul></li>
<li><p><u><strong>P-R 曲线</strong></u></p></li>
</ul>
<p><strong><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601004256480-1605353804.png"></strong></p>
<p><strong>Area</strong>( Area Under Curve，或者简称AUC)：</p>
<ul>
<li>Area的定义（p-r曲线下的面积）：
<ul>
<li><span class="math inline">\(Area = \int_0^1p(r)dr​\)</span></li>
</ul></li>
<li>有助于弥补P、R的单点值局限性，可以 <u>反映全局性能</u>。</li>
</ul>
<p><strong>如何绘制P-R曲线：</strong></p>
<ul>
<li><p>要得到PR曲线，需要一系列 Precision和Recall的值。这些系列值是通过阈值来形成的。对于每个测试样本，分类器一般都会给了“Score”值，表示该样本多大概率上属于正例。</p></li>
<li><p><strong>步骤：</strong></p></li>
</ul>
<ol type="1">
<li>从高到低将“ Score&quot;值排序，并依此作为阈值 threshold；</li>
<li>对于每个阈值，“ Score&quot;值大于或等于这个 threshold的测试样本被认为正例，其它为负例。从而形成一组预测数据。（每个样本设置不同阈值，算出precison和recall，从而形成一组数据）</li>
</ol>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601005651528-980151809.png"></p>
<ul>
<li><strong><u>F值</u></strong>
<ul>
<li>F 值 (<span class="math inline">\(F_\beta-score​\)</span>) 是 精确率 和 召回率 的 调和平均：
<ul>
<li><span class="math inline">\(F_\beta-score=\frac{(1+\beta^2)*precison*recall}{(\beta^2*precision+recall)}\)</span></li>
<li><strong><span class="math inline">\(\beta一般大于0。当\beta=1时，退化为 F1\)</span></strong> (同等重要)</li>
<li><span class="math inline">\(F_1\)</span> 是最常用的 评价指标，即 表示二者同等重要</li>
</ul></li>
</ul></li>
<li><u><strong>ROC</strong>（受试者工作特征曲线，receiver operating characteristic curve）</u>
<ul>
<li>描绘了分类器在 <span class="math inline">\(tp rate\)</span> （真正正例占总正例的比率，反映<strong>命中概率</strong>，纵轴) 和</li>
<li><span class="math inline">\(fp rate\)</span>（错误的正例占反例的比率，反映误诊率、假阳性率、虚惊概率，橫轴)间的trade-off。</li>
<li>ROC曲线绘制和P-R曲线类似。</li>
</ul></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601010728072-509837196.png"></p>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601012244248-36051544.png"></p>
<ul>
<li><u><strong>ROC- AUC ( Area Under Curve)定义为ROC曲线下的面积</strong></u>
<ul>
<li>AUC值提供了分类器的一个整体数值。通常AUC越大,分类器更好。</li>
<li>取值范围为[0,1]</li>
</ul></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601012534423-1615403709.png"></p>
<ul>
<li>分类性能可视化
<ul>
<li>混淆矩阵的可视化：可用热图（heatmap）直观展现类别的混淆情况</li>
<li>分类报告：显示每个类的分类性能，包括每个类标签的精确率、召回率、F1值等。</li>
</ul></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601012749910-1908185568.png"></p>
<h2 id="回归问题及其性能度量">回归问题及其性能度量</h2>
<h3 id="回归分析-regression-analysis">回归分析( regression analysis)</h3>
<blockquote>
<p>回归分析( regression analysis)：</p>
<ul>
<li>是确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法</li>
<li>和分类问题不同：
<ul>
<li><strong>回归</strong> 通常输出为 <u>一个实数数值。</u></li>
<li><strong>分类</strong> 通常输出为 <u>若干指定的类别标签。</u></li>
</ul></li>
</ul>
</blockquote>
<h3 id="常用的回归性能度量方法">常用的回归性能度量方法</h3>
<ul>
<li><strong><u>平均绝对误差 MAE</u> (mean_absolute_error)</strong>
<ul>
<li>MAE ( Mean absolute error) 是 绝对误差损失( absolute error loss)的期望值。　　</li>
<li>如果 <span class="math inline">\(\hat{y_i}​\)</span> 是 第 <span class="math inline">\(i​\)</span> 个样本的 预测值，<span class="math inline">\(y_i​\)</span>是相应的真实值，那么在 <span class="math inline">\(n_{samples}​\)</span>个测试样本上的 <u>平均绝对误差</u> (MAE) 的定义如下：
<ul>
<li><strong><span class="math inline">\(MAE(y, \hat{y}) = \frac{1}{n_{sample}}\sum_{i=0}^{n_{samplee}-1}|y_i - \hat{y_i}|​\)</span></strong></li>
</ul></li>
</ul></li>
<li><strong><u>均方误差 MSE</u> (mean_squared_error) 及 均方根差 RMSE</strong>
<ul>
<li><strong>MSE( Mean squared error)，</strong>该指标对应于 平方误差损失( squared errorloss)的期望值。</li>
<li>如果 <span class="math inline">\(\hat{y_i}​\)</span> 是 第 <span class="math inline">\(i​\)</span> 个样本的 预测值，<span class="math inline">\(y_i​\)</span>是相应的真实值，那么在 <span class="math inline">\(n_samples​\)</span>个测试样本上的 <u>均方差</u> 的定义如下：
<ul>
<li><strong><span class="math inline">\(MSE(y, \hat{y}) = \frac{1}{n_{sample}}\sum_{i=0}^{n_{samplee}-1}|y_i - \hat{y_i}|^2\)</span></strong></li>
</ul></li>
<li>均方根差RMSE：是MSE的平方根</li>
</ul></li>
<li><u><strong>logistic回归损失（二类）</strong></u>
<ul>
<li><p><strong>简称 Log loss，或交叉熵损失( cross-entropy loss)</strong></p>
<ul>
<li>常用于评价 逻辑回归LR 和 神经网络</li>
</ul></li>
<li><p>对于二类分类问题：</p>
<ol type="1">
<li><p>假设某样本的真实标签为 y (取值为0或1)，概率估计为 <span class="math inline">\(p = pr(y = 1)\)</span></p></li>
<li><p>每个样本的 <u>log loss</u> 是对 分类器 给定 <u>真实标签</u> 的 <u>负log似然估计(negative log-likelihood)</u></p>
<ul>
<li><span class="math inline">\(L_{log}(y, p) = -log(pr(y|p)) = -(ylog(p) + (1- y)log(1-p))​\)</span></li>
</ul></li>
<li><p>实例：</p>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601114310559-692506753.png"></p></li>
</ol></li>
</ul></li>
<li><p><u><strong>logistic回归损失（多类）</strong></u></p>
<ul>
<li><p>对于多类问题( multiclass problem)，可将样本的真实标签( true label) 编码成 1-of-K( K为类别总数)的 <strong>二元指示矩阵Y</strong>：</p></li>
<li><p><strong>转换举例：假设 K = 3，即三个类</strong></p>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601121532421-1050468040.png"></p></li>
<li><p>假设模型对测试样本的概率估计结果为P，则在测试集（假设测试样本总数为N）上的 <u>交叉熵损失</u> 表示如下：</p>
<ul>
<li><strong><span class="math inline">\(L_{log}(Y, P) = -\frac{1}{N}\sum_{k=0}^{k-1}y_{i, k}logp_{i, k}\)</span></strong></li>
<li><strong><span class="math inline">\(y_{i,k}\)</span></strong> ：表示第 <span class="math inline">\(i\)</span> 个样本的第 <span class="math inline">\(k\)</span> 个标签的 真实值</li>
<li>即ground truth，具体含义为第 <span class="math inline">\(i\)</span> 个样本，是否属于第 <span class="math inline">\(k\)</span> 个标签，注意由于表示为 “1-of-K模式，因此每个样本只有其中一个标签值为1，其余均为0。</li>
<li><strong><span class="math inline">\(p_{i,k}\)</span></strong> ：表示模型对第 <span class="math inline">\(i\)</span> 个样本的 第 <span class="math inline">\(k​\)</span> 个标签的 预测值。</li>
</ul></li>
<li><p><strong>举例：6个样本，三个类</strong></p></li>
</ul></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601123659686-988076227.png"></p>
<ul>
<li>回归评价的真实标签（即ground truth）如何获得？
<ul>
<li>MAE，RMSE(MSE) 常用于评分预测评价，eg 很多提供推荐服务的网站都有一个让用户给物品打分的功能预测用广对物品评分的行为称为 <u>评分预测</u>。</li>
</ul></li>
</ul>
<h2 id="一致性的评价方法">一致性的评价方法</h2>
<ul>
<li><strong>一致性评价：</strong>是指对两个或多个相关的变量进行分析，从而衡量其相关性的密切程度。</li>
<li><strong>问题举例：</strong></li>
</ul>
<blockquote>
<ul>
<li>假设两评委( rater)对5部电影的评分如下，则二者的一致如何?</li>
<li>rater1=[0.5,1.6,25,25,24]</li>
<li>rater2=[1.5,26,35,3.5,34]</li>
</ul>
</blockquote>
<ul>
<li><u><strong>皮尔森相关系数法</strong></u></li>
</ul>
<blockquote>
<p>应用背景：</p>
<ul>
<li>用来衡量两个用户之间兴趣的 一致性</li>
<li>用来衡量 预测值与真实值 之间的 相关性</li>
<li>既适用于离散的、也适用于连续变量的 相关分析</li>
</ul>
<p>X 和 Y 之间的皮尔森相关系数计算公式：</p>
<ul>
<li><strong><span class="math inline">\(\rho_{X,Y} = \frac{cov(X,Y)}{\sigma_X\sigma_Y} = \frac{E[(X-\mu_X)(Y-\mu_Y)]}{\sigma_X\sigma_Y}\)</span></strong></li>
<li>其中，<span class="math inline">\(cov(X,Y)\)</span> 表示X和Y之间的 协方差( Covariance)</li>
<li><span class="math inline">\(\sigma_X\)</span> 是X的均方差，<span class="math inline">\(\mu_X\)</span> 是 X 的均值，E表示数学期望</li>
<li>取值区间为[-1,1]。-1：完全的负相关,+1：表示完全的正相关,0：没有线性相关。</li>
</ul>
</blockquote>
<ul>
<li><u><strong>Cohen's kappa相关系数</strong></u></li>
</ul>
<blockquote>
<ul>
<li>与 皮尔森相关系数的区别：Cohens kappa相关系数，通常用于<strong>离散的分类</strong>的一致性评价。</li>
<li><p>其通常被认为比两人之间的简单一致百分比更强壮，因为 Cohen's kappa考虑到了:二人之间的随机一致的可能性</p></li>
<li>如果评价者多于2人时，可以考虑使用 Fleiss' kappa</li>
<li><p><strong>Cohen's kappa的计算方法：</strong></p></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601171156733-1488333849.png"></p>
<ul>
<li>kappa score是一个介于-1到+1之间的数。</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601171527392-1518498052.png"></p>
</blockquote>
<ul>
<li><u><strong>Fleiss' Kappa</strong></u></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601171818179-1069784518.png"></p>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601171855073-687331428.png"></p>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601171936293-151456355.png"></p>
<h2 id="实例绘制pr曲线">实例：绘制PR曲线</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#利用鸢尾花数据集绘制P-R曲线</span></span><br><span class="line">print(__doc__)      <span class="comment">#打印注释</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm, datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> precision_recall_curve</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> average_precision_score</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> label_binarize</span><br><span class="line"><span class="keyword">from</span> sklearn.multiclass <span class="keyword">import</span> OneVsRestClassifier  <span class="comment">#一对其余（每次将一个类作为正类，剩下的类作为负类）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from sklearn.cross_validation import train_test_split  #适用于anaconda 3.6及以前版本</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split     <span class="comment">#适用于anaconda 3.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以iris数据为例，画出P-R曲线</span></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">X = iris.data    <span class="comment">#150*4</span></span><br><span class="line">y = iris.target  <span class="comment">#150*1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签二值化,将三个类转为001, 010, 100的格式.因为这是个多类分类问题，后面将要采用</span></span><br><span class="line"><span class="comment">#OneVsRestClassifier策略转为二类分类问题</span></span><br><span class="line">y = label_binarize(y, classes=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])    <span class="comment">#将150*1转化成150*3</span></span><br><span class="line">n_classes = y.shape[<span class="number">1</span>]                      <span class="comment">#列的个数，等于3</span></span><br><span class="line"><span class="keyword">print</span> (y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加了800维的噪声特征</span></span><br><span class="line">random_state = np.random.RandomState(<span class="number">0</span>)</span><br><span class="line">n_samples, n_features = X.shape</span><br><span class="line"></span><br><span class="line">X = np.c_[X, random_state.randn(n_samples, <span class="number">200</span> * n_features)]   <span class="comment">#行不变，只增加了列，150*804</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练集和测试集拆分，比例为0.5</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">.5</span>, random_state=random_state) <span class="comment">#随机数，填0或不填，每次都会不一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一对其余，转换成两类，构建新的分类器</span></span><br><span class="line">classifier = OneVsRestClassifier(svm.SVC(kernel=<span class="string">'linear'</span>, probability=<span class="literal">True</span>, random_state=random_state))</span><br><span class="line"><span class="comment">#训练集送给fit函数进行拟合训练，训练完后将测试集的样本特征注入，得到测试集中每个样本预测的分数</span></span><br><span class="line">y_score = classifier.fit(X_train, y_train).decision_function(X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute Precision-Recall and plot curve</span></span><br><span class="line"><span class="comment">#下面的下划线是返回的阈值。作为一个名称：此时“_”作为临时性的名称使用。</span></span><br><span class="line"><span class="comment">#表示分配了一个特定的名称，但是并不会在后面再次用到该名称。</span></span><br><span class="line">precision = dict()</span><br><span class="line">recall = dict()</span><br><span class="line">average_precision = dict()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_classes):</span><br><span class="line">    <span class="comment">#对于每一类，计算精确率和召回率的序列（:表示所有行，i表示第i列）</span></span><br><span class="line">    precision[i], recall[i], _ = precision_recall_curve(y_test[:, i],  y_score[:, i])</span><br><span class="line">    average_precision[i] = average_precision_score(y_test[:, i], y_score[:, i])<span class="comment">#切片，第i个类的分类结果性能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute micro-average curve and area. ravel()将多维数组降为一维</span></span><br><span class="line">precision[<span class="string">"micro"</span>], recall[<span class="string">"micro"</span>], _ = precision_recall_curve(y_test.ravel(),  y_score.ravel())</span><br><span class="line">average_precision[<span class="string">"micro"</span>] = average_precision_score(y_test, y_score, average=<span class="string">"micro"</span>) <span class="comment">#This score corresponds to the area under the precision-recall curve.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot Precision-Recall curve for each class</span></span><br><span class="line">plt.clf()<span class="comment">#clf 函数用于清除当前图像窗口</span></span><br><span class="line">plt.plot(recall[<span class="string">"micro"</span>], precision[<span class="string">"micro"</span>],</span><br><span class="line">         label=<span class="string">'micro-average Precision-recall curve (area = &#123;0:0.2f&#125;)'</span>.format(average_precision[<span class="string">"micro"</span>]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_classes):</span><br><span class="line">    plt.plot(recall[i], precision[i],</span><br><span class="line">             label=<span class="string">'Precision-recall curve of class &#123;0&#125; (area = &#123;1:0.2f&#125;)'</span>.format(i, average_precision[i]))</span><br><span class="line"></span><br><span class="line">plt.xlim([<span class="number">0.0</span>, <span class="number">1.0</span>])</span><br><span class="line">plt.ylim([<span class="number">0.0</span>, <span class="number">1.05</span>]) <span class="comment">#xlim、ylim：分别设置X、Y轴的显示范围。</span></span><br><span class="line">plt.xlabel(<span class="string">'Recall'</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Precision'</span>,fontsize=<span class="number">16</span>)</span><br><span class="line">plt.title(<span class="string">'Extension of Precision-Recall curve to multi-class'</span>,fontsize=<span class="number">16</span>)</span><br><span class="line">plt.legend(loc=<span class="string">"lower right"</span>)<span class="comment">#legend 是用于设置图例的函数</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601173506869-1775838890.png" style="zoom:80%"></p>
<h1 id="第二讲-特征工程">第二讲 特征工程</h1>
<h2 id="特征工程">特征工程</h2>
<blockquote>
<p>什么是特征工程？</p>
<p>引自知乎:“数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已。</p>
<p>深度学习也要用到特征，需要对输入的特征进行组合变换等处理。</p>
</blockquote>
<h3 id="自动分词">自动分词</h3>
<ul>
<li>自动分词：就是将用自然语言书写的文章、句段经计算处理后，以词为单位 给以输出，为后续加工处理提供先决条件。</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601230330336-699451350.png"></p>
<ul>
<li><p><strong>词形规范化</strong> 的两种形式：词根提取与词形还原</p>
<ul>
<li><u>词根提取( stemming)</u>：是抽取词的词干或词根形式（不一定能够表达完整语义）。</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601230607507-173049950.png"></p>
<ul>
<li><u>词形还原( lemmatization)</u>：是把词汇还原为一般形式（能表达完整语义）。如将“ drove&quot;处理为&quot;drive&quot;。</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601230725826-442270436.png"></p></li>
</ul>
<h3 id="词性标注"><strong>词性标注</strong></h3>
<ul>
<li><u>词性标注</u> (part-of- speech tagging)：
<ul>
<li>是指为分词结果中的 每个单词 标注一个正确的词性的程序</li>
<li>也即确定每个词是 <u>名词、动词、形容词</u> 或者 其他词性的过程。</li>
</ul></li>
</ul>
<h3 id="句法分析"><strong>句法分析</strong></h3>
<blockquote>
<ul>
<li>句法分析( Syntactic analysis)：</li>
<li>其基本任务是确定句子的 句法结构 或者 句子中词汇之间的 依存关系。</li>
</ul>
</blockquote>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200601232318129-1897561607.png"></p>
<h3 id="自然语言处理工具"><strong>自然语言处理工具</strong></h3>
<ul>
<li><strong><u>NLTK</u></strong></li>
</ul>
<blockquote>
<p>Natural Language Toolkit（自然语言处理工具包）是在NLP领域中最常用的一个 Python库。</p>
<p>提供了很多<strong>文本处理</strong>的功能:</p>
<ol type="1">
<li>Tokenization（词语切分，单词化处理）</li>
<li>Stemming（词干提取）</li>
<li>Tagging（标记，如词性标注）</li>
<li>Parsing（句法分析）此外</li>
</ol>
<p>还提供了50多种语料和词汇资源的接口，如 Word Net等。</p>
</blockquote>
<ul>
<li>Text Processing API</li>
</ul>
<blockquote>
<p>支持如下功能：</p>
<ol type="1">
<li>词根提取与词形还原( Stemming&amp; Lemmatization)</li>
<li>情感分析( Sentiment Analysis)</li>
<li>词性标注和语块抽取( Tagging and chunk Extraction)</li>
<li>短语抽取和命名实体识别( Phrase Extraction&amp; Named Entity Recognition)</li>
</ol>
<p>与NLTK不同，Text Processing API的使用无需安装程序，只需将输入的文本信息通过http post方式联网传递给该网络接口即可。</p>
</blockquote>
<ul>
<li>TextBlob工具</li>
<li><strong><u>中文处理工具jieba</u></strong></li>
</ul>
<blockquote>
<p><strong>功能：</strong></p>
<ul>
<li>分词（包括并行分词、支持自定义词典）</li>
<li>词性标注</li>
<li>关键词提取</li>
</ul>
</blockquote>
<h2 id="向量空间模型及文本相似度计算">向量空间模型及文本相似度计算</h2>
<h3 id="文档的向量化表示bow假设和vsm模型"><strong>文档的向量化表示：BOW假设和VSM模型</strong></h3>
<blockquote>
<p>为了便于计算文档之间的相似度，需把 <strong>文档转成统一空间的向量</strong></p>
<ul>
<li><strong>BOW(bag- of-words model)</strong>：为了计算文档之间的相似度，假设可以忽略文档内的单词顺序和语法、句法等要素，将其仅仅看作是若干个词汇的集合。</li>
<li><strong>VSM( Vector space model)</strong>：即向量空间模型。其是指在BOW词袋模型假设下，将每个文档表示成同一向量空间的向量。</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200602101344864-1314099615.png"></p>
<ul>
<li>举例：</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200602101536283-1030041134.png"></p>
</blockquote>
<h3 id="停用词">停用词</h3>
<blockquote>
<p>英文名称： Stop words</p>
<ul>
<li>停用词通常是非常常见且实际意义有限的词, 如英文中“the&quot;,“a&quot;, &quot;of&quot;,“an”等;中文中“的”、“是”、“而且”等。几乎可能出现在所有场合，因而对某些应用如信息检索、文本分类等区分度不大。</li>
<li>在信息检索等应用中，这些词在构建向量空间时通常会被过滤掉。因此这些词也被称为停用词。</li>
<li>Tip：但在某些应用如短语搜索 phrase search中，停用词可能是重要的构成部分，因此要避免进行停用词过滤。</li>
</ul>
</blockquote>
<h3 id="n-gram模型"><strong>N-gram模型</strong></h3>
<blockquote>
<ul>
<li>N-gram：通常是指 一段 文本或语音 中 <u>连续N个项目(item)</u> 的序列。项目(item)可以是单词、字母、碱基对等。</li>
<li>N=1 称为 uni-gram，N=2 称为 bi-gram，N=3 称为 tri-gram，以此类推。</li>
<li>举例：对于文本 'And I also like to eat apple'
<ul>
<li><strong>Uni-gram：</strong> And, I, also, like, to, eat, apple</li>
<li><strong>Bi-gram</strong>：And l, I also, also like, like to, to eat, eat apple</li>
<li><strong>Tri-gram</strong>：And I also, I also like, also like to, like to eat, to eat apple</li>
</ul></li>
<li>20世纪80年代，N-gram被广泛地应用在 <u>拼写检查、输入法</u> 等应用中，90年代以后，N-gram得到新的应用，如 <strong>自动分类信息检索</strong> 等。即将 连续的若干词作为VSM中的维度，用于表示文档。</li>
</ul>
</blockquote>
<h3 id="文档之间的欧式距离"><strong>文档之间的欧式距离</strong></h3>
<blockquote>
<ul>
<li>欧氏距离( euclidean metric)是一个通常采用的距离定义，指在n维空间中两个点之间的真实距离。</li>
<li>公式：<span class="math inline">\(d_{12} = \sqrt{\sum_{k=1}^n (x_{1k} - x_{2k})^2}​\)</span></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200602103235050-558217719.png"></p>
</blockquote>
<h3 id="文档之间的余弦相似度"><strong>文档之间的余弦相似度</strong></h3>
<blockquote>
<ul>
<li>通过计算 两个向量的夹角余弦值 来评估他们的相似度。余弦值越接近1，就表明夹角越接近0度，也就是两个向量越相似。</li>
<li><img src="/posts/48513/余弦相似度.png" title="fig:" alt="余弦相似度"></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200602104514742-1750768267.png"></p>
</blockquote>
<h3 id="ti-idf词条权重计算">Ti-idf词条权重计算</h3>
<blockquote>
<ul>
<li>背景：<strong>特征向量</strong> 里某些高频词在文集内其他文档里面也经常出现。它往往太普遍，对区分文档起的作用不大。</li>
<li>例如：
<ul>
<li>D1: ' Jobs was the chairman of <strong>Apple</strong> Inc.',</li>
<li>D2: 'I like to use <strong>apple</strong> computer',</li>
</ul></li>
<li>这两个文档都是关于苹果电脑的，则词条 apple对分类意义不大。因此 <strong>有必要抑制</strong> 那些 在很多文档中都出现了的词条的权重。</li>
<li>在 <span class="math inline">\(tf-idf\)</span> 模式下，词条t 在文档d中的权重计算为 <span class="math inline">\(w(t)=tf(t, d) * idf(t)\)</span>。
<ul>
<li><span class="math inline">\(tf(t,d)​\)</span>：表示为 词条t 在 文档d 中的出现频率
<ul>
<li>通过统计得到</li>
</ul></li>
<li><span class="math inline">\(idf(t)\)</span> ：表示与包含词条t的文档数目成反比 (inverse document frequency)
<ul>
<li><span class="math inline">\(idf(t) = (log\frac{n_d}{1+df(t)} + 1)​\)</span></li>
<li><span class="math inline">\(n_d​\)</span> ：表示文档总数，<span class="math inline">\(df(t)​\)</span> ：表示包含该词条 t 的文档数</li>
<li>(optional) 数据平滑问题：为了防止分母 <span class="math inline">\(df(t)\)</span> 为零：</li>
<li><span class="math inline">\(idf(t) = (log\frac{1+n_d}{1+df(t)} + 1)​\)</span></li>
</ul></li>
</ul></li>
<li><span class="math inline">\(tf-idf​\)</span> 词条权重计算 举例：</li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200602111122592-822522628.png"></p>
</blockquote>
<h2 id="特征处理特征缩放选择及降维">特征处理(特征缩放、选择及降维)</h2>
<h3 id="特征值的缩放">特征值的缩放</h3>
<p>特征值缩放( Feature scaler)也可以称为 <strong>无量纲处理</strong>。主要是对每个列，即 同一特征维度的数值 进行规范化处理。</p>
<p>应用背景：</p>
<ul>
<li>不同特征(列)可能不属于同一量纲，<strong>即特征的规格不一样</strong>。例如，假设特征向量由两个解释变量构成，第一个变量值范围[0,1],第二个变量值范围[0,100]。</li>
<li>如果某一特征的方差数量级较大，可能会主导目标函数，导致其他特征的影响被忽略。</li>
</ul>
<p><strong>常用方法：</strong></p>
<ul>
<li><p><strong>标准化法</strong></p>
<ul>
<li>前提：特征值服从正态分布</li>
<li>需要计算特征的 均值X.mean 和 标准差X.std：</li>
<li><p><img src="/posts/48513/标准法.png"></p></li>
<li>标准差 (Standard Deviation)，又称均方差
<ul>
<li>用 <span class="math inline">\(\sigma\)</span> 表示，是方差的算术平方根。<img src="/posts/48513/均方差.png"></li>
<li>标准差：反应一个数据集的离散程度。</li>
<li>例如两组数的集合{0,5,9,1,4}和{5,6,8,9}其平均值都是7，但第二个集合具有较小的标准差。</li>
</ul></li>
</ul></li>
<li><strong>区间缩放法</strong>
<ul>
<li>区间缩放法利用了 <strong>边界值信息</strong>，将 特征的取值区间 缩放到某个特定范围。假设max和min为希望的调整后范围，则
<ul>
<li><span class="math inline">\(X_{scaled} = \frac{(X(axis=0) - X.min(axis=0)) }{(X.max(axis=0) - X.min(axis=0))} *(max - min) + min ​\)</span></li>
</ul></li>
<li>由于希望的调整后范围一般为[0, 1]。此时，公式变为：
<ul>
<li><span class="math inline">\(X_{scaled} = \frac{(X(axis=0) - X.min(axis=0)) }{(X.max(axis=0) - X.min(axis=0))} ​\)</span></li>
</ul></li>
</ul></li>
</ul>
<h3 id="特征值的归一化">特征值的归一化</h3>
<p>归一化，也称规范化（Normalizer）</p>
<ul>
<li><p>归一化是依照 <u><strong>特征矩阵的 行（即样本）</strong></u>处理数据</p></li>
<li><ul>
<li>其目的在于 <strong>样本向量</strong> 在 点乘运算 或 计算相似性时，拥有统一的标准</li>
<li>也就是说，<u>都转化为“单位向量”</u>。即使每个样本的范式(norm)等于1。</li>
</ul></li>
<li><p>规则为 L1 norm 的 归一化 公式如下：</p>
<ul>
<li><span class="math inline">\(x^{&#39;} = \frac{x}{\sum_{j=0}^{n-1}|x_j|}​\)</span></li>
</ul></li>
<li><p>规则为 L2 norm 的 归一化 公式如下：</p>
<ul>
<li><span class="math inline">\(x^{&#39;} = \frac{x}{\sum_{j=0}^{n-1}x_j^2}​\)</span></li>
</ul></li>
</ul>
<h3 id="定量特征的二值化"><strong>定量特征的二值化</strong></h3>
<p>应用背景：</p>
<ul>
<li>对于某些定量特征，需要 将 <strong>定量信息</strong> 转为 <strong>区间划分</strong>。如将考试成绩转为“及格”或“不及格”</li>
</ul>
<p>方法：</p>
<ul>
<li>设定一个阈值，大于或者等于阈值的赋值为1，小于阈值的赋值为0，公式表达:</li>
</ul>
<p><span class="math display">\[
x^{&#39;} = 
\begin{cases}
1, x&gt;=threshold \\
0, x &lt; threshold
\end{cases}
\]</span></p>
<h3 id="缺失特征值的弥补计算">缺失特征值的弥补计算</h3>
<p>背景：</p>
<ul>
<li>数据获取时，由于某些原因缺少某些数值，需要进行弥补。</li>
</ul>
<p>常见的弥补策略：</p>
<ul>
<li>利用 同一特征 的 均值 进行弥补。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">举例：counts=[[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">             [<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">             [<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">             [NaN,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">则，NaN可以弥补为同列上其他数据的均值，即(<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>)/<span class="number">3</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="创建多项式特征">创建多项式特征</h3>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200602143425053-1431616999.png"></p>
<h3 id="特征选择">特征选择</h3>
<ul>
<li>什么是特征选择？选择对于学习任务（如分类问题）有帮助的若干特征。</li>
<li>为什么要进行特征选择？
<ol type="1">
<li>降维以提升模型的效率</li>
<li>降低学习任务难度　　</li>
<li>增加模型的可解释性。</li>
</ol></li>
<li>特征选择的角度：
<ol type="1">
<li>特征是否发散：对于不发散的特征,样本在其维度上差异性较小</li>
<li>特征与目标的相关性：应当优先选择与目标相关性高的特征</li>
</ol></li>
<li>几种常见的特征选择方法：</li>
</ul>
<blockquote>
<ul>
<li><strong>方差选择法</strong>
<ul>
<li>原理：方差非常小的特征维度，对于样本的区分作用很小，可以剔除。</li>
</ul></li>
<li><ul>
<li>例如，假设数据集为布尔特征，想去掉那些，超过80%情况下为1或者为0的特征。由于布尔特征是 Bernoulli(伯努利)随机变量，其方差可以计算为Var[x]=p<em>(1-p)，因此阈值为0.8</em>(1-0.8)=0.16</li>
</ul></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200602145133883-90169868.png"></p>
<ul>
<li><strong>皮尔森相关系数法</strong>
<ul>
<li>皮尔森相关系数( Pearson correlation coefficient)：显示两个随机变量之间线性关系的强度和方向。</li>
</ul></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200602145341213-582027351.png"></p>
<ul>
<li><ul>
<li>计算完毕后，可以将与目标值相关性较小的特征过滤掉。</li>
<li>Tip: Pearson相关系数，对线性关系比较敏感。如果关系是非线性的，即便两个变量具有一一对应的关系，Pearso相关性也可能会接近0。</li>
</ul></li>
<li><p><strong>基于森林的特征选择法</strong></p>
<ul>
<li>其原理是某些分类器，自身提供了特征的重要性分值。因此可以直接调用这些分类器，得到特征重要性分值，并排序。</li>
</ul></li>
<li><p><strong>递归特征消除法</strong></p>
<ol type="1">
<li>首先在初始特征或者权重特征集合上训练。通过学习器返回的coef_属性或者 feature_ importances_属性来获得每个特征的重要程度</li>
<li>然后最小权重的特征被移除。</li>
<li>这个过程递归进行，直到希望的特征数目满足为止。</li>
</ol></li>
</ul>
</blockquote>
<h3 id="特征降维"><strong>特征降维</strong></h3>
<blockquote>
<p>降维本质上是从一个维度空间映射到另一个维度空间。</p>
<p>常见特征降维方法：</p>
<ul>
<li><p><strong><u>线性判别分析</u></strong>( (Linear Discriminant analysis，简称LDA)是一种 <strong>监督学习</strong> 的降维技术，即数据集的每个样本有类别输出。</p></li>
<li><ul>
<li>LDA的基本思想: “投影后类内方差最小，类间方差最大”。</li>
<li>即将数据在 <strong>低维度</strong> 上进行投影，
<ul>
<li>投影后希望 同类数据的投影点尽可能接近，</li>
<li>而 不同类数据 的 类别中心 之间的 距离尽可能的大。(右图好)</li>
</ul></li>
</ul></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200602150326253-1586772457.png"></p>
<ul>
<li><strong><u>主成分分析</u></strong>( principal component analysis)是一种 <strong>无监督的降维方法</strong>。
<ul>
<li>采用数学变换，把给定的一组相关特征维度，</li>
<li>通过 线性换转 成另一组不相关的维度(即 principal components)，</li>
<li>这些新的维度照 <strong><u>方差</u></strong> 依次递减的顺序排列：形成第一主成分、第二主成分等。</li>
<li>应用：高维数据在二维平面上进行展示。</li>
</ul></li>
</ul>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200602150942838-1826314432.png"></p>
</blockquote>
<h2 id="实例使用sklearn对文档进行向量化">实例：使用sklearn对文档进行向量化</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">演示内容：文档的向量化</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line">corpus = [</span><br><span class="line"><span class="string">'Jobs was the chairman of Apple Inc., and he was very famous'</span>,</span><br><span class="line"><span class="string">'I like to use apple computer'</span>,</span><br><span class="line"><span class="string">'And I also like to eat apple'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#未经停用词过滤的文档向量化</span></span><br><span class="line">vectorizer =CountVectorizer()</span><br><span class="line">print(vectorizer.fit_transform(corpus).todense())  <span class="comment">#转化为完整特征矩阵</span></span><br><span class="line">print(vectorizer.vocabulary_)</span><br><span class="line">print(<span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#经过停用词过滤后的文档向量化</span></span><br><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line">nltk.download(<span class="string">'stopwords'</span>)       <span class="comment"># 没有这个文件，就需要下载 </span></span><br><span class="line">stopwords = nltk.corpus.stopwords.words(<span class="string">'english'</span>)</span><br><span class="line"><span class="keyword">print</span> (stopwords)</span><br><span class="line"></span><br><span class="line">print(<span class="string">" "</span>)</span><br><span class="line">vectorizer =CountVectorizer(stop_words=<span class="string">'english'</span>)</span><br><span class="line">print(<span class="string">"after stopwords removal:\n"</span>, vectorizer.fit_transform(corpus).todense())</span><br><span class="line">print(<span class="string">"after stopwords removal:\n"</span>, vectorizer.vocabulary_)</span><br><span class="line"></span><br><span class="line">print(<span class="string">" "</span>)</span><br><span class="line"><span class="comment">#采用ngram模式进行文档向量化</span></span><br><span class="line">vectorizer =CountVectorizer(ngram_range=(<span class="number">1</span>,<span class="number">2</span>))    <span class="comment">#表示从1-2，既包括unigram，也包括bigram</span></span><br><span class="line">print(<span class="string">"N-gram mode:\n"</span>,vectorizer.fit_transform(corpus).todense())  <span class="comment">#转化为完整特征矩阵</span></span><br><span class="line">print(<span class="string">" "</span>)</span><br><span class="line">print(<span class="string">"N-gram mode:\n"</span>,vectorizer.vocabulary_)</span><br></pre></td></tr></table></figure>
<p><img src="https://img2020.cnblogs.com/blog/817161/202006/817161-20200602170950118-199929201.png"></p>
<h2 id="实例使用sklearn进行量纲缩放">实例：使用sklearn进行量纲缩放</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">演示内容：量纲的特征缩放</span></span><br><span class="line"><span class="string">（两种方法：标准化缩放法和区间缩放法。每种方法举了两个例子：简单二维矩阵和iris数据集）</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#方法1：标准化缩放法 例1：对简单示例二维矩阵的列数据进行</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing   </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="comment">#采用numpy的array表示，因为要用到其mean等函数，而list没有这些函数</span></span><br><span class="line">X = np.array([[<span class="number">0</span>, <span class="number">0</span>], </span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>], </span><br><span class="line">        [<span class="number">100</span>, <span class="number">1</span>], </span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>]])  </span><br><span class="line"><span class="comment"># calculate mean  </span></span><br><span class="line">X_mean = X.mean(axis=<span class="number">0</span>)  </span><br><span class="line"><span class="comment"># calculate variance   </span></span><br><span class="line">X_std = X.std(axis=<span class="number">0</span>)  </span><br><span class="line"><span class="comment">#print (X_std)</span></span><br><span class="line"><span class="comment"># standardize X  </span></span><br><span class="line">X1 = (X-X_mean)/X_std</span><br><span class="line"><span class="keyword">print</span> (X1)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">""</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># we can also use function preprocessing.scale to standardize X  </span></span><br><span class="line">X_scale = preprocessing.scale(X)  </span><br><span class="line"><span class="keyword">print</span> (X_scale)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#方法1： 标准化缩放法 例2：对iris数据二维矩阵的列数据进行。这次采用一个集成的方法StandardScaler</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">X_scale = preprocessing.scale(iris.data)  </span><br><span class="line"><span class="keyword">print</span> (X_scale)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#方法2： 区间缩放法 例3：对简单示例二维矩阵的列数据进行</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"> </span><br><span class="line">data = [[<span class="number">0</span>, <span class="number">0</span>], </span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>], </span><br><span class="line">        [<span class="number">100</span>, <span class="number">1</span>], </span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line"> </span><br><span class="line">scaler = MinMaxScaler()</span><br><span class="line">print(scaler.fit(data))</span><br><span class="line">print(scaler.transform(data))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#方法2： 区间缩放法 例4：对iris数据二维矩阵的列数据进行</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"> </span><br><span class="line">data = iris.data</span><br><span class="line"> </span><br><span class="line">scaler = MinMaxScaler()</span><br><span class="line">print(scaler.fit(data))</span><br><span class="line">print(scaler.transform(data))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Suda-practise</title>
    <url>/posts/22087.html</url>
    <content><![CDATA[<blockquote>
<p>苏州大学python复试上机—苏大老师推荐LeetCode习题【来自mooc】</p>
</blockquote>
<a id="more"></a>
<h3 id="验证外星语词典-字符串"><a href="https://leetcode-cn.com/problems/verifying-an-alien-dictionary/" target="_blank" rel="noopener">953. 验证外星语词典</a> [字符串]</h3>
<p>某种外星语也使用英文小写字母，但可能顺序 <code>order</code> 不同。字母表的顺序（<code>order</code>）是一些小写字母的排列。</p>
<p>给定一组用外星语书写的单词 <code>words</code>，以及其字母表的顺序 <code>order</code>，只有当给定的单词在这种外星语中按字典序排列时，返回 <code>true</code>；否则，返回 <code>false</code>。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">输入：words = [<span class="string">"hello"</span>,<span class="string">"leetcode"</span>], <span class="keyword">order</span> = <span class="string">"hlabcdefgijkmnopqrstuvwxyz"</span></span><br><span class="line">输出：<span class="keyword">true</span></span><br><span class="line">解释：在该语言的字母表中，<span class="string">'h'</span> 位于 <span class="string">'l'</span> 之前，所以单词序列是按字典序排列的。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">输入：<span class="keyword">words</span> = [<span class="string">"word"</span>,<span class="string">"world"</span>,<span class="string">"row"</span>], order = <span class="string">"worldabcefghijkmnpqstuvxyz"</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：在该语言的字母表中，<span class="string">'d'</span> 位于 <span class="string">'l'</span> 之后，那么 <span class="keyword">words</span>[<span class="number">0</span>] &gt; <span class="keyword">words</span>[<span class="number">1</span>]，因此单词序列不是按字典序排列的。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">输入：words = [<span class="string">"apple"</span>,<span class="string">"app"</span>], <span class="keyword">order</span> = <span class="string">"abcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line">输出：<span class="keyword">false</span></span><br><span class="line">解释：当前三个字符 <span class="string">"app"</span> 匹配时，第二个字符串相对短一些，然后根据词典编纂规则 <span class="string">"apple"</span> &gt; <span class="string">"app"</span>，因为 <span class="string">'l'</span> &gt; <span class="string">'∅'</span>，其中 <span class="string">'∅'</span> 是空白字符，定义为比任何其他字符都小（更多信息）。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ol type="1">
<li><code>1 &lt;= words.length &lt;= 100</code></li>
<li><code>1 &lt;= words[i].length &lt;= 20</code></li>
<li><code>order.length == 26</code></li>
<li>在 <code>words[i]</code> 和 <code>order</code> 中的所有字符都是英文小写字母。</li>
</ol>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isAlienSorted</span><span class="params">(self, words, order)</span> -&gt; bool:</span></span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> order:</span><br><span class="line">            dic[e] = dic.get(e, <span class="number">0</span>) + order.index(e)</span><br><span class="line">        </span><br><span class="line">        wlen = len(words)</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, wlen):</span><br><span class="line">            A = words[i]</span><br><span class="line">            Alen = len(A)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, wlen):</span><br><span class="line">                B = words[j]</span><br><span class="line">                Blen = len(B)</span><br><span class="line">                mlen = Alen <span class="keyword">if</span> Alen &lt; Blen <span class="keyword">else</span> Blen     <span class="comment"># 小的长度</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(mlen):</span><br><span class="line"><span class="comment">#                    print(A[k], B[k])</span></span><br><span class="line">                    <span class="keyword">if</span> dic[A[k]] &lt; dic[B[k]]:  </span><br><span class="line">                        flag = <span class="number">1</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">elif</span> dic[A[k]] &gt; dic[B[k]]:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># return words == sorted(words, key=lambda w:[order.index(x) for x in w])</span></span><br><span class="line">        </span><br><span class="line">s = Solution()</span><br><span class="line"></span><br><span class="line">print(s.isAlienSorted(words=[<span class="string">"hello"</span>,<span class="string">"leetcode"</span>], order=<span class="string">"hlabcdefgijkmnopqrstuvwxyz"</span>))</span><br><span class="line">print(s.isAlienSorted(words = [<span class="string">"word"</span>,<span class="string">"world"</span>,<span class="string">"row"</span>], order = <span class="string">"worldabcefghijkmnpqstuvxyz"</span>))</span><br><span class="line">print(s.isAlienSorted(words = [<span class="string">"apple"</span>,<span class="string">"app"</span>], order = <span class="string">"abcdefghijklmnopqrstuvwxyz"</span>))</span><br><span class="line">print(s.isAlienSorted([<span class="string">"iekm"</span>,<span class="string">"tpnhnbe"</span>], <span class="string">"loxbzapnmstkhijfcuqdewyvrg"</span>))</span><br><span class="line">print(s.isAlienSorted([<span class="string">"fxasxpc"</span>,<span class="string">"dfbdrifhp"</span>,<span class="string">"nwzgs"</span>,<span class="string">"cmwqriv"</span>,<span class="string">"ebulyfyve"</span>,<span class="string">"miracx"</span>,<span class="string">"sxckdwzv"</span>,<span class="string">"dtijzluhts"</span>,<span class="string">"wwbmnge"</span>,<span class="string">"qmjwymmyox"</span>]</span><br><span class="line">, <span class="string">"zkgwaverfimqxbnctdplsjyohu"</span>))</span><br><span class="line">print(s.isAlienSorted([<span class="string">"kuvp"</span>,<span class="string">"q"</span>], <span class="string">"ngxlkthsjuoqcpavbfdermiywz"</span>))</span><br></pre></td></tr></table></figure>
<h3 id="移动零-数组"><a href="https://leetcode-cn.com/problems/move-zeroes/" target="_blank" rel="noopener">283. 移动零</a> [数组]</h3>
<p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<p><strong>示例:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">12</span>]</span><br><span class="line">输出: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p><strong>说明</strong>:</p>
<ol type="1">
<li>必须在原数组上操作，不能拷贝额外的数组。</li>
<li>尽量减少操作次数。</li>
</ol>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveZeroes</span><span class="params">(self, nums)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> nums[::]:</span><br><span class="line">            <span class="keyword">if</span> e == <span class="number">0</span>:</span><br><span class="line">                nums.remove(e)</span><br><span class="line">                nums.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> nums           </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.moveZeroes([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">12</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="bigram-分词-字符串"><a href="https://leetcode-cn.com/problems/occurrences-after-bigram/" target="_blank" rel="noopener">1078. Bigram 分词</a> [字符串]</h3>
<p>给出第一个词 <code>first</code> 和第二个词 <code>second</code>，考虑在某些文本 <code>text</code> 中可能以 &quot;<code>first second third</code>&quot; 形式出现的情况，其中 <code>second</code> 紧随 <code>first</code> 出现，<code>third</code> 紧随 <code>second</code> 出现。</p>
<p>对于每种这样的情况，将第三个词 &quot;<code>third</code>&quot; 添加到答案中，并返回答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">输入：<span class="built_in">text</span> = <span class="string">"alice is a good girl she is a good student"</span>, <span class="keyword">first</span> = <span class="string">"a"</span>, <span class="keyword">second</span> = <span class="string">"good"</span></span><br><span class="line">输出：[<span class="string">"girl"</span>,<span class="string">"student"</span>]</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight smalltalk"><table><tr><td class="code"><pre><span class="line">输入：text = <span class="comment">"we will we will rock you"</span>, first = <span class="comment">"we"</span>, second = <span class="comment">"will"</span></span><br><span class="line">输出：[<span class="comment">"we"</span>,<span class="comment">"rock"</span>]</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ol type="1">
<li><code>1 &lt;= text.length &lt;= 1000</code></li>
<li><code>text</code> 由一些用空格分隔的单词组成，每个单词都由小写英文字母组成</li>
<li><code>1 &lt;= first.length, second.length &lt;= 10</code></li>
<li><code>first</code> 和 <code>second</code> 由小写英文字母组成</li>
</ol>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findOcurrences</span><span class="params">(self, text: str, first: str, second: str)</span>:</span> <span class="comment">#-&gt; List[str]:</span></span><br><span class="line">        words = text.split(<span class="string">' '</span>)</span><br><span class="line">        res = []</span><br><span class="line">        </span><br><span class="line">        wlen = len(words)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, wlen - <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">if</span> words[i] == first <span class="keyword">and</span> words[i + <span class="number">1</span>] == second:</span><br><span class="line">                res.append(words[i + <span class="number">2</span>])           </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.findOcurrences(text = <span class="string">"alice is a good girl she is a good student"</span>, first = <span class="string">"a"</span>, second = <span class="string">"good"</span>))</span><br><span class="line">print(s.findOcurrences(text = <span class="string">"we will we will rock you"</span>, first = <span class="string">"we"</span>, second = <span class="string">"will"</span>))</span><br></pre></td></tr></table></figure>
<h3 id="方阵中战斗力最弱的-k-行-数组"><a href="https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/" target="_blank" rel="noopener">1337. 方阵中战斗力最弱的 K 行</a> [数组]</h3>
<p>给你一个大小为 <code>m * n</code> 的方阵 <code>mat</code>，方阵由若干军人和平民组成，分别用 1 和 0 表示。</p>
<p>请你返回方阵中战斗力最弱的 <code>k</code> 行的索引，按从最弱到最强排序。</p>
<p>如果第 <strong><em>i</em></strong> 行的军人数量少于第 <strong><em>j</em></strong> 行，或者两行军人数量相同但 <strong><em>i</em></strong> 小于 <strong><em>j</em></strong>，那么我们认为第 <strong><em>i</em></strong> 行的战斗力比第 <strong><em>j</em></strong> 行弱。</p>
<p>军人 <strong>总是</strong> 排在一行中的靠前位置，也就是说 1 总是出现在 0 之前。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：mat = </span><br><span class="line">[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],        # <span class="number">0</span></span><br><span class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],          </span><br><span class="line"> [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],        # <span class="number">2</span></span><br><span class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],        # <span class="number">3</span></span><br><span class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]], </span><br><span class="line">k = <span class="number">3</span></span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：mat = </span><br><span class="line">[[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]], </span><br><span class="line">k = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kWeakestRows</span><span class="params">(self, mat, k: int)</span>:</span> <span class="comment"># -&gt; List[int]:</span></span><br><span class="line">        res = []</span><br><span class="line">        mlen = len(mat)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(mlen):</span><br><span class="line">            res.append((mat[i].count(<span class="number">1</span>), i))</span><br><span class="line">            </span><br><span class="line">        res.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>])   </span><br><span class="line">        res = [e[<span class="number">1</span>] <span class="keyword">for</span> e <span class="keyword">in</span> res[:k]]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.kWeakestRows(mat = [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                            [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]], k = <span class="number">3</span>))</span><br><span class="line">        </span><br><span class="line">print(s.kWeakestRows(mat = [[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                            [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                            [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]], k = <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<h3 id="独特的电子邮件地址-字符串"><a href="https://leetcode-cn.com/problems/unique-email-addresses/" target="_blank" rel="noopener">929. 独特的电子邮件地址</a> [字符串]</h3>
<p>每封电子邮件都由一个本地名称和一个域名组成，以 @ 符号分隔。</p>
<p>例如，在 <code>alice@leetcode.com</code>中， <code>alice</code> 是本地名称，而 <code>leetcode.com</code> 是域名。</p>
<p>除了小写字母，这些电子邮件还可能包含 <code>'.'</code> 或 <code>'+'</code>。</p>
<p>如果在电子邮件地址的<strong>本地名称</strong>部分中的某些字符之间添加句点（<code>'.'</code>），则发往那里的邮件将会转发到本地名称中没有点的同一地址。例如，<code>&quot;alice.z@leetcode.com”</code> 和 <code>“alicez@leetcode.com”</code> 会转发到同一电子邮件地址。 （请注意，此规则不适用于域名。）</p>
<p>如果在<strong>本地名称</strong>中添加加号（<code>'+'</code>），则会忽略第一个加号后面的所有内容。这允许过滤某些电子邮件，例如 <code>m.y+name@email.com</code> 将转发到 <code>my@email.com</code>。 （同样，此规则不适用于域名。）</p>
<p>可以同时使用这两个规则。</p>
<p>给定电子邮件列表 <code>emails</code>，我们会向列表中的每个地址发送一封电子邮件。实际收到邮件的不同地址有多少？</p>
<p><strong>示例：</strong></p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">输入：[<span class="string">"test.email+alex@leetcode.com"</span>,<span class="string">"test.e.mail+bob.cathy@leetcode.com"</span>,<span class="string">"testemail+david@lee.tcode.com"</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：实际收到邮件的是 <span class="string">"testemail@leetcode.com"</span> 和 <span class="string">"testemail@lee.tcode.com"</span>。</span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"><span class="number">1</span> &lt;= emails[i].length &lt;= <span class="number">100</span></span><br><span class="line"><span class="number">1</span> &lt;= emails.length &lt;= <span class="number">100</span></span><br><span class="line">每封 emails[i] 都包含有且仅有一个 <span class="string">'@'</span> 字符。</span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numUniqueEmails</span><span class="params">(self, emails)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">import</span> re</span><br><span class="line">        eset = set()   </span><br><span class="line">        <span class="keyword">for</span> email <span class="keyword">in</span> emails:</span><br><span class="line">            s = email.split(<span class="string">'@'</span>)        </span><br><span class="line">            s = s[<span class="number">0</span>].replace(<span class="string">'.'</span>, <span class="string">''</span>) + <span class="string">'@'</span> + s[<span class="number">1</span>] </span><br><span class="line">            s = re.sub(<span class="string">'\+.*@'</span>, <span class="string">'@'</span>, s)</span><br><span class="line">            eset.add(s)            </span><br><span class="line">        print(eset)</span><br><span class="line">        <span class="keyword">return</span> len(eset)</span><br><span class="line">   </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.numUniqueEmails([<span class="string">"test.email+alex@leetcode.com"</span>,</span><br><span class="line">                         <span class="string">"test.e.mail+bob.cathy@leetcode.com"</span>,</span><br><span class="line">                         <span class="string">"testemail+david@lee.tcode.com"</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="三维形体投影面积-数学"><a href="https://leetcode-cn.com/problems/projection-area-of-3d-shapes/" target="_blank" rel="noopener">883. 三维形体投影面积</a> [数学]</h3>
<p>在 <code>N * N</code> 的网格中，我们放置了一些与 x，y，z 三轴对齐的 <code>1 * 1 * 1</code> 立方体。</p>
<p>每个值 <code>v = grid[i][j]</code> 表示 <code>v</code> 个正方体叠放在单元格 <code>(i, j)</code> 上。</p>
<p>现在，我们查看这些立方体在 xy、yz 和 zx 平面上的<em>投影</em>。</p>
<p>投影就像影子，将三维形体映射到一个二维平面上。</p>
<p>在这里，从顶部、前面和侧面看立方体时，我们会看到“影子”。</p>
<p>返回所有三个投影的总面积。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">输入：<span class="string">[[2]]</span></span><br><span class="line">输出：<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">输出：<span class="number">17</span></span><br><span class="line">解释：</span><br><span class="line">这里有该形体在三个轴对齐平面上的三个投影(“阴影部分”)。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="number">8</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 4：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">14</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 5：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="number">21</span></span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= grid.length = grid[0].length &lt;= 50</code></li>
<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">projectionArea</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        x_area = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> grid:</span><br><span class="line">            x = [e <span class="keyword">for</span> e <span class="keyword">in</span> x <span class="keyword">if</span> e &gt; <span class="number">0</span>]</span><br><span class="line">            x_area += len(x)</span><br><span class="line">        </span><br><span class="line">        y_area = <span class="number">0</span></span><br><span class="line">        elems = list(zip(*grid))</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> elems:</span><br><span class="line">            y_area += max(e)</span><br><span class="line">            </span><br><span class="line">        z_area = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> grid:</span><br><span class="line">            z_area += max(e)</span><br><span class="line">        </span><br><span class="line">        areas = x_area + y_area + z_area</span><br><span class="line">        <span class="keyword">return</span> areas</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.projectionArea([[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]))</span><br><span class="line">print(s.projectionArea([[<span class="number">1</span>,<span class="number">0</span>], [<span class="number">0</span>,<span class="number">2</span>]]))</span><br></pre></td></tr></table></figure>
<h3 id="分糖果-哈希表"><a href="https://leetcode-cn.com/problems/distribute-candies/" target="_blank" rel="noopener">575. 分糖果</a> [哈希表]</h3>
<p>难度简单62</p>
<p>给定一个<strong>偶数</strong>长度的数组，其中不同的数字代表着不同种类的糖果，每一个数字代表一个糖果。你需要把这些糖果<strong>平均</strong>分给一个弟弟和一个妹妹。返回妹妹可以获得的最大糖果的种类数。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: candies = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解析: 一共有三种种类的糖果，每一种都有两个。</span><br><span class="line">     最优分配方案：妹妹获得[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],弟弟也获得[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]。这样使妹妹获得糖果的种类数最多。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2 :</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: candies = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">解析: 妹妹获得糖果[<span class="number">2</span>,<span class="number">3</span>],弟弟获得糖果[<span class="number">1</span>,<span class="number">1</span>]，妹妹有两种不同的糖果，弟弟只有一种。这样使得妹妹可以获得的糖果种类数最多。</span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">distributeCandies</span><span class="params">(self, candies)</span> -&gt; int:</span></span><br><span class="line">        clen = len(candies) </span><br><span class="line">        ave = clen // <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">        cset = set()</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> candies:</span><br><span class="line">            cset.add(e)</span><br><span class="line">            <span class="keyword">if</span> len(cset) == ave:</span><br><span class="line">                <span class="keyword">break</span>     </span><br><span class="line"><span class="comment">#        print(cset)</span></span><br><span class="line">        <span class="keyword">return</span> len(cset)</span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.distributeCandies(candies = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]))</span><br><span class="line">print(s.distributeCandies(candies = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="杨辉三角-数组"><a href="https://leetcode-cn.com/problems/pascals-triangle/" target="_blank" rel="noopener">118. 杨辉三角</a> [数组]</h3>
<p>给定一个非负整数 <em>numRows，</em>生成杨辉三角的前 <em>numRows</em> 行。</p>
<figure>
<img src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" alt="img"><figcaption>img</figcaption>
</figure>
<p>在杨辉三角中，每个数是它左上方和右上方的数的和。</p>
<p><strong>示例:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: <span class="number">5</span></span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">     [<span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">   [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],</span><br><span class="line">  [<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">1</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self, numRows: int)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> numRows == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">if</span> numRows == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> [[<span class="number">1</span>]]</span><br><span class="line">        <span class="keyword">if</span> numRows == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> [[<span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line">        </span><br><span class="line">        res = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(numRows)]</span><br><span class="line">        res[<span class="number">0</span>].append(<span class="number">1</span>)</span><br><span class="line">        res[<span class="number">1</span>] = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">        cnt = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, numRows):</span><br><span class="line">            res[i].append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(cnt):</span><br><span class="line">                res[i].append(res[i<span class="number">-1</span>][j] + res[i<span class="number">-1</span>][j+<span class="number">1</span>])</span><br><span class="line">            res[i].append(<span class="number">1</span>)</span><br><span class="line">            cnt = cnt + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        print(res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">             </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.generate(<span class="number">2</span>))</span><br><span class="line">print(s.generate(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<h3 id="斐波那契数-数组"><a href="https://leetcode-cn.com/problems/fibonacci-number/" target="_blank" rel="noopener">509. 斐波那契数</a> [数组]</h3>
<p><strong>斐波那契数</strong>，通常用 <code>F(n)</code> 表示，形成的序列称为<strong>斐波那契数列</strong>。该数列由 <code>0</code> 和 <code>1</code> 开始，后面的每一项数字都是前面两项数字的和。也就是：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">F(<span class="number">0</span>) = <span class="number">0</span>,   F(<span class="number">1</span>) = <span class="number">1</span></span><br><span class="line">F(N) = F(N - <span class="number">1</span>) + F(N - <span class="number">2</span>), 其中 N &gt; <span class="number">1.</span></span><br></pre></td></tr></table></figure>
<p>给定 <code>N</code>，计算 <code>F(N)</code>。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：<span class="number">2</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：F(<span class="number">2</span>) = F(<span class="number">1</span>) + F(<span class="number">0</span>) = <span class="number">1</span> + <span class="number">0</span> = <span class="number">1.</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：<span class="number">3</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：F(<span class="number">3</span>) = F(<span class="number">2</span>) + F(<span class="number">1</span>) = <span class="number">1</span> + <span class="number">1</span> = <span class="number">2.</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：<span class="number">4</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：F(<span class="number">4</span>) = F(<span class="number">3</span>) + F(<span class="number">2</span>) = <span class="number">2</span> + <span class="number">1</span> = <span class="number">3.</span></span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(self, N: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> N == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> N == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N<span class="number">-1</span>):</span><br><span class="line">            c = a + b</span><br><span class="line">            a = b</span><br><span class="line">            b = c</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.fib(<span class="number">2</span>))</span><br><span class="line">print(s.fib(<span class="number">3</span>))</span><br><span class="line">print(s.fib(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<h3 id="最长特殊序列-字符串"><a href="https://leetcode-cn.com/problems/longest-uncommon-subsequence-i/" target="_blank" rel="noopener">521. 最长特殊序列 Ⅰ</a> [字符串]</h3>
<p>给定两个字符串，你需要从这两个字符串中找出最长的特殊序列。最长特殊序列定义如下：该序列为某字符串独有的最长子序列（即不能是其他字符串的子序列）。</p>
<p><strong>子序列</strong>可以通过删去字符串中的某些字符实现，但不能改变剩余字符的相对顺序。空序列为所有字符串的子序列，任何字符串为其自身的子序列。</p>
<p>输入为两个字符串，输出最长特殊序列的长度。如果不存在，则返回 -1。</p>
<p><strong>示例 :</strong></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">输入: <span class="string">"aba"</span>, <span class="string">"cdc"</span></span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解析: 最长特殊序列可为 <span class="string">"aba"</span> (或 <span class="string">"cdc"</span>)</span><br></pre></td></tr></table></figure>
<p><strong>说明:</strong> 两个字符串长度均小于100。字符串中的字符仅含有 'a'~'z'。</p>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 思路：A,B如果完全一样，输出就是 -1，如果不一样，那直接输出A,B中较长的字符串即可</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLUSlength</span><span class="params">(self, a: str, b: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> max(len(a), len(b)) <span class="keyword">if</span> a != b <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.findLUSlength(<span class="string">'aba'</span>, <span class="string">'cdc'</span>))</span><br></pre></td></tr></table></figure>
<h3 id="字符的最短距离-字符串"><a href="https://leetcode-cn.com/problems/shortest-distance-to-a-character/" target="_blank" rel="noopener">821. 字符的最短距离</a> [字符串]</h3>
<p>给定一个字符串 <code>S</code> 和一个字符 <code>C</code>。返回一个代表字符串 <code>S</code> 中每个字符到字符串 <code>S</code> 中的字符 <code>C</code> 的最短距离的数组。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: S = <span class="string">"loveleetcode"</span>, C = <span class="string">'e'</span></span><br><span class="line">输出: [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p><strong>说明:</strong> 1. 字符串 <code>S</code> 的长度范围为 <code>[1, 10000]</code>。<code>C</code> 是一个单字符，且保证是字符串 <code>S</code> 里的字符。<code>S</code> 和 <code>C</code> 中的所有字母均为小写字母。</p>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shortestToChar</span><span class="params">(self, S: str, C: str)</span>:</span></span><br><span class="line">        index = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(len(S)) <span class="keyword">if</span> S[i] <span class="keyword">is</span> C]</span><br><span class="line">        </span><br><span class="line">        res = []</span><br><span class="line">        slen = len(S)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(slen):</span><br><span class="line">            rmin = <span class="number">100000</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> index:</span><br><span class="line">                dis = abs(i - j)</span><br><span class="line">                <span class="keyword">if</span> rmin &gt; dis:</span><br><span class="line">                    rmin = dis</span><br><span class="line">            res.append(rmin)                    </span><br><span class="line">        </span><br><span class="line">        print(res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">   </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.shortestToChar(S = <span class="string">"loveleetcode"</span>, C = <span class="string">'e'</span>))</span><br></pre></td></tr></table></figure>
<h3 id="查找常用字符-数组-哈希表"><a href="https://leetcode-cn.com/problems/find-common-characters/" target="_blank" rel="noopener">1002. 查找常用字符</a> [数组 哈希表]</h3>
<p>给定仅有小写字母组成的字符串数组 <code>A</code>，返回列表中的每个字符串中都显示的全部字符（<strong>包括重复字符</strong>）组成的列表。例如，如果一个字符在每个字符串中出现 3 次，但不是 4 次，则需要在最终答案中包含该字符 3 次。</p>
<p>你可以按任意顺序返回答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">输入：<span class="selector-attr">[<span class="string">"bella"</span>,<span class="string">"label"</span>,<span class="string">"roller"</span>]</span></span><br><span class="line">输出：<span class="selector-attr">[<span class="string">"e"</span>,<span class="string">"l"</span>,<span class="string">"l"</span>]</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">输入：<span class="selector-attr">[<span class="string">"cool"</span>,<span class="string">"lock"</span>,<span class="string">"cook"</span>]</span></span><br><span class="line">输出：<span class="selector-attr">[<span class="string">"c"</span>,<span class="string">"o"</span>]</span></span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">commonChars</span><span class="params">(self, A)</span>:</span></span><br><span class="line">        res = list()       </span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> set(A[<span class="number">0</span>]):                 <span class="comment"># 遍历每个字符</span></span><br><span class="line">            cnt = [x.count(w) <span class="keyword">for</span> x <span class="keyword">in</span> A]   <span class="comment"># 每个单词的 字符w 数量</span></span><br><span class="line">            a = w * min(cnt)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> a:                     <span class="comment"># 防止不是全部都出现的，且分开添加</span></span><br><span class="line">                res.append(i)           </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">s = Solution() </span><br><span class="line">print(s.commonChars([<span class="string">"bella"</span>,<span class="string">"label"</span>,<span class="string">"roller"</span>]))</span><br><span class="line">print(s.commonChars([<span class="string">"cool"</span>,<span class="string">"lock"</span>,<span class="string">"cook"</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="子域名访问计数-哈希表-字符串"><a href="https://leetcode-cn.com/problems/subdomain-visit-count/" target="_blank" rel="noopener">811. 子域名访问计数</a> [哈希表 字符串]</h3>
<p>一个网站域名，如&quot;discuss.leetcode.com&quot;，包含了多个子域名。作为顶级域名，常用的有&quot;com&quot;，下一级则有&quot;leetcode.com&quot;，最低的一级为&quot;discuss.leetcode.com&quot;。当我们访问域名&quot;discuss.leetcode.com&quot;时，也同时访问了其父域名&quot;leetcode.com&quot;以及顶级域名 &quot;com&quot;。</p>
<p>给定一个带访问次数和域名的组合，要求分别计算每个域名被访问的次数。其格式为访问次数+空格+地址，例如：&quot;9001 discuss.leetcode.com&quot;。</p>
<p>接下来会给出一组访问次数和域名组合的列表<code>cpdomains</code> 。要求解析出所有域名的访问次数，输出格式和输入格式相同，不限定先后顺序。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line">输入: </span><br><span class="line">[<span class="meta"><span class="meta-string">"9001 discuss.leetcode.com"</span></span>]</span><br><span class="line">输出: </span><br><span class="line">[<span class="meta"><span class="meta-string">"9001 discuss.leetcode.com"</span>, <span class="meta-string">"9001 leetcode.com"</span>, <span class="meta-string">"9001 com"</span></span>]</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span></span><br><span class="line">输入: </span><br><span class="line">[<span class="meta"><span class="meta-string">"900 google.mail.com"</span>, <span class="meta-string">"50 yahoo.com"</span>, <span class="meta-string">"1 intel.mail.com"</span>, <span class="meta-string">"5 wiki.org"</span></span>]</span><br><span class="line">输出: </span><br><span class="line">[<span class="meta"><span class="meta-string">"901 mail.com"</span>,<span class="meta-string">"50 yahoo.com"</span>,<span class="meta-string">"900 google.mail.com"</span>,<span class="meta-string">"5 wiki.org"</span>,<span class="meta-string">"5 org"</span>,<span class="meta-string">"1 intel.mail.com"</span>,<span class="meta-string">"951 com"</span></span>]</span><br></pre></td></tr></table></figure>
<p><strong>注意事项：</strong></p>
<ul>
<li><code>cpdomains</code> 的长度小于 <code>100</code>。每个域名的长度小于<code>100</code>。个域名地址包含一个或两个&quot;.&quot;符号。</li>
<li>输入中任意一个域名的访问次数都小于<code>10000</code>。</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subdomainVisits</span><span class="params">(self, cpdomains)</span>:</span> </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cpdomains:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">        res = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> case <span class="keyword">in</span> cpdomains:</span><br><span class="line">            time, domain = case.split()</span><br><span class="line">            length = len(domain.split(<span class="string">'.'</span>))</span><br><span class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> range(length):</span><br><span class="line">                dm = domain.split(<span class="string">'.'</span>, num)[<span class="number">-1</span>]</span><br><span class="line">                res[dm] = res.get(dm, <span class="number">0</span>) + int(time)</span><br><span class="line">        <span class="keyword">return</span> [str(v) + <span class="string">' '</span> + k <span class="keyword">for</span> k, v <span class="keyword">in</span> res.items()]</span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.subdomainVisits([<span class="string">"9001 discuss.leetcode.com"</span>]))</span><br><span class="line">print(s.subdomainVisits([<span class="string">"900 google.mail.com"</span>, </span><br><span class="line">                         <span class="string">"50 yahoo.com"</span>, </span><br><span class="line">                         <span class="string">"1 intel.mail.com"</span>, </span><br><span class="line">                         <span class="string">"5 wiki.org"</span>]))</span><br><span class="line"><span class="comment"># ["901 mail.com", "50 yahoo.com", "900 google.mail.com",</span></span><br><span class="line"><span class="comment">#  "5 wiki.org","5 org", "1 intel.mail.com", "951 com"]</span></span><br><span class="line"><span class="comment"># 说明: 按照假设，会访问"google.mail.com" 900次，"yahoo.com" 50次，</span></span><br><span class="line"><span class="comment"># "intel.mail.com" 1次，"wiki.org" 5次。</span></span><br><span class="line"><span class="comment"># 而对于父域名，会访问"mail.com" 900+1 = 901次，"com" 900 + 50 + 1 = 951次，和 "org" 5 次。</span></span><br></pre></td></tr></table></figure>
<h3 id="最大连续1的个数-数组"><a href="https://leetcode-cn.com/problems/max-consecutive-ones/" target="_blank" rel="noopener">485. 最大连续1的个数</a> [数组]</h3>
<p>给定一个二进制数组， 计算其中最大连续1的个数。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: 开头的两位和最后的三位都是连续<span class="number">1</span>，所以最大连续<span class="number">1</span>的个数是 <span class="number">3.</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ul>
<li>输入的数组只包含 <code>0</code> 和<code>1</code>。</li>
<li>输入数组的长度是正整数，且不超过 10,000。</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(self, nums)</span> -&gt; int:</span></span><br><span class="line">        mcnt = <span class="number">0</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> mcnt &lt; cnt:</span><br><span class="line">                mcnt = cnt</span><br><span class="line">            <span class="keyword">if</span> e == <span class="number">1</span>:</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> e == <span class="number">0</span>:</span><br><span class="line">                cnt = <span class="number">0</span></span><br><span class="line">        mcnt = cnt <span class="keyword">if</span> cnt &gt; mcnt <span class="keyword">else</span> mcnt</span><br><span class="line">        <span class="keyword">return</span> mcnt</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.findMaxConsecutiveOnes([<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="最短完整词-哈希表-字符串"><a href="https://leetcode-cn.com/problems/shortest-completing-word/" target="_blank" rel="noopener">748. 最短完整词</a> [哈希表 字符串]</h3>
<p>如果单词列表（<code>words</code>）中的一个单词包含牌照（<code>licensePlate</code>）中所有的字母，那么我们称之为完整词。在所有完整词中，最短的单词我们称之为最短完整词。</p>
<p>单词在匹配牌照中的字母时不区分大小写，比如牌照中的 <code>&quot;P&quot;</code> 依然可以匹配单词中的 <code>&quot;p&quot;</code> 字母。</p>
<p>我们保证一定存在一个最短完整词。当有多个单词都符合最短完整词的匹配条件时取单词列表中最靠前的一个。</p>
<p>牌照中可能包含多个相同的字符，比如说：对于牌照 <code>&quot;PP&quot;</code>，单词 <code>&quot;pair&quot;</code> 无法匹配，但是 <code>&quot;supper&quot;</code> 可以匹配。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">licensePlate</span> = <span class="string">"1s3 PSt"</span>, <span class="attr">words</span> = [<span class="string">"step"</span>, <span class="string">"steps"</span>, <span class="string">"stripe"</span>, <span class="string">"stepple"</span>]</span><br><span class="line">输出：<span class="string">"steps"</span></span><br><span class="line">说明：最短完整词应该包括 <span class="string">"s"</span>、<span class="string">"p"</span>、<span class="string">"s"</span> 以及 <span class="string">"t"</span>。对于 <span class="string">"step"</span> 它只包含一个 <span class="string">"s"</span> 所以它不符合条件。同时在匹配过程中我们忽略牌照中的大小写。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">licensePlate</span> = <span class="string">"1s3 456"</span>, <span class="attr">words</span> = [<span class="string">"looks"</span>, <span class="string">"pest"</span>, <span class="string">"stew"</span>, <span class="string">"show"</span>]</span><br><span class="line">输出：<span class="string">"pest"</span></span><br><span class="line">说明：存在 <span class="number">3</span> 个包含字母 <span class="string">"s"</span> 且有着最短长度的完整词，但我们返回最先出现的完整词。</span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong> 牌照<code>（licensePlate）</code>的长度在区域<code>[1, 7]</code>中。牌照<code>（licensePlate）</code>将会包含数字、空格、或者字母（大写和小写）。单词列表<code>（words）</code>长度在区间 <code>[10, 1000]</code> 中。每一个单词 <code>words[i]</code> 都是小写，并且长度在区间 <code>[1, 15]</code> 中。</p>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shortestCompletingWord</span><span class="params">(self, licensePlate: str, words)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">import</span> re</span><br><span class="line">        awords = <span class="string">''</span>.join(re.findall(<span class="string">'[a-zA-Z]+'</span>, licensePlate.lower()))</span><br><span class="line">        <span class="comment"># 按 长度,索引 排序</span></span><br><span class="line">        words = sorted(words, key=<span class="keyword">lambda</span> x:(len(x), words.index(x)))</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">for</span> e <span class="keyword">in</span> awords:</span><br><span class="line"><span class="comment">#                print(awords, word, e, awords.count(e), word.count(e))</span></span><br><span class="line">				<span class="comment"># 如果 word中没有e, awords中e数量 &gt; word中e数量</span></span><br><span class="line">                <span class="keyword">if</span> e <span class="keyword">not</span> <span class="keyword">in</span> word <span class="keyword">or</span> awords.count(e) &gt; word.count(e):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> word </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.shortestCompletingWord(licensePlate = <span class="string">"1s3 PSt"</span>, words = [<span class="string">"step"</span>, <span class="string">"steps"</span>, <span class="string">"stripe"</span>, <span class="string">"stepple"</span>]))</span><br><span class="line">print(s.shortestCompletingWord(licensePlate = <span class="string">"1s3 456"</span>, words = [<span class="string">"looks"</span>, <span class="string">"pest"</span>, <span class="string">"stew"</span>, <span class="string">"show"</span>]))</span><br><span class="line">print(s.shortestCompletingWord(<span class="string">"GrC8950"</span>, </span><br><span class="line">[<span class="string">"measure"</span>,<span class="string">"other"</span>,<span class="string">"every"</span>,<span class="string">"base"</span>,<span class="string">"according"</span>,<span class="string">"level"</span>,<span class="string">"meeting"</span>,<span class="string">"none"</span>,<span class="string">"marriage"</span>,<span class="string">"rest"</span>]))</span><br><span class="line">print(s.shortestCompletingWord(<span class="string">"1s3 456"</span>, [<span class="string">"looks"</span>,<span class="string">"pest"</span>,<span class="string">"stew"</span>,<span class="string">"show"</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="excel表列序号-数组"><a href="https://leetcode-cn.com/problems/excel-sheet-column-number/" target="_blank" rel="noopener">171. Excel表列序号</a> [数组]</h3>
<p>给定一个Excel表格中的列名称，返回其相应的列序号。</p>
<p>例如，</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">A -&gt; <span class="number">1</span></span><br><span class="line">B -&gt; <span class="number">2</span></span><br><span class="line">C -&gt; <span class="number">3</span></span><br><span class="line">...</span><br><span class="line">Z -&gt; <span class="number">26</span></span><br><span class="line">AA -&gt; <span class="number">27</span></span><br><span class="line">AB -&gt; <span class="number">28</span> </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong>示例 1:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: "A"</span></span><br><span class="line"><span class="section">输出: 1</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: "AB"</span></span><br><span class="line"><span class="section">输出: 28</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: "ZY"</span></span><br><span class="line"><span class="section">输出: 701</span></span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">titleToNumber</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">26</span>):</span><br><span class="line">            dic[chr(ord(<span class="string">'A'</span>)+i)] = i + <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        slen = len(s)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(slen):</span><br><span class="line">            res += dic[s[i]] * <span class="number">26</span>**len(s[i+<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">             </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.titleToNumber(<span class="string">'A'</span>))</span><br><span class="line">print(s.titleToNumber(<span class="string">'ZY'</span>))      </span><br><span class="line">print(s.titleToNumber(<span class="string">'AAA'</span>))</span><br></pre></td></tr></table></figure>
<h3 id="excel表列名称"><a href="https://leetcode-cn.com/problems/excel-sheet-column-title/" target="_blank" rel="noopener">168. Excel表列名称</a></h3>
<p>给定一个正整数，返回它在 Excel 表中相对应的列名称。</p>
<p>例如，</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> -&gt; A</span><br><span class="line"><span class="number">2</span> -&gt; B</span><br><span class="line"><span class="number">3</span> -&gt; C</span><br><span class="line">...</span><br><span class="line"><span class="number">26</span> -&gt; Z</span><br><span class="line"><span class="number">27</span> -&gt; AA</span><br><span class="line"><span class="number">28</span> -&gt; AB </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong>示例 1:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: 1</span></span><br><span class="line"><span class="section">输出: "A"</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: 28</span></span><br><span class="line"><span class="section">输出: "AB"</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: 701</span></span><br><span class="line"><span class="section">输出: "ZY"</span></span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertToTitle</span><span class="params">(self, n: int)</span> -&gt; str:</span></span><br><span class="line">       </span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">25</span>):</span><br><span class="line">            dic[i+<span class="number">1</span>] = chr(ord(<span class="string">'A'</span>)+i)</span><br><span class="line">        dic[<span class="number">0</span>] = <span class="string">'Z'</span></span><br><span class="line">            </span><br><span class="line">        res = <span class="string">''</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            res += dic[n % <span class="number">26</span>]</span><br><span class="line">            <span class="keyword">if</span> n % <span class="number">26</span> != <span class="number">0</span>:</span><br><span class="line">                n = n // <span class="number">26</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                n = (n - <span class="number">26</span>) // <span class="number">26</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res[::<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.convertToTitle(<span class="number">701</span>))</span><br><span class="line">print(s.convertToTitle(<span class="number">52</span>))</span><br></pre></td></tr></table></figure>
<h3 id="按奇偶排序数组-ii-数组"><a href="https://leetcode-cn.com/problems/sort-array-by-parity-ii/" target="_blank" rel="noopener">922. 按奇偶排序数组 II</a> [数组]</h3>
<p>给定一个非负整数数组 <code>A</code>， A 中一半整数是奇数，一半整数是偶数。</p>
<p>对数组进行排序，以便当 <code>A[i]</code> 为奇数时，<code>i</code> 也是奇数；当 <code>A[i]</code> 为偶数时， <code>i</code> 也是偶数。</p>
<p>你可以返回任何满足上述条件的数组作为答案。</p>
<p><strong>示例：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">输出：[<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>]</span><br><span class="line">解释：[<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>]，[<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>]，[<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">5</span>] 也会被接受。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong> <code>2 &lt;= A.length &lt;= 20000</code> ；<code>A.length % 2 == 0</code>； <code>0 &lt;= A[i] &lt;= 1000</code></p>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortArrayByParityII</span><span class="params">(self, A)</span>:</span></span><br><span class="line">        Alen = len(A)</span><br><span class="line">        res = [<span class="number">0</span>] * Alen</span><br><span class="line">        even, odd = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> A:</span><br><span class="line">            <span class="keyword">if</span> e % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                res[even] = e</span><br><span class="line">                even = even + <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res[odd] = e                </span><br><span class="line">                odd = odd + <span class="number">2</span></span><br><span class="line">        print(res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.sortArrayByParityII([<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="最小差值-i-数学"><a href="https://leetcode-cn.com/problems/smallest-range-i/" target="_blank" rel="noopener">908. 最小差值 I</a> [数学]</h3>
<p>给你一个整数数组 <code>A</code>，对于每个整数 <code>A[i]</code>，我们可以选择处于区间 <code>[-K, K]</code> 中的任意数 <code>x</code> ，将 <code>x</code> 与 <code>A[i]</code> 相加，结果存入 <code>A[i]</code> 。</p>
<p>在此过程之后，我们得到一些数组 <code>B</code>。</p>
<p>返回 <code>B</code> 的最大值和 <code>B</code> 的最小值之间可能存在的最小差值。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：A = [<span class="number">1</span>], K = <span class="number">0</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：B = [<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：A = [<span class="number">0</span>,<span class="number">10</span>], K = <span class="number">2</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：B = [<span class="number">2</span>,<span class="number">8</span>]</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：A = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>], K = <span class="number">3</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：B = [<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>] 或 B = [<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ol type="1">
<li><code>1 &lt;= A.length &lt;= 10000</code> <code>0 &lt;= A[i] &lt;= 10000</code> <code>0 &lt;= K &lt;= 10000</code></li>
</ol>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">smallestRangeI</span><span class="params">(self, A, K: int)</span> -&gt; int:</span></span><br><span class="line"><span class="comment">#       数组中最小值和最大值相差大于两倍的K时，最小差值为最大值和最小值之差减两倍的K；</span></span><br><span class="line"><span class="comment">#       当最小值和最大值相差小于或等于两倍的K时，最小差值为0。</span></span><br><span class="line">        <span class="keyword">return</span> max(max(A) - min(A) - <span class="number">2</span>*K, <span class="number">0</span>)</span><br><span class="line">   </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.smallestRangeI(A = [<span class="number">1</span>], K = <span class="number">0</span>))</span><br><span class="line">print(s.smallestRangeI(A = [<span class="number">0</span>,<span class="number">10</span>], K = <span class="number">2</span>))</span><br><span class="line">print(s.smallestRangeI(A = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>], K = <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<h3 id="数字的补数-数学"><a href="https://leetcode-cn.com/problems/number-complement/" target="_blank" rel="noopener">476. 数字的补数</a> [数学]</h3>
<p>给定一个正整数，输出它的补数。补数是对该数的二进制表示取反。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: <span class="number">5</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">解释: <span class="number">5</span> 的二进制表示为 <span class="number">101</span>（没有前导零位），其补数为 <span class="number">010</span>。所以你需要输出 <span class="number">2</span> 。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: <span class="number">1</span></span><br><span class="line">输出: <span class="number">0</span></span><br><span class="line">解释: <span class="number">1</span> 的二进制表示为 <span class="number">1</span>（没有前导零位），其补数为 <span class="number">0</span>。所以你需要输出 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong> 给定的整数保证在 32 位带符号整数的范围内。 你可以假定二进制数不包含前导零位。本题与 1009 <a href="https://leetcode-cn.com/problems/complement-of-base-10-integer/" target="_blank" rel="noopener" class="uri">https://leetcode-cn.com/problems/complement-of-base-10-integer/</a> 相同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findComplement</span><span class="params">(self, num: int)</span> -&gt; int:</span></span><br><span class="line">        nbin = bin(num)</span><br><span class="line">        </span><br><span class="line">        comp = <span class="string">'0b'</span></span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> nbin[<span class="number">2</span>:]:</span><br><span class="line">            <span class="keyword">if</span> e == <span class="string">'0'</span>:</span><br><span class="line">                comp += <span class="string">'1'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                comp += <span class="string">'0'</span></span><br><span class="line">        <span class="keyword">return</span> int(comp, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.findComplement(<span class="number">5</span>))</span><br><span class="line">print(s.findComplement(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<h3 id="按奇偶排序数组-数组"><a href="https://leetcode-cn.com/problems/sort-array-by-parity/" target="_blank" rel="noopener">905. 按奇偶排序数组</a> [数组]</h3>
<p>给定一个非负整数数组 <code>A</code>，返回一个数组，在该数组中， <code>A</code> 的所有偶数元素之后跟着所有奇数元素。</p>
<p>你可以返回满足此条件的任何数组作为答案。</p>
<p><strong>示例：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">输出 [<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]，[<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>] 和 [<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>] 也会被接受。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong> <code>1 &lt;= A.length &lt;= 5000</code> <code>0 &lt;= A[i] &lt;= 5000</code></p>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortArrayByParity</span><span class="params">(self, A)</span>:</span></span><br><span class="line">        i, j = <span class="number">0</span>, len(A)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> A[i] % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; j:</span><br><span class="line">                t = A[i]</span><br><span class="line">            <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> A[j] % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                j = j - <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; j:</span><br><span class="line">                A[i] = A[j]</span><br><span class="line">                A[j] = t</span><br><span class="line">        print(A)</span><br><span class="line">        <span class="keyword">return</span> A</span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.sortArrayByParity([<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="数组拆分-i-数组"><a href="https://leetcode-cn.com/problems/array-partition-i/" target="_blank" rel="noopener">561. 数组拆分 I</a> [数组]</h3>
<p>给定长度为 <strong>2n</strong> 的数组, 你的任务是将这些数分成 <strong>n</strong> 对, 例如 (a1, b1), (a2, b2), ..., (an, bn) ，使得从1 到 n 的 min(ai, bi) 总和最大。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">输出: <span class="number">4</span></span><br><span class="line">解释: n 等于 <span class="number">2</span>, 最大总和为 <span class="number">4</span> = min(<span class="number">1</span>, <span class="number">2</span>) + min(<span class="number">3</span>, <span class="number">4</span>).</span><br></pre></td></tr></table></figure>
<p><strong>提示:</strong></p>
<ol type="1">
<li><strong>n</strong> 是正整数,范围在 [1, 10000]. 2. 数组中的元素范围在 [-10000, 10000].</li>
</ol>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arrayPairSum</span><span class="params">(self, nums)</span> -&gt; int:</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        print(nums)        </span><br><span class="line">        rlen = len(nums)</span><br><span class="line">        nums = [min(nums[i], nums[i+<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, rlen<span class="number">-1</span>, <span class="number">2</span>)]</span><br><span class="line">        <span class="keyword">return</span> sum(nums)</span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.arrayPairSum([<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="面试题-01.01.-判定字符是否唯一-数组"><a href="https://leetcode-cn.com/problems/is-unique-lcci/" target="_blank" rel="noopener">面试题 01.01. 判定字符是否唯一</a> [数组]</h3>
<p>实现一个算法，确定一个字符串 <code>s</code> 的所有字符是否全都不同。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入: <span class="attr">s</span> = <span class="string">"leetcode"</span></span><br><span class="line">输出: <span class="literal">false</span> </span><br><span class="line"></span><br><span class="line">输入: <span class="attr">s</span> = <span class="string">"abc"</span></span><br><span class="line">输出: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>限制：</strong> <code>0 &lt;= len(s) &lt;= 100</code> 2. 如果你不使用额外的数据结构，会很加分。</p>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isUnique</span><span class="params">(self, astr: str)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> astr:</span><br><span class="line">            <span class="keyword">if</span> astr.count(e) &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.isUnique(<span class="string">'leetcode'</span>))</span><br><span class="line">print(s.isUnique(<span class="string">'abc'</span>))</span><br></pre></td></tr></table></figure>
<h3 id="机器人能否返回原点-字符串"><a href="https://leetcode-cn.com/problems/robot-return-to-origin/" target="_blank" rel="noopener">657. 机器人能否返回原点</a> [字符串]</h3>
<p>在二维平面上，有一个机器人从原点 (0, 0) 开始。给出它的移动顺序，判断这个机器人在完成移动后是否在 <strong>(0, 0) 处结束</strong>。</p>
<p>移动顺序由字符串表示。字符 move[i] 表示其第 i 次移动。机器人的有效动作有 <code>R</code>（右），<code>L</code>（左），<code>U</code>（上）和 <code>D</code>（下）。如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。</p>
<p><strong>注意：</strong>机器人“面朝”的方向无关紧要。 “R” 将始终使机器人向右移动一次，“L” 将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">输入:</span> <span class="string">"UD"</span></span><br><span class="line"><span class="string">输出:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">解释：机器人向上移动一次，然后向下移动一次。所有动作都具有相同的幅度，因此它最终回到它开始的原点。因此，我们返回</span> <span class="literal">true</span><span class="string">。</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">输入:</span> <span class="string">"LL"</span></span><br><span class="line"><span class="string">输出:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">解释：机器人向左移动两次。它最终位于原点的左侧，距原点有两次</span> <span class="string">“移动”</span> <span class="string">的距离。我们返回</span> <span class="literal">false</span><span class="string">，因为它在移动结束时没有返回原点。</span></span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">judgeCircle</span><span class="params">(self, moves: str)</span> -&gt; bool:</span></span><br><span class="line">		<span class="keyword">return</span> moves.count(<span class="string">'D'</span>)==moves.count(<span class="string">'U'</span>) <span class="keyword">and</span> moves.count(<span class="string">'R'</span>)==moves.count</span><br><span class="line">       </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.judgeCircle(<span class="string">'UD'</span>))</span><br><span class="line">print(s.judgeCircle(<span class="string">'LL'</span>))</span><br><span class="line">print(s.judgeCircle(<span class="string">'RRDD'</span>))</span><br></pre></td></tr></table></figure>
<h3 id="翻转图像-数组"><a href="https://leetcode-cn.com/problems/flipping-an-image/" target="_blank" rel="noopener">832. 翻转图像</a> [数组]</h3>
<p>给定一个二进制矩阵 <code>A</code>，我们想先水平翻转图像，然后反转图像并返回结果。</p>
<p>水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 <code>[1, 1, 0]</code> 的结果是 <code>[0, 1, 1]</code>。</p>
<p>反转图片的意思是图片中的 <code>0</code> 全部被 <code>1</code> 替换， <code>1</code> 全部被 <code>0</code> 替换。例如，反转 <code>[0, 1, 1]</code> 的结果是 <code>[1, 0, 0]</code>。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line">输出: [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line">解释: 首先翻转每一行: [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]]；</span><br><span class="line">     然后反转图片: [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]]</span><br></pre></td></tr></table></figure>
<p><strong>说明:</strong><code>1 &lt;= A.length = A[0].length &lt;= 20``0 &lt;= A[i][j] &lt;= 1</code></p>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flipAndInvertImage</span><span class="params">(self, A)</span>:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> A:</span><br><span class="line">            li.reverse()</span><br><span class="line">            rlen = len(li)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(rlen):</span><br><span class="line">                <span class="keyword">if</span> li[i] == <span class="number">0</span>:</span><br><span class="line">                    li[i] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    li[i] = <span class="number">0</span></span><br><span class="line">            res.append(li)      </span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">       </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.flipAndInvertImage([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]))</span><br><span class="line">print(s.flipAndInvertImage([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]]))</span><br></pre></td></tr></table></figure>
<h3 id="唯一摩尔斯密码词-字符串"><a href="https://leetcode-cn.com/problems/unique-morse-code-words/" target="_blank" rel="noopener">804. 唯一摩尔斯密码词</a> [字符串]</h3>
<p>国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如: <code>&quot;a&quot;</code> 对应 <code>&quot;.-&quot;</code>, <code>&quot;b&quot;</code> 对应 <code>&quot;-...&quot;</code>, <code>&quot;c&quot;</code> 对应 <code>&quot;-.-.&quot;</code>, 等等。</p>
<p>为了方便，所有26个英文字母对应摩尔斯密码表如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="string">".-"</span>,<span class="string">"-..."</span>,<span class="string">"-.-."</span>,<span class="string">"-.."</span>,<span class="string">"."</span>,<span class="string">"..-."</span>,<span class="string">"--."</span>,<span class="string">"...."</span>,<span class="string">".."</span>,<span class="string">".---"</span>,<span class="string">"-.-"</span>,<span class="string">".-.."</span>,<span class="string">"--"</span>,<span class="string">"-."</span>,<span class="string">"---"</span>,<span class="string">".--."</span>,<span class="string">"--.-"</span>,<span class="string">".-."</span>,<span class="string">"..."</span>,<span class="string">"-"</span>,<span class="string">"..-"</span>,<span class="string">"...-"</span>,<span class="string">".--"</span>,<span class="string">"-..-"</span>,<span class="string">"-.--"</span>,<span class="string">"--.."</span>]</span><br></pre></td></tr></table></figure>
<p>给定一个单词列表，每个单词可以写成每个字母对应摩尔斯密码的组合。例如，&quot;cab&quot; 可以写成 &quot;-.-..--...&quot;，(即 &quot;-.-.&quot; + &quot;-...&quot; + &quot;.-&quot;字符串的结合)。我们将这样一个连接过程称作单词翻译。</p>
<p>返回我们可以获得所有词不同单词翻译的数量。</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">例如:</span><br><span class="line">输入: words = [<span class="string">"gin"</span>, <span class="string">"zen"</span>, <span class="string">"gig"</span>, <span class="string">"msg"</span>]</span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">解释: </span><br><span class="line">各单词翻译如下:</span><br><span class="line"><span class="string">"gin"</span> -&gt; <span class="string">"--...-."</span></span><br><span class="line"><span class="string">"zen"</span> -&gt; <span class="string">"--...-."</span></span><br><span class="line"><span class="string">"gig"</span> -&gt; <span class="string">"--...--."</span></span><br><span class="line"><span class="string">"msg"</span> -&gt; <span class="string">"--...--."</span></span><br><span class="line"></span><br><span class="line">共有 <span class="number">2</span> 种不同翻译, <span class="string">"--...-."</span> 和 <span class="string">"--...--."</span>.</span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong> 单词列表<code>words</code> 的长度不会超过 <code>100</code>。每个单词 <code>words[i]</code>的长度范围为 <code>[1, 12]</code>。每个单词 <code>words[i]</code>只包含小写字母。</p>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uniqueMorseRepresentations</span><span class="params">(self, words)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">import</span> string</span><br><span class="line">        letters = string.ascii_lowercase</span><br><span class="line">        table = [<span class="string">".-"</span>,<span class="string">"-..."</span>,<span class="string">"-.-."</span>,<span class="string">"-.."</span>,<span class="string">"."</span>,<span class="string">"..-."</span>,<span class="string">"--."</span>,<span class="string">"...."</span>,<span class="string">".."</span>,<span class="string">".---"</span>,<span class="string">"-.-"</span>,<span class="string">".-.."</span>,<span class="string">"--"</span>,<span class="string">"-."</span>,<span class="string">"---"</span>,<span class="string">".--."</span>,<span class="string">"--.-"</span>,<span class="string">".-."</span>,<span class="string">"..."</span>,<span class="string">"-"</span>,<span class="string">"..-"</span>,<span class="string">"...-"</span>,<span class="string">".--"</span>,<span class="string">"-..-"</span>,<span class="string">"-.--"</span>,<span class="string">"--.."</span>]</span><br><span class="line">        wlen = len(words)</span><br><span class="line">        T = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(wlen):</span><br><span class="line">            str2 = <span class="string">''</span></span><br><span class="line">            wl = len(words[i])</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(wl):</span><br><span class="line">                k = letters.index(words[i][j])</span><br><span class="line">                str2 += table[k]</span><br><span class="line">            <span class="keyword">if</span> str2 <span class="keyword">not</span> <span class="keyword">in</span> T:</span><br><span class="line">                T.append(str2)        </span><br><span class="line">        print(T)</span><br><span class="line">        <span class="keyword">return</span> len(T)</span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.uniqueMorseRepresentations(words = [<span class="string">"gin"</span>, <span class="string">"zen"</span>, <span class="string">"gig"</span>, <span class="string">"msg"</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="汉明距离-数学"><a href="https://leetcode-cn.com/problems/hamming-distance/" target="_blank" rel="noopener">461. 汉明距离</a> [数学]</h3>
<p>两个整数之间的<a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB" target="_blank" rel="noopener">汉明距离</a>指的是这两个数字对应二进制位不同的位置的数目。</p>
<p>给出两个整数 <code>x</code> 和 <code>y</code>，计算它们之间的汉明距离。</p>
<p><strong>注意：</strong> 0 ≤ <code>x</code>, <code>y</code> &lt; 231.</p>
<p><strong>示例:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: x = <span class="number">1</span>, y = <span class="number">4</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">解释:</span><br><span class="line"><span class="number">1</span>   (<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span><br><span class="line"><span class="number">4</span>   (<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>)</span><br><span class="line">       ↑   ↑</span><br><span class="line">上面的箭头指出了对应二进制位不同的位置。</span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hammingDistance</span><span class="params">(self, x: int, y: int)</span> -&gt; int:</span></span><br><span class="line">        xbin = bin(x)[<span class="number">2</span>:]</span><br><span class="line">        ybin = bin(y)[<span class="number">2</span>:]       </span><br><span class="line">        print(xbin, ybin)</span><br><span class="line">        bmax = len(xbin) <span class="keyword">if</span> len(xbin) &gt; len(ybin) <span class="keyword">else</span> len(ybin)</span><br><span class="line">        </span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        xbin = (<span class="string">'&#123;0:0'</span>+str(<span class="number">1</span>+bmax)+<span class="string">'d&#125;'</span>).format(int(xbin))</span><br><span class="line">        ybin = (<span class="string">'&#123;0:0'</span>+str(<span class="number">1</span>+bmax)+<span class="string">'d&#125;'</span>).format(int(ybin))</span><br><span class="line">                </span><br><span class="line">        maxb = len(xbin)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(maxb):</span><br><span class="line">            <span class="keyword">if</span> xbin[i] != ybin[i]:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        print(res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    	<span class="comment"># return bin(x ^ y).count('1')</span></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.hammingDistance(x=<span class="number">1</span>, y=<span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<h3 id="奇数值单元格的数目-数组"><a href="https://leetcode-cn.com/problems/cells-with-odd-values-in-a-matrix/" target="_blank" rel="noopener">1252. 奇数值单元格的数目</a> [数组]</h3>
<p>给你一个 <code>n</code> 行 <code>m</code> 列的矩阵，最开始的时候，每个单元格中的值都是 <code>0</code>。</p>
<p>另有一个索引数组 <code>indices</code>，<code>indices[i] = [ri, ci]</code> 中的 <code>ri</code> 和 <code>ci</code> 分别表示指定的行和列（从 <code>0</code> 开始编号）。</p>
<p>你需要将每对 <code>[ri, ci]</code> 指定的行和列上的所有单元格的值加 <code>1</code>。</p>
<p>请你在执行完所有 <code>indices</code> 指定的增量操作后，返回矩阵中 「奇数值单元格」 的数目。</p>
<p><strong>示例 1：</strong></p>
<figure>
<img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/06/e1.png" alt="img"><figcaption>img</figcaption>
</figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">2</span>, m = <span class="number">3</span>, indices = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：最开始的矩阵是 [[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]。</span><br><span class="line">第一次增量操作后得到 [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]]。</span><br><span class="line">最后的矩阵是 [[<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>]]，里面有 <span class="number">6</span> 个奇数。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong><code>1 &lt;= n &lt;= 50</code> ;<code>1 &lt;= m &lt;= 50</code>; <code>1 &lt;= indices.length &lt;= 100</code> ;<code>0 &lt;= indices[i][0] &lt; n</code> ;<code>0 &lt;= indices[i][1] &lt; m</code></p>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">oddCells</span><span class="params">(self, n, m, indices)</span> -&gt; int:</span></span><br><span class="line">        ans = [[<span class="number">0</span>]*m <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]   </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> indices:</span><br><span class="line">            row = b[<span class="number">0</span>]</span><br><span class="line">            col = b[<span class="number">1</span>]</span><br><span class="line">            </span><br><span class="line">            cnt = len(ans[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(cnt):</span><br><span class="line">                ans[row][i] += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">            cnt = len(ans)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(cnt):</span><br><span class="line">                ans[i][col] += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        ans = [e <span class="keyword">for</span> ei <span class="keyword">in</span> ans <span class="keyword">for</span> e <span class="keyword">in</span> ei <span class="keyword">if</span> e % <span class="number">2</span> == <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> len(ans)</span><br><span class="line">        </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.oddCells(n = <span class="number">2</span>, m = <span class="number">3</span>, indices = [[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>]]))</span><br><span class="line">print(s.oddCells(n = <span class="number">2</span>, m = <span class="number">2</span>, indices = [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">0</span>]]))</span><br><span class="line">print(s.oddCells(<span class="number">2</span>, <span class="number">2</span>, [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">0</span>]]))</span><br></pre></td></tr></table></figure>
<h3 id="和-9-组成的最大数字-数学"><a href="https://leetcode-cn.com/problems/maximum-69-number/" target="_blank" rel="noopener">1323. 6 和 9 组成的最大数字</a> [数学]</h3>
<p>给你一个仅由数字 6 和 9 组成的正整数 <code>num</code>。你最多只能翻转一位数字，将 6 变成 9，或者把 9 变成 6 。</p>
<p>请返回你可以得到的最大数字。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：num = <span class="number">9669</span></span><br><span class="line">输出：<span class="number">9969</span></span><br><span class="line">解释：</span><br><span class="line">其中最大的数字是 <span class="number">9969</span> 。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong> <code>1 &lt;= num &lt;= 10^4</code> ； <code>num</code> 每一位上的数字都是 6 或者 9 。</p>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximum69Number</span> <span class="params">(self, num: int)</span> -&gt; int:</span></span><br><span class="line">        num = str(num)</span><br><span class="line">        <span class="keyword">return</span> num.replace(<span class="string">'6'</span>, <span class="string">'9'</span>, <span class="number">1</span>)</span><br><span class="line">     </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.maximum69Number(<span class="number">9669</span>))</span><br></pre></td></tr></table></figure>
<h3 id="面试题17.-打印从1到最大的n位数-数学"><a href="https://leetcode-cn.com/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/" target="_blank" rel="noopener">面试题17. 打印从1到最大的n位数</a> [数学]</h3>
<p>输入数字 <code>n</code>，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: n = <span class="number">1</span></span><br><span class="line">输出: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printNumbers</span><span class="params">(self, n: int)</span> :</span></span><br><span class="line">        res = list(range(<span class="number">1</span>, <span class="number">10</span>**n))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.printNumbers(<span class="number">1</span>))</span><br><span class="line">print(s.printNumbers(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<h3 id="宝石与石头-哈希表"><a href="https://leetcode-cn.com/problems/jewels-and-stones/" target="_blank" rel="noopener">771. 宝石与石头</a> [哈希表]</h3>
<p>给定字符串<code>J</code> 代表石头中宝石的类型，和字符串 <code>S</code>代表你拥有的石头。 <code>S</code> 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。</p>
<p><code>J</code> 中的字母不重复，<code>J</code> 和 <code>S</code>中的所有字符都是字母。字母区分大小写，因此<code>&quot;a&quot;</code>和<code>&quot;A&quot;</code>是不同类型的石头。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入: <span class="attr">J</span> = <span class="string">"aA"</span>, <span class="attr">S</span> = <span class="string">"aAAbbbb"</span></span><br><span class="line">输出: <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong> <code>S</code> 和 <code>J</code> 最多含有50个字母。 <code>J</code> 中的字符不重复。</p>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numJewelsInStones</span><span class="params">(self, J: str, S: str)</span> -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> S:</span><br><span class="line">            <span class="keyword">if</span> s <span class="keyword">in</span> J:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.numJewelsInStones(<span class="string">'aA'</span>, <span class="string">'aAAbbbb'</span>))</span><br><span class="line">print(s.numJewelsInStones(<span class="string">'z'</span>, <span class="string">'ZZ'</span>))</span><br></pre></td></tr></table></figure>
<h3 id="最后一块石头的重量-堆-贪心算法"><a href="https://leetcode-cn.com/problems/last-stone-weight/" target="_blank" rel="noopener">1046. 最后一块石头的重量</a> [堆 贪心算法]</h3>
<p>有一堆石头，每块石头的重量都是正整数。</p>
<p>每一回合，从中选出两块 <strong>最重的</strong> 石头，然后将它们一起粉碎。假设石头的重量分别为 <code>x</code> 和 <code>y</code>，且 <code>x &lt;= y</code>。那么粉碎的可能结果如下：</p>
<ul>
<li>如果 <code>x == y</code>，那么两块石头都会被完全粉碎；</li>
<li>如果 <code>x != y</code>，那么重量为 <code>x</code> 的石头将会完全粉碎，而重量为 <code>y</code> 的石头新重量为 <code>y-x</code>。</li>
</ul>
<p>最后，最多只会剩下一块石头。返回此石头的重量。如果没有石头剩下，就返回 <code>0</code>。</p>
<p><strong>示例：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：</span><br><span class="line">先选出 <span class="number">7</span> 和 <span class="number">8</span>，得到 <span class="number">1</span>，所以数组转换为 [<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]，</span><br><span class="line">再选出 <span class="number">2</span> 和 <span class="number">4</span>，得到 <span class="number">2</span>，所以数组转换为 [<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]，</span><br><span class="line">接着是 <span class="number">2</span> 和 <span class="number">1</span>，得到 <span class="number">1</span>，所以数组转换为 [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]，</span><br><span class="line">最后选出 <span class="number">1</span> 和 <span class="number">1</span>，得到 <span class="number">0</span>，最终数组转换为 [<span class="number">1</span>]，这就是最后剩下那块石头的重量。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong> <code>1 &lt;= stones.length &lt;= 30</code>；<code>1 &lt;= stones[i] &lt;= 1000</code></p>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lastStoneWeight</span><span class="params">(self, stones)</span> -&gt; int:</span></span><br><span class="line">        stones.sort(reverse=<span class="literal">True</span>)     </span><br><span class="line">       </span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> len(stones) &gt; <span class="number">1</span>:</span><br><span class="line">            x = stones[i+<span class="number">1</span>]</span><br><span class="line">            y = stones[i]</span><br><span class="line">            <span class="keyword">if</span> x == y:</span><br><span class="line">                stones.remove(x)</span><br><span class="line">                stones.remove(y)</span><br><span class="line">            <span class="keyword">if</span> x != y:</span><br><span class="line">                stones.remove(x)</span><br><span class="line">                stones.remove(y)</span><br><span class="line">                stones.append(y - x)</span><br><span class="line">            stones.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(stones) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> stones[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">          </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.lastStoneWeight([<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">1</span>]))</span><br><span class="line">print(s.lastStoneWeight([<span class="number">5</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">7</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="有序数组中出现次数超过25的元素-数组"><a href="https://leetcode-cn.com/problems/element-appearing-more-than-25-in-sorted-array/" target="_blank" rel="noopener">1287. 有序数组中出现次数超过25%的元素</a> [数组]</h3>
<p>给你一个非递减的 <strong>有序</strong> 整数数组，已知这个数组中恰好有一个整数，它的出现次数超过数组元素总数的 25%。</p>
<p>请你找到并返回这个整数</p>
<p><strong>示例：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">10</span>]</span><br><span class="line">输出：<span class="number">6</span></span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= arr.length &lt;= 10^4</code></li>
<li><code>0 &lt;= arr[i] &lt;= 10^5</code></li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findSpecialInteger</span><span class="params">(self, arr)</span> -&gt; int:</span></span><br><span class="line">        alen = len(arr) // <span class="number">4</span></span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> arr:</span><br><span class="line">            <span class="keyword">if</span> arr.count(e) &gt; alen:</span><br><span class="line">                <span class="keyword">return</span> e</span><br><span class="line">s = Solution()</span><br><span class="line">print(s.findSpecialInteger(arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">10</span>])</span><br></pre></td></tr></table></figure>
<h3 id="有效的山脉数组-数组"><a href="https://leetcode-cn.com/problems/valid-mountain-array/" target="_blank" rel="noopener">941. 有效的山脉数组</a> [数组]</h3>
<p>给定一个整数数组 <code>A</code>，如果它是有效的山脉数组就返回 <code>true</code>，否则返回 <code>false</code>。</p>
<p>让我们回顾一下，如果 A 满足下述条件，那么它是一个山脉数组：</p>
<ul>
<li><p><code>A.length &gt;= 3</code>； 在 <code>0 &lt; i &lt; A.length - 1</code> 条件下，存在 <code>i</code></p>
<p>使得：<code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i]</code>； <code>A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code></p></li>
</ul>
<figure>
<img src="https://assets.leetcode.com/uploads/2019/10/20/hint_valid_mountain_array.png" alt="img"><figcaption>img</figcaption>
</figure>
<p><strong>示例 1：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">输入：[<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">输入：[<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong> <code>0 &lt;= A.length &lt;= 10000</code>；<code>0 &lt;= A[i] &lt;= 10000</code></p>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validMountainArray</span><span class="params">(self, A)</span> -&gt; bool:</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        alen = len(A)</span><br><span class="line">        <span class="keyword">while</span> i &lt; alen<span class="number">-1</span> <span class="keyword">and</span> A[i] &lt; A[i + <span class="number">1</span>]:</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> i == alen<span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; alen<span class="number">-1</span> <span class="keyword">and</span> A[i] &gt; A[i + <span class="number">1</span>]:</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == alen - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">              </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.validMountainArray([<span class="number">2</span>, <span class="number">1</span>]))</span><br><span class="line">print(s.validMountainArray([<span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>]))</span><br><span class="line">print(s.validMountainArray([<span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="整数的各位积和之差-数学"><a href="https://leetcode-cn.com/problems/subtract-the-product-and-sum-of-digits-of-an-integer/" target="_blank" rel="noopener">1281. 整数的各位积和之差</a> [数学]</h3>
<p>给你一个整数 <code>n</code>，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">234</span></span><br><span class="line">输出：<span class="number">15</span> </span><br><span class="line">解释：</span><br><span class="line">各位数之积 = <span class="number">2</span> * <span class="number">3</span> * <span class="number">4</span> = <span class="number">24</span> </span><br><span class="line">各位数之和 = <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> = <span class="number">9</span> </span><br><span class="line">结果 = <span class="number">24</span> - <span class="number">9</span> = <span class="number">15</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：n = <span class="number">4421</span></span><br><span class="line">输出：<span class="number">21</span></span><br><span class="line">解释： </span><br><span class="line">各位数之积 = <span class="number">4</span> * <span class="number">4</span> * <span class="number">2</span> * <span class="number">1</span> = <span class="number">32</span> </span><br><span class="line">各位数之和 = <span class="number">4</span> + <span class="number">4</span> + <span class="number">2</span> + <span class="number">1</span> = <span class="number">11</span> </span><br><span class="line">结果 = <span class="number">32</span> - <span class="number">11</span> = <span class="number">21</span></span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 10^5</code></li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subtractProductAndSum</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">        nstr = str(n)</span><br><span class="line">        nint = list(map(int, nstr))</span><br><span class="line">        </span><br><span class="line">        pro = reduce(<span class="keyword">lambda</span> x, y: x*y, nint)</span><br><span class="line">        su = reduce(<span class="keyword">lambda</span> x, y: x+y, nint)       </span><br><span class="line">        <span class="keyword">return</span> pro - su</span><br><span class="line">                </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.subtractProductAndSum(<span class="number">234</span>))</span><br><span class="line">print(s.subtractProductAndSum(<span class="number">4421</span>))</span><br><span class="line">print(s.subtractProductAndSum(<span class="number">114</span>))</span><br></pre></td></tr></table></figure>
<h3 id="公平的糖果交换-数组"><a href="https://leetcode-cn.com/problems/fair-candy-swap/" target="_blank" rel="noopener">888. 公平的糖果交换</a> [数组]</h3>
<p>爱丽丝和鲍勃有不同大小的糖果棒：<code>A[i]</code> 是爱丽丝拥有的第 <code>i</code> 块糖的大小，<code>B[j]</code> 是鲍勃拥有的第 <code>j</code> 块糖的大小。</p>
<p>因为他们是朋友，所以他们想交换一个糖果棒，这样交换后，他们都有相同的糖果总量。<em>（一个人拥有的糖果总量是他们拥有的糖果棒大小的总和。）</em></p>
<p>返回一个整数数组 <code>ans</code>，其中 <code>ans[0]</code> 是爱丽丝必须交换的糖果棒的大小，<code>ans[1]</code> 是 Bob 必须交换的糖果棒的大小。</p>
<p>如果有多个答案，你可以返回其中任何一个。保证答案存在。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：A = [<span class="number">1</span>,<span class="number">1</span>], B = [<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：A = [<span class="number">1</span>,<span class="number">2</span>], B = [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：A = [<span class="number">2</span>], B = [<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">输出：[<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p><strong>示例 4：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>], B = [<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">输出：[<span class="number">5</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= A.length &lt;= 10000</code> ；<code>1 &lt;= B.length &lt;= 10000</code>；<code>1 &lt;= A[i] &lt;= 100000</code></li>
<li><code>1 &lt;= B[i] &lt;= 100000</code>；保证爱丽丝与鲍勃的糖果总量不同。；答案肯定存在。</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"><span class="comment">#    输入：A = [1,1], B = [2,2]</span></span><br><span class="line"><span class="comment">#    输出：[1,2]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fairCandySwap</span><span class="params">(self, A, B)</span>:</span></span><br><span class="line">        sa, sb = sum(A), sum(B)</span><br><span class="line">        diff = (sa - sb) / <span class="number">2</span></span><br><span class="line">        A.sort()</span><br><span class="line">        B.sort()</span><br><span class="line">        i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> A[i] - B[j] != diff:</span><br><span class="line">            <span class="keyword">if</span> A[i] - B[j] &gt; diff:   <span class="comment"># A[i] - B[j] &gt; diff: j++</span></span><br><span class="line">                j = j + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> A[i] - B[j] &lt; diff:</span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> [A[i], B[j]]</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.fairCandySwap(A = [<span class="number">1</span>,<span class="number">1</span>], B = [<span class="number">2</span>,<span class="number">2</span>]))</span><br><span class="line">print(s.fairCandySwap(A = [<span class="number">1</span>,<span class="number">2</span>], B = [<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line">print(s.fairCandySwap(A = [<span class="number">2</span>], B = [<span class="number">1</span>,<span class="number">3</span>]))</span><br><span class="line">print(s.fairCandySwap(A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>], B = [<span class="number">2</span>,<span class="number">4</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="最长回文串-字符串"><a href="https://leetcode-cn.com/problems/longest-palindrome/" target="_blank" rel="noopener">409. 最长回文串</a> [字符串]</h3>
<p>给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。</p>
<p>在构造过程中，请注意区分大小写。比如 <code>&quot;Aa&quot;</code> 不能当做一个回文字符串。</p>
<p><strong>注意:</strong> 假设字符串的长度不会超过 1010。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入:</span></span><br><span class="line"><span class="string">"abccccdd"</span></span><br><span class="line"><span class="section">输出:</span></span><br><span class="line">7</span><br><span class="line"><span class="section">解释:</span></span><br><span class="line">我们可以构造的最长的回文串是<span class="string">"dccaccd"</span>, 它的长度是 7。</span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">        counter = Counter(s)                </span><br><span class="line">        </span><br><span class="line">        res, odd_flag = <span class="number">0</span>, <span class="number">0</span>   <span class="comment"># 结果, 奇数次flag设置为0</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> counter.items():</span><br><span class="line">            res += (v // <span class="number">2</span>) * <span class="number">2</span>  <span class="comment"># 偶数则偶数次；奇数，则小于奇数的最大偶数</span></span><br><span class="line">            <span class="keyword">if</span> v % <span class="number">2</span> == <span class="number">1</span>:       <span class="comment"># 有奇数，则最后再+1</span></span><br><span class="line">                odd_flag = <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> res + odd_flag</span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.longestPalindrome(<span class="string">"abccccdd"</span>))</span><br><span class="line">print(s.longestPalindrome(<span class="string">"ccc"</span>))</span><br><span class="line">print(s.longestPalindrome(<span class="string">"bananas"</span>))</span><br></pre></td></tr></table></figure>
<h3 id="柠檬水找零-数组"><a href="https://leetcode-cn.com/problems/lemonade-change/" target="_blank" rel="noopener">860. 柠檬水找零</a> [数组]</h3>
<p>在柠檬水摊上，每一杯柠檬水的售价为 <code>5</code> 美元。</p>
<p>顾客排队购买你的产品，（按账单 <code>bills</code> 支付的顺序）一次购买一杯。</p>
<p>每位顾客只买一杯柠檬水，然后向你付 <code>5</code> 美元、<code>10</code> 美元或 <code>20</code> 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 <code>5</code> 美元。</p>
<p>注意，一开始你手头没有任何零钱。</p>
<p>如果你能给每位顾客正确找零，返回 <code>true</code> ，否则返回 <code>false</code> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：</span><br><span class="line">前 <span class="number">3</span> 位顾客那里，我们按顺序收取 <span class="number">3</span> 张 <span class="number">5</span> 美元的钞票。</span><br><span class="line">第 <span class="number">4</span> 位顾客那里，我们收取一张 <span class="number">10</span> 美元的钞票，并返还 <span class="number">5</span> 美元。</span><br><span class="line">第 <span class="number">5</span> 位顾客那里，我们找还一张 <span class="number">10</span> 美元的钞票和一张 <span class="number">5</span> 美元的钞票。</span><br><span class="line">由于所有客户都得到了正确的找零，所以我们输出 <span class="literal">true</span>。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">5</span>,<span class="number">5</span>,<span class="number">10</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">10</span>,<span class="number">10</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 4：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">5</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：</span><br><span class="line">前 <span class="number">2</span> 位顾客那里，我们按顺序收取 <span class="number">2</span> 张 <span class="number">5</span> 美元的钞票。</span><br><span class="line">对于接下来的 <span class="number">2</span> 位顾客，我们收取一张 <span class="number">10</span> 美元的钞票，然后返还 <span class="number">5</span> 美元。</span><br><span class="line">对于最后一位顾客，我们无法退回 <span class="number">15</span> 美元，因为我们现在只有两张 <span class="number">10</span> 美元的钞票。</span><br><span class="line">由于不是每位顾客都得到了正确的找零，所以答案是 <span class="literal">false</span>。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= bills.length &lt;= 10000</code></li>
<li><code>bills[i]</code> 不是 <code>5</code> 就是 <code>10</code> 或是 <code>20</code></li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lemonadeChange</span><span class="params">(self, bills)</span> -&gt; bool:</span></span><br><span class="line">        five, ten = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> bills:</span><br><span class="line">            <span class="keyword">if</span> b == <span class="number">5</span>:</span><br><span class="line">                five += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> b == <span class="number">10</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> five:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                five -= <span class="number">1</span></span><br><span class="line">                ten += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> ten <span class="keyword">and</span> five:</span><br><span class="line">                    ten -= <span class="number">1</span></span><br><span class="line">                    five -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> five &gt; <span class="number">2</span>:</span><br><span class="line">                    five -= <span class="number">3</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">s = Solution()</span><br><span class="line"></span><br><span class="line">print(s.lemonadeChange([<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>]))</span><br><span class="line">print(s.lemonadeChange([<span class="number">5</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="比较含退格的字符串-字符串"><a href="https://leetcode-cn.com/problems/backspace-string-compare/" target="_blank" rel="noopener">844. 比较含退格的字符串</a> [字符串]</h3>
<p>给定 <code>S</code> 和 <code>T</code> 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 <code>#</code> 代表退格字符。</p>
<p><strong>注意：</strong>如果对空文本输入退格字符，文本继续为空。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">输入：S = <span class="string">"ab<span class="subst">#c</span>"</span>, T = <span class="string">"ad<span class="subst">#c</span>"</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：S 和 T 都会变成 “ac”。</span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backspaceCompare</span><span class="params">(self, S: str, T: str)</span> -&gt; bool:</span></span><br><span class="line">        st1 = <span class="string">''</span></span><br><span class="line">        st2 = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> S:</span><br><span class="line">            <span class="keyword">if</span> e != <span class="string">'#'</span>:</span><br><span class="line">                st1 += e</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                st1 = st1[:<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> T:</span><br><span class="line">            <span class="keyword">if</span> e != <span class="string">'#'</span>:</span><br><span class="line">                st2 += e</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                st2 = st2[:<span class="number">-1</span>]</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">if</span> st1 == st2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.backspaceCompare(S = <span class="string">"ab##"</span>, T = <span class="string">"c#d#"</span>))</span><br></pre></td></tr></table></figure>
<h3 id="不浪费原料的汉堡制作方案-贪心"><a href="https://leetcode-cn.com/problems/number-of-burgers-with-no-waste-of-ingredients/" target="_blank" rel="noopener">1276. 不浪费原料的汉堡制作方案</a> 【贪心]</h3>
<p>圣诞活动预热开始啦，汉堡店推出了全新的汉堡套餐。为了避免浪费原料，请你帮他们制定合适的制作计划。</p>
<p>给你两个整数 <code>tomatoSlices</code> 和 <code>cheeseSlices</code>，分别表示番茄片和奶酪片的数目。不同汉堡的原料搭配如下：</p>
<ul>
<li><strong>巨无霸汉堡：</strong>4 片番茄和 1 片奶酪</li>
<li><strong>小皇堡：</strong>2 片番茄和 1 片奶酪</li>
</ul>
<p>请你以 <code>[total_jumbo, total_small]</code>（[巨无霸汉堡总数，小皇堡总数]）的格式返回恰当的制作方案，使得剩下的番茄片 <code>tomatoSlices</code> 和奶酪片 <code>cheeseSlices</code> 的数量都是 <code>0</code>。</p>
<p>如果无法使剩下的番茄片 <code>tomatoSlices</code> 和奶酪片 <code>cheeseSlices</code> 的数量为 <code>0</code>，就请返回 <code>[]</code>。</p>
<p><strong>示例：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line">输入：tomatoSlices = <span class="number">16</span>, cheeseSlices = <span class="number">7</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">6</span>]</span><br><span class="line">解释：制作 <span class="number">1</span> 个巨无霸汉堡和 <span class="number">6</span> 个小皇堡需要 <span class="number">4</span>*<span class="number">1</span> + <span class="number">2</span>*<span class="number">6</span> = <span class="number">16</span> 片番茄和 <span class="number">1</span> + <span class="number">6</span> = <span class="number">7</span> 片奶酪。不会剩下原料。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line">输入：tomatoSlices = <span class="number">17</span>, cheeseSlices = <span class="number">4</span></span><br><span class="line">输出：[]</span><br><span class="line">解释：只制作小皇堡和巨无霸汉堡无法用光全部原料。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line">输入：tomatoSlices = <span class="number">4</span>, cheeseSlices = <span class="number">17</span></span><br><span class="line">输出：[]</span><br><span class="line">解释：制作 <span class="number">1</span> 个巨无霸汉堡会剩下 <span class="number">16</span> 片奶酪，制作 <span class="number">2</span> 个小皇堡会剩下 <span class="number">15</span> 片奶酪。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">4</span>：</span><br><span class="line">输入：tomatoSlices = <span class="number">0</span>, cheeseSlices = <span class="number">0</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">示例 <span class="number">5</span>：</span><br><span class="line">输入：tomatoSlices = <span class="number">2</span>, cheeseSlices = <span class="number">1</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numOfBurgers</span><span class="params">(self, tomatoSlices: int, cheeseSlices: int)</span>:</span>        </span><br><span class="line">        low, high = <span class="number">0</span>, tomatoSlices // <span class="number">4</span>     </span><br><span class="line"><span class="comment">#        巨无霸汉堡：4 片番茄和 1 片奶酪</span></span><br><span class="line"><span class="comment">#        小皇堡：2 片番茄和 1 片奶酪</span></span><br><span class="line">        <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">            mid = (low + high) // <span class="number">2</span>   </span><br><span class="line">            <span class="comment"># 巨无霸 的 数据比</span></span><br><span class="line">            tomatos, cheeses = tomatoSlices - mid*<span class="number">4</span>, cheeseSlices - mid</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 符合 小皇煲 的 数据比</span></span><br><span class="line">            <span class="keyword">if</span> tomatos == cheeses*<span class="number">2</span>:        </span><br><span class="line">                <span class="keyword">return</span> [mid, cheeses]   </span><br><span class="line">            <span class="keyword">elif</span> tomatos &gt; cheeses*<span class="number">2</span>:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line"><span class="comment">#print(s.numOfBurgers(tomatoSlices = 48, cheeseSlices = 16))</span></span><br><span class="line">print(s.numOfBurgers(tomatoSlices = <span class="number">16</span>, cheeseSlices = <span class="number">7</span>))</span><br><span class="line"><span class="comment">#print(s.numOfBurgers(tomatoSlices = 17, cheeseSlices = 4))</span></span><br></pre></td></tr></table></figure>
<h3 id="丑数-数学"><a href="https://leetcode-cn.com/problems/ugly-number/" target="_blank" rel="noopener">263. 丑数</a> [数学]</h3>
<p>编写一个程序判断给定的数是否为丑数。</p>
<p>丑数就是只包含质因数 <code>2, 3, 5</code> 的<strong>正整数</strong>。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">输入:</span> <span class="number">6</span></span><br><span class="line"><span class="string">输出:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">解释:</span> <span class="number">6</span> <span class="string">=</span> <span class="number">2</span> <span class="string">×</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">输入:</span> <span class="number">8</span></span><br><span class="line"><span class="string">输出:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">解释:</span> <span class="number">8</span> <span class="string">=</span> <span class="number">2</span> <span class="string">×</span> <span class="number">2</span> <span class="string">×</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">输入:</span> <span class="number">14</span></span><br><span class="line"><span class="string">输出:</span> <span class="literal">false</span> </span><br><span class="line"><span class="string">解释:</span> <span class="number">14</span> <span class="string">不是丑数，因为它包含了另外一个质因数</span> <span class="number">7</span><span class="string">。</span></span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong></p>
<ol type="1">
<li><code>1</code> 是丑数。</li>
<li>输入不会超过 32 位有符号整数的范围: [−231, 231 − 1]。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isUgly</span><span class="params">(self, num: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.isUgly(num // <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">elif</span> num % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.isUgly(num // <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">elif</span> num % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.isUgly(num // <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.isUgly(<span class="number">6</span>))</span><br><span class="line">print(s.isUgly(<span class="number">8</span>))</span><br><span class="line">print(s.isUgly(<span class="number">14</span>))</span><br></pre></td></tr></table></figure>
<h3 id="三个数的最大乘积数组"><a href="https://leetcode-cn.com/problems/maximum-product-of-three-numbers/" target="_blank" rel="noopener">628. 三个数的最大乘积</a>[数组]</h3>
<p>给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出: <span class="number">6</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出: <span class="number">24</span></span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<ol type="1">
<li>给定的整型数组长度范围是[3,104]，数组中所有的元素范围是[-1000, 1000]。</li>
<li>输入的数组中任意三个数的乘积不会超出32位有符号整数的范围。</li>
</ol>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximumProduct</span><span class="params">(self, nums)</span> -&gt; int:</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">return</span> max(nums[<span class="number">-1</span>]*nums[<span class="number">-2</span>]*nums[<span class="number">-3</span>],nums[<span class="number">-1</span>]*nums[<span class="number">0</span>]*nums[<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.maximumProduct([<span class="number">-4</span>,<span class="number">-3</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">60</span>]))</span><br><span class="line">print(s.maximumProduct([<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="山羊拉丁文-字符串"><a href="https://leetcode-cn.com/problems/goat-latin/" target="_blank" rel="noopener">824. 山羊拉丁文</a> [字符串]</h3>
<p>给定一个由空格分割单词的句子 <code>S</code>。每个单词只包含大写或小写字母。</p>
<p>我们要将句子转换为 <em>“Goat Latin”</em>（一种类似于 猪拉丁文 - Pig Latin 的虚构语言）。</p>
<p>山羊拉丁文的规则如下：</p>
<ul>
<li>如果单词以元音开头（a, e, i, o, u），在单词后添加<code>&quot;ma&quot;</code>。 例如，单词<code>&quot;apple&quot;</code>变为<code>&quot;applema&quot;</code>。</li>
<li>如果单词以辅音字母开头（即非元音字母），移除第一个字符并将它放到末尾，之后再添加<code>&quot;ma&quot;</code>。 例如，单词<code>&quot;goat&quot;</code>变为<code>&quot;oatgma&quot;</code>。</li>
<li>根据单词在句子中的索引，在单词最后添加与索引相同数量的字母<code>'a'</code>，索引从1开始。 例如，在第一个单词后添加<code>&quot;a&quot;</code>，在第二个单词后添加<code>&quot;aa&quot;</code>，以此类推。</li>
</ul>
<p>返回将 <code>S</code> 转换为山羊拉丁文后的句子。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">输入: <span class="string">"I speak Goat Latin"</span></span><br><span class="line">输出: <span class="string">"Imaa peaksmaaa oatGmaaaa atinLmaaaaa"</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight smalltalk"><table><tr><td class="code"><pre><span class="line">输入: <span class="comment">"The quick brown fox jumped over the lazy dog"</span></span><br><span class="line">输出: <span class="comment">"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa"</span></span><br></pre></td></tr></table></figure>
<p><strong>说明:</strong></p>
<ul>
<li><code>S</code> 中仅包含大小写字母和空格。单词间有且仅有一个空格。</li>
<li><code>1 &lt;= S.length &lt;= 150</code>。</li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">toGoatLatin</span><span class="params">(self, S: str)</span> -&gt; str:</span></span><br><span class="line">        res = []</span><br><span class="line">        S = S.split()</span><br><span class="line">        cnt = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> S:</span><br><span class="line">            <span class="keyword">if</span> e[<span class="number">0</span>].lower() <span class="keyword">in</span> [<span class="string">'a'</span>,<span class="string">'e'</span>,<span class="string">'i'</span>, <span class="string">'o'</span>, <span class="string">'u'</span>]:</span><br><span class="line">                res.append(e + <span class="string">'ma'</span> + cnt*<span class="string">'a'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(e[<span class="number">1</span>:] + e[<span class="number">0</span>] + <span class="string">'ma'</span> + cnt*<span class="string">'a'</span>)</span><br><span class="line">            cnt = cnt + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">' '</span>.join(res)</span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.toGoatLatin(<span class="string">"I speak Goat Latin"</span>))</span><br><span class="line">print(s.toGoatLatin(<span class="string">"The quick brown fox jumped over the lazy dog"</span>))</span><br></pre></td></tr></table></figure>
<h3 id="长按键入-字符串"><a href="https://leetcode-cn.com/problems/long-pressed-name/" target="_blank" rel="noopener">925. 长按键入</a> [字符串]</h3>
<p>你的朋友正在使用键盘输入他的名字 <code>name</code>。偶尔，在键入字符 <code>c</code> 时，按键可能会被<em>长按</em>，而字符可能被输入 1 次或多次。</p>
<p>你将会检查键盘输入的字符 <code>typed</code>。如果它对应的可能是你的朋友的名字（其中一些字符可能被长按），那么就返回 <code>True</code>。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">输入：<span class="type">name</span> = "alex", typed = "aaleex"</span><br><span class="line">输出：<span class="keyword">true</span></span><br><span class="line">解释：<span class="string">'alex'</span> 中的 <span class="string">'a'</span> 和 <span class="string">'e'</span> 被长按。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">name</span> = <span class="string">"saeed"</span>, <span class="attr">typed</span> = <span class="string">"ssaaedd"</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：'e' 一定需要被键入两次，但在 typed 的输出中不是这样。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">name</span> = <span class="string">"leelee"</span>, <span class="attr">typed</span> = <span class="string">"lleeelee"</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 4：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">name</span> = <span class="string">"laiden"</span>, <span class="attr">typed</span> = <span class="string">"laiden"</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：长按名字中的字符并不是必要的。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ol type="1">
<li><code>name.length &lt;= 1000</code></li>
<li><code>typed.length &lt;= 1000</code></li>
<li><code>name</code> 和 <code>typed</code> 的字符都是小写字母。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isLongPressedName</span><span class="params">(self, name: str, typed: str)</span> -&gt; bool:</span></span><br><span class="line">         charSetN = set(name)</span><br><span class="line">         charSetT = set(typed)</span><br><span class="line">         <span class="keyword">for</span> item <span class="keyword">in</span> charSetN:</span><br><span class="line">             <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> charSetT:</span><br><span class="line">                 <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">         <span class="keyword">for</span> item <span class="keyword">in</span> charSetT:</span><br><span class="line">            <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> charSetN:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">         i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">         <span class="keyword">while</span> i &lt; len(name) <span class="keyword">and</span> j &lt; len(typed):</span><br><span class="line">             <span class="keyword">if</span> name[i] == typed[j]:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">             <span class="keyword">else</span>:</span><br><span class="line">                 <span class="keyword">if</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> typed[j] == typed[j<span class="number">-1</span>]:</span><br><span class="line">                     j += <span class="number">1</span></span><br><span class="line">                 <span class="keyword">else</span>:</span><br><span class="line">                     <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">         <span class="keyword">if</span> i == len(name):   <span class="comment"># 所有name都用完了</span></span><br><span class="line">             <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.isLongPressedName(name = <span class="string">"alex"</span>, typed = <span class="string">"aaleex"</span>))</span><br><span class="line">print(s.isLongPressedName(name = <span class="string">"saeed"</span>, typed = <span class="string">"ssaaedd"</span>))</span><br><span class="line">print(s.isLongPressedName(<span class="string">'abc'</span>, <span class="string">'aaxbc'</span>))</span><br><span class="line">print(s.isLongPressedName(<span class="string">"zlexya"</span>, <span class="string">"aazlllllllllllllleexxxxxxxxxxxxxxxya"</span>))</span><br></pre></td></tr></table></figure>
<h3 id="公交站间的距离-数组"><a href="https://leetcode-cn.com/problems/distance-between-bus-stops/" target="_blank" rel="noopener">1184. 公交站间的距离</a> [数组]</h3>
<p>环形公交路线上有 <code>n</code> 个站，按次序从 <code>0</code> 到 <code>n - 1</code> 进行编号。我们已知每一对相邻公交站之间的距离，<code>distance[i]</code> 表示编号为 <code>i</code> 的车站和编号为 <code>(i + 1) % n</code> 的车站之间的距离。</p>
<p>环线上的公交车都可以按顺时针和逆时针的方向行驶。</p>
<p>返回乘客从出发点 <code>start</code> 到目的地 <code>destination</code> 之间的最短距离。</p>
<p><strong>示例 1：</strong></p>
<figure>
<img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/08/untitled-diagram-1.jpg" alt="img"><figcaption>img</figcaption>
</figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：distance = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], start = <span class="number">0</span>, destination = <span class="number">1</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：公交站 <span class="number">0</span> 和 <span class="number">1</span> 之间的距离是 <span class="number">1</span> 或 <span class="number">9</span>，最小值是 <span class="number">1</span>。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure>
<img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/08/untitled-diagram-1-1.jpg" alt="img"><figcaption>img</figcaption>
</figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：distance = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], start = <span class="number">0</span>, destination = <span class="number">2</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：公交站 <span class="number">0</span> 和 <span class="number">2</span> 之间的距离是 <span class="number">3</span> 或 <span class="number">7</span>，最小值是 <span class="number">3</span>。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure>
<img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/08/untitled-diagram-1-2.jpg" alt="img"><figcaption>img</figcaption>
</figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：distance = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], start = <span class="number">0</span>, destination = <span class="number">3</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：公交站 <span class="number">0</span> 和 <span class="number">3</span> 之间的距离是 <span class="number">6</span> 或 <span class="number">4</span>，最小值是 <span class="number">4</span>。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 10^4</code></li>
<li><code>distance.length == n</code></li>
<li><code>0 &lt;= start, destination &lt; n</code></li>
<li><code>0 &lt;= distance[i] &lt;= 10^4</code></li>
</ul>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">distanceBetweenBusStops</span><span class="params">(self, distance, start: int, destination: int)</span> -&gt; int:</span></span><br><span class="line">        forward = <span class="number">0</span></span><br><span class="line">        backward = <span class="number">0</span> </span><br><span class="line">        dlen = len(distance)       </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, dlen):</span><br><span class="line">            forward += distance[(start + i) % dlen]</span><br><span class="line">            <span class="keyword">if</span> (start + i + <span class="number">1</span>) % dlen == destination:</span><br><span class="line">                <span class="keyword">break</span>       </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, dlen):</span><br><span class="line">            backward += distance[(start + dlen - i - <span class="number">1</span>) % dlen]</span><br><span class="line">            <span class="keyword">if</span> (start + dlen - i - <span class="number">1</span>) % dlen == destination:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> forward <span class="keyword">if</span> forward &lt; backward <span class="keyword">else</span> backward</span><br><span class="line">                </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.distanceBetweenBusStops(distance = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], start = <span class="number">0</span>, destination = <span class="number">1</span>))</span><br><span class="line">print(s.distanceBetweenBusStops(distance = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], start = <span class="number">0</span>, destination = <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<h3 id="二分算法">35. 二分算法</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span><span class="params">(self, nums, target: int)</span> -&gt; int:</span></span><br><span class="line">        nlen = len(nums)</span><br><span class="line">        <span class="keyword">if</span> nlen == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> target &lt; nums[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> target &gt; nums[nlen - <span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> nlen</span><br><span class="line">        low, high = <span class="number">0</span>, nlen - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &gt; target:</span><br><span class="line">                high = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid + <span class="number">1</span>               </span><br><span class="line">        <span class="keyword">return</span> low</span><br><span class="line">         </span><br><span class="line">s = Solution()</span><br><span class="line"><span class="comment">#print(s.searchInsert([1,3,5,6], 5))</span></span><br><span class="line"><span class="comment">#print(s.searchInsert([1,3,5,6], 7))</span></span><br><span class="line">print(s.searchInsert([<span class="number">1</span>], <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<h3 id="单词规律-字符串"><a href="https://leetcode-cn.com/problems/word-pattern/" target="_blank" rel="noopener">290. 单词规律</a> [字符串]</h3>
<p>给定一种规律 <code>pattern</code> 和一个字符串 <code>str</code> ，判断 <code>str</code> 是否遵循相同的规律。</p>
<p>这里的 <strong>遵循</strong> 指完全匹配，例如， <code>pattern</code> 里的每个字母和字符串 <code>str</code> 中的每个非空单词之间存在着双向连接的对应规律。</p>
<p><strong>示例1:</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入: <span class="attr">pattern</span> = <span class="string">"abba"</span>, <span class="attr">str</span> = <span class="string">"dog cat cat dog"</span></span><br><span class="line">输出: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入:<span class="attr">pattern</span> = <span class="string">"abba"</span>, <span class="attr">str</span> = <span class="string">"dog cat cat fish"</span></span><br><span class="line">输出: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入: <span class="attr">pattern</span> = <span class="string">"aaaa"</span>, <span class="attr">str</span> = <span class="string">"dog cat cat dog"</span></span><br><span class="line">输出: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p><strong>示例 4:</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入: <span class="attr">pattern</span> = <span class="string">"abba"</span>, <span class="attr">str</span> = <span class="string">"dog dog dog dog"</span></span><br><span class="line">输出: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordPattern</span><span class="params">(self, pattern: str, str1: str)</span> -&gt; bool:</span></span><br><span class="line">        pli = list(pattern)</span><br><span class="line">        sli = str1.split()</span><br><span class="line">        plen = len(pli)</span><br><span class="line">        slen = len(sli)</span><br><span class="line">        <span class="keyword">if</span> plen != slen:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(slen):</span><br><span class="line">            <span class="keyword">if</span> pli.index(pli[i]) != sli.index(sli[i]):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.wordPattern(<span class="string">"abba"</span>, <span class="string">"dog cat cat dog"</span>))</span><br><span class="line">print(s.wordPattern(<span class="string">"aaa"</span>, <span class="string">"aa aa aa aa"</span>))</span><br></pre></td></tr></table></figure>
<h3 id="卡牌分组数组"><a href="https://leetcode-cn.com/problems/x-of-a-kind-in-a-deck-of-cards/" target="_blank" rel="noopener">914. 卡牌分组</a>[数组]</h3>
<p>给定一副牌，每张牌上都写着一个整数。</p>
<p>此时，你需要选定一个数字 <code>X</code>，使我们可以将整副牌按下述规则分成 1 组或更多组：</p>
<ul>
<li>每组都有 <code>X</code> 张牌。</li>
<li>组内所有的牌上都写着相同的整数。</li>
</ul>
<p>仅当你可选的 <code>X &gt;= 2</code> 时返回 <code>true</code>。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：可行的分组是 [<span class="number">1</span>,<span class="number">1</span>]，[<span class="number">2</span>,<span class="number">2</span>]，[<span class="number">3</span>,<span class="number">3</span>]，[<span class="number">4</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：没有满足要求的分组。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">1</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：没有满足要求的分组。</span><br></pre></td></tr></table></figure>
<p><strong>示例 4：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：可行的分组是 [<span class="number">1</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p><strong>示例 5：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：可行的分组是 [<span class="number">1</span>,<span class="number">1</span>]，[<span class="number">2</span>,<span class="number">2</span>]，[<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">**提示：**</span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasGroupsSizeX</span><span class="params">(self, deck)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">import</span> math</span><br><span class="line">        dlen = len(deck)        </span><br><span class="line">        <span class="keyword">if</span> dlen &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        cnt = [deck.count(e) <span class="keyword">for</span> e <span class="keyword">in</span> deck]</span><br><span class="line"></span><br><span class="line">        mygcd = <span class="number">9999999</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(dlen - <span class="number">1</span>):</span><br><span class="line">            t = math.gcd(cnt[i], cnt[i + <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> mygcd &gt; t:</span><br><span class="line">                mygcd = t</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> mygcd == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(dlen - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> cnt[i] % mygcd != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.hasGroupsSizeX([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]))</span><br><span class="line">print(s.hasGroupsSizeX([<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]))</span><br><span class="line">print(s.hasGroupsSizeX([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="错误的集合数组"><a href="https://leetcode-cn.com/problems/set-mismatch/" target="_blank" rel="noopener">645. 错误的集合</a>[数组]</h3>
<p>集合 <code>S</code> 包含从1到 <code>n</code> 的整数。不幸的是，因为数据错误，导致集合里面某一个元素复制了成了集合里面的另外一个元素的值，导致集合丢失了一个整数并且有一个元素重复。</p>
<p>给定一个数组 <code>nums</code> 代表了集合 <code>S</code> 发生错误后的结果。你的任务是首先寻找到重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">输出: [<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<ol type="1">
<li>给定数组的长度范围是 [2, 10000]。</li>
<li>给定的数组是无序的。</li>
</ol>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findErrorNums</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        ans = []</span><br><span class="line">        nlen = len(nums)</span><br><span class="line">        </span><br><span class="line">        counts = [<span class="number">0</span>]*(nlen+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> nums:</span><br><span class="line">            counts[e] += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        print(counts)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, nlen+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> counts[i] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> len(ans) &lt; <span class="number">1</span>:</span><br><span class="line">                    ans.append(i)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ans.append(i)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> counts[i] == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> len(ans) &lt; <span class="number">1</span>:</span><br><span class="line">                    ans.append(i)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ans.append(i)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">if</span> counts[ans[<span class="number">0</span>]] &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> ans[::<span class="number">-1</span>]</span><br><span class="line">        </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.findErrorNums([<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="和为k的子数组数组-哈希表"><a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener">560. 和为K的子数组</a>[数组 哈希表]</h3>
<p>给定一个整数数组和一个整数 <strong>k，</strong>你需要找到该数组中和为 <strong>k</strong> 的连续的子数组的个数。</p>
<p><strong>示例 1 :</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入:nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], k = <span class="number">2</span></span><br><span class="line">输出: <span class="number">2</span> , [<span class="number">1</span>,<span class="number">1</span>] 与 [<span class="number">1</span>,<span class="number">1</span>] 为两种不同的情况。</span><br></pre></td></tr></table></figure>
<p><strong>说明 :</strong></p>
<ol type="1">
<li>数组的长度为 [1, 20,000]。</li>
<li>数组中元素的范围是 [-1000, 1000] ，且整数 <strong>k</strong> 的范围是 [-1e7, 1e7]。</li>
</ol>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subarraySum</span><span class="params">(self, nums, k: int)</span> -&gt; int:</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        hash = &#123;<span class="number">0</span> : <span class="number">1</span>&#125;</span><br><span class="line">        nlen = len(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(nlen):</span><br><span class="line">            sum += nums[i]</span><br><span class="line">            <span class="keyword">if</span> ((sum - k) <span class="keyword">in</span> hash):</span><br><span class="line">                ans += hash[sum - k]     <span class="comment"># +1</span></span><br><span class="line">            <span class="keyword">if</span> (sum <span class="keyword">in</span> hash):            <span class="comment"># sum == 0</span></span><br><span class="line">                hash[sum] += <span class="number">1</span>           <span class="comment"># 如果sum 能加出 hash中的key， 则对应key的value+1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hash[sum] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    </span><br><span class="line">s = Solution()</span><br><span class="line">print(s.subarraySum(nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], k = <span class="number">2</span>))</span><br><span class="line">print(s.subarraySum([<span class="number">28</span>,<span class="number">54</span>,<span class="number">7</span>,<span class="number">-70</span>,<span class="number">22</span>,<span class="number">65</span>,<span class="number">-6</span>], <span class="number">100</span>))</span><br></pre></td></tr></table></figure>
<h3 id="全排列">== 46. 全排列 ==</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        self.ans = []</span><br><span class="line">        self.nlen = len(nums)</span><br><span class="line">        self.t = [<span class="number">0</span>]*self.nlen</span><br><span class="line"></span><br><span class="line">        self.visit = [<span class="number">0</span>] * self.nlen</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(nums, cur)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> cur == self.nlen:</span><br><span class="line">                self.ans.append(self.t.copy())</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(self.nlen):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.visit[i]:</span><br><span class="line">                    self.t[cur] = nums[i]</span><br><span class="line">                    self.visit[i] = <span class="literal">True</span>       <span class="comment"># 回溯</span></span><br><span class="line">                    dfs(nums, cur + <span class="number">1</span>)  </span><br><span class="line">                    self.visit[i] = <span class="literal">False</span>      <span class="comment"># 回溯</span></span><br><span class="line">        dfs(nums, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> self.ans</span><br><span class="line"></span><br><span class="line">    <span class="comment"># In [6]: list(permutations([1,2,3], 3))</span></span><br><span class="line">    <span class="comment"># Out[6]: [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permute2</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line">        ans = [list(x) <span class="keyword">for</span> x <span class="keyword">in</span> permutations(nums, len(nums))]</span><br><span class="line">        <span class="keyword">return</span> ans </span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.permute([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line">print(s.permute2([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="mooc-05_4-集合操作a-b-a是b的子集">Mooc 05_4 集合操作(a &lt; b: a是b的子集)</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findWords</span><span class="params">(self, words: List[str])</span> -&gt; List[str]:</span></span><br><span class="line">        line1 = set(<span class="string">'qwertyuiop'</span>)</span><br><span class="line">        line2 = set(<span class="string">'asdfghjkl'</span>)</span><br><span class="line">        line3 = set(<span class="string">'zxcvbnm'</span>)</span><br><span class="line"></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            wset = set(word.lower())</span><br><span class="line">            <span class="keyword">if</span> wset &lt; line1 <span class="keyword">or</span> wset &lt; line2 <span class="keyword">or</span> wset &lt; line3:</span><br><span class="line">                ans.append(word)</span><br><span class="line">        <span class="keyword">return</span> ans </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.findWords([<span class="string">"Hello"</span>, <span class="string">"Alaska"</span>, <span class="string">"Dad"</span>, <span class="string">"Peace"</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>苏大计算机复试</tag>
      </tags>
  </entry>
</search>
