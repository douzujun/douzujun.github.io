<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/posts/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Suda-practise.md</title>
    <url>/posts/51138.html</url>
    <content><![CDATA[<p>[TOC]</p>
<p>##上机常用代码</p>
<p>###(1) 输入代码</p>
<figure>
<img src="/posts/51138/Users\Administrator\Desktop\上机面试png\input.png" alt="input"><figcaption>input</figcaption>
</figure>
<p>###(2) 矩阵乘法 (np.dot(A, B))</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">matrixMul</span><span class="params">(A, B)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(A[<span class="number">0</span>]) == len(B):  <span class="comment"># A列数=B行数</span></span><br><span class="line">        res = [[<span class="number">0</span>] * len(B[<span class="number">0</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A))]  <span class="comment"># 生成 A行 x B列 的0矩阵</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(B[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(len(B)):</span><br><span class="line">                    res[i][j] += A[i][k] * B[k][j]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">"输入矩阵有误!"</span>)</span><br><span class="line">    </span><br><span class="line">matrixMul(mat1, mat2)</span><br><span class="line">Out[<span class="number">13</span>]: [[<span class="number">19</span>, <span class="number">22</span>], [<span class="number">43</span>, <span class="number">50</span>]]</span><br><span class="line">    </span><br><span class="line">mat1</span><br><span class="line">Out[<span class="number">14</span>]: [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line">mat2</span><br><span class="line">Out[<span class="number">15</span>]: [[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]</span><br></pre></td></tr></table></figure>
<figure>
<img src="/posts/51138/Users\Administrator\Desktop\上机面试png\matrix_multiply.png" alt="matrix_multiply"><figcaption>matrix_multiply</figcaption>
</figure>
<p>###(2.2) 矩阵转置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matrix = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]]</span><br><span class="line"></span><br><span class="line">list(zip(*matrix))</span><br><span class="line">Out[<span class="number">34</span>]: [(<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>), (<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>), (<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>), (<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>)]</span><br><span class="line">    </span><br><span class="line">matrix</span><br><span class="line">Out[<span class="number">42</span>]: [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]]</span><br><span class="line"></span><br><span class="line">[[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">Out[<span class="number">43</span>]: [[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</span><br></pre></td></tr></table></figure>
<p>###(3) 生成 nxn 的 空矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成 nxn 的 空矩阵</span></span><br><span class="line">res = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n)]</span><br></pre></td></tr></table></figure>
<p>###(4) 字典排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按value排序(降序)，如果value相同则按key排序(字典序升序)</span></span><br><span class="line">freq = sorted(freq.items(), key=<span class="keyword">lambda</span> x:(-x[<span class="number">1</span>], x[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>
<p>###(5) 统计列表中所有元素出现的频率</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">a = <span class="string">"i love love you you"</span></span><br><span class="line"></span><br><span class="line">dict( Counter(list(a.split())) )</span><br><span class="line"></span><br><span class="line">Out[<span class="number">103</span>]: &#123;<span class="string">'i'</span>: <span class="number">1</span>, <span class="string">'love'</span>: <span class="number">2</span>, <span class="string">'you'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">frequences = defaultdict(int)</span><br><span class="line">print(frequences)</span><br><span class="line">Out[<span class="number">37</span>]: defaultdict(int, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> a.split():</span><br><span class="line">    frequences[e] += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">frequences</span><br><span class="line">Out[<span class="number">39</span>]: defaultdict(int, &#123;<span class="string">'i'</span>: <span class="number">1</span>, <span class="string">'love'</span>: <span class="number">2</span>, <span class="string">'you'</span>: <span class="number">2</span>&#125;)</span><br><span class="line">    </span><br><span class="line">s + t - s</span><br><span class="line">Out[<span class="number">112</span>]: Counter(&#123;<span class="string">'c'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'d'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">list((s + t - s).elements())</span><br><span class="line">Out[<span class="number">115</span>]: [<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure>
<p>###(6) list和set相互转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>])</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">list(set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>]))</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>###(7) 列表转整数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">int(<span class="string">""</span>.join(list(map(str, a))))</span><br><span class="line">Out[<span class="number">109</span>]: <span class="number">123</span></span><br></pre></td></tr></table></figure>
<p>###(8) 数字字符串 转整数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">int(<span class="string">'0e00'</span>, <span class="number">16</span>)    <span class="comment"># 按照16进制转换成10进制</span></span><br><span class="line">int(<span class="string">'001'</span>, <span class="number">2</span>)      <span class="comment"># 按照二进制方式转换成10进制</span></span><br><span class="line">int(<span class="string">'012'</span>, <span class="number">8</span>)      <span class="comment"># 按照八进制方式转换成10进制</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="https://img-blog.csdn.net/20160720140605151" alt="img"><figcaption>img</figcaption>
</figure>
<p>###(9) 读取二进制文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    res = [random.randrange(<span class="number">0</span>, <span class="number">9999</span>, <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">32</span>)]</span><br><span class="line"><span class="comment">#    print(res)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#    with open('./file/2010.txt', 'rb+') as f:</span></span><br><span class="line"><span class="comment">#        for i in res:</span></span><br><span class="line"><span class="comment">#            s = struct.pack('i', i)</span></span><br><span class="line"><span class="comment">#            f.write(s)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 写多少数据，一定要弄清楚</span></span><br><span class="line">    len1 = len(res)</span><br><span class="line">    nums = []</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./file/2010.txt'</span>, <span class="string">'rb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len1):</span><br><span class="line">            data = f.read(<span class="number">4</span>)</span><br><span class="line">            elem = struct.unpack(<span class="string">'i'</span>, data)[<span class="number">0</span>]</span><br><span class="line">            nums.append(elem)</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 按照 16进制 转换成 10进制        </span></span><br><span class="line">    nums.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"数据:"</span>, nums)</span><br></pre></td></tr></table></figure>
<p>###(9.1) 读二进制文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_data</span><span class="params">()</span>:</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./file/file_2017_2.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        num = f.read(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">while</span> num:</span><br><span class="line">            data.append(int.from_bytes(num, byteorder=<span class="string">'little'</span>))</span><br><span class="line">            num = f.read(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>
<p>###(10) 判断素数 和 埃氏筛选法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>    </span><br><span class="line">    top = int(math.sqrt(num))</span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= top:</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i = i + <span class="number">1</span>        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 埃氏筛选法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">()</span>:</span></span><br><span class="line">    n = int(input())</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    is_prime = [<span class="literal">True</span>]*(n+<span class="number">1</span>)</span><br><span class="line">    is_prime[<span class="number">0</span>] = is_prime[<span class="number">1</span>] = <span class="literal">True</span></span><br><span class="line">       </span><br><span class="line">    <span class="comment"># 筛选出所有素数 </span></span><br><span class="line">    primes = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> is_prime[i]:</span><br><span class="line">            primes.append(i)</span><br><span class="line">            j = <span class="number">2</span>*i</span><br><span class="line">            <span class="keyword">while</span> j &lt;= n:             <span class="comment"># 将 i 的倍数全部划去</span></span><br><span class="line">                is_prime[j] = <span class="literal">False</span></span><br><span class="line">                j += i         </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> is_prime[i] <span class="keyword">and</span> is_prime[i+<span class="number">2</span>]:</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">    print(res)</span><br><span class="line"></span><br><span class="line">judge()</span><br></pre></td></tr></table></figure>
<p>###(11) 最大公约数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num1 &lt; num2:</span><br><span class="line">        num1, num2 = num2, num1</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (num1 % num2):</span><br><span class="line">        temp = num1 % num2</span><br><span class="line">        num1 = num2</span><br><span class="line">        num2 = temp</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> num2</span><br></pre></td></tr></table></figure>
<p>###(12) format格式化输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, wlen):</span><br><span class="line">    print(<span class="string">'&#123;0:8&#125;'</span>.format(ascii_words[i]), end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">''</span>)</span><br></pre></td></tr></table></figure>
<figure>
<img src="https://img2018.cnblogs.com/i-beta/817161/202001/817161-20200130184014884-615320754.png" alt="img"><figcaption>img</figcaption>
</figure>
<figure>
<img src="/posts/51138/Users\Administrator\Desktop\上机面试png\format.png" alt="format"><figcaption>format</figcaption>
</figure>
<figure>
<img src="https://img2020.cnblogs.com/blog/817161/202004/817161-20200424001646195-244410363.png" alt="img"><figcaption>img</figcaption>
</figure>
<p>###(13) 全排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> L:</span><br><span class="line">        <span class="keyword">return</span> [L]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(L)):</span><br><span class="line">            <span class="comment"># 任一元素 + 剩余n-1个元素的全排序</span></span><br><span class="line">            rest = L[:i] + L[i+<span class="number">1</span>:]</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> permute(rest):</span><br><span class="line">                res.append(L[i:i+<span class="number">1</span>] + x)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">permute([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">Out[<span class="number">9</span>]: [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]]</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">perm</span><span class="params">(L, cur)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> cur == <span class="number">3</span>:</span><br><span class="line">        print(L)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> vis[i]:</span><br><span class="line">            L[cur] = i</span><br><span class="line">            vis[i] = <span class="literal">True</span></span><br><span class="line">            perm(L, cur + <span class="number">1</span>)</span><br><span class="line">            vis[i] = <span class="literal">False</span>            </span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">L = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">3</span>)]</span><br><span class="line">vis = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>)]</span><br><span class="line">            </span><br><span class="line">perm(L, <span class="number">0</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>###(13) 插入排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找插入位置，使L仍保持升序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_insert_index</span><span class="params">(L, t)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(L):</span><br><span class="line">        <span class="keyword">if</span> x &gt; t:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> len(L)</span><br><span class="line"></span><br><span class="line">A = [random.randint(<span class="number">0</span>, <span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(A)</span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> A:</span><br><span class="line">    i = find_insert_index(L, x)</span><br><span class="line">    L.insert(i, x)</span><br><span class="line">print(L)</span><br></pre></td></tr></table></figure>
<p>###(14) ==删除list里面的重复元素== (位置不变)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>,<span class="string">'a'</span>]</span><br><span class="line">l2 = sorted(set(l1),key=l1.index)</span><br><span class="line">print(l2)</span><br><span class="line"></span><br><span class="line">l1 = [<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>,<span class="string">'a'</span>]</span><br><span class="line">l2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l1:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> i <span class="keyword">in</span> l2:</span><br><span class="line">        l2.append(i)</span><br><span class="line">print(l2)</span><br></pre></td></tr></table></figure>
<p>###(15) 遍历列表时删除元素的正确做法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">21.</span>Python-遍历列表时删除元素的正确做法</span><br><span class="line">遍历在新在列表操作，删除时在原来的列表操作</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">print(id(a))</span><br><span class="line">print(id(a[:]))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a[:]:</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">5</span>:</span><br><span class="line">        a.remove(i)</span><br><span class="line">    print(a)</span><br><span class="line">print(<span class="string">'-----------'</span>)</span><br><span class="line">print(id(a))</span><br></pre></td></tr></table></figure>
<p>###(16) 集合操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集合操作</span></span><br><span class="line">a_set = set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line">b_set = set([<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>])</span><br><span class="line"></span><br><span class="line">print(a_set | b_set)       <span class="comment"># 并集</span></span><br><span class="line">print(a_set.union(b_set))  <span class="comment"># 并集</span></span><br><span class="line">print(a_set &amp; b_set)       <span class="comment"># 交集</span></span><br><span class="line">print(a_set.intersection(b_set))  <span class="comment"># 交集</span></span><br><span class="line">print(a_set.difference(b_set))    <span class="comment"># 差集</span></span><br><span class="line">print(a_set - b_set)</span><br><span class="line"></span><br><span class="line">print(a_set.symmetric_difference(b_set))   <span class="comment"># 对称差</span></span><br><span class="line">print(a_set ^ b_set)      <span class="comment"># 对称差</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br><span class="line">&#123;<span class="number">8</span>&#125;</span><br><span class="line">&#123;<span class="number">8</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125; n0</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>&#125;</span><br></pre></td></tr></table></figure>
<p>###(17) 分割==连续字符串==</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="string">'TTTTThhiiiis isssss a   tesssst CAaaa as'</span></span><br><span class="line"></span><br><span class="line">[i+j <span class="keyword">for</span> i,j <span class="keyword">in</span> re.findall(<span class="string">r'([a-zA-Z\s])(\1*)'</span>, data)]</span><br><span class="line">Out[<span class="number">47</span>]: </span><br><span class="line">[<span class="string">'TTTTT'</span>, <span class="string">'hh'</span>, <span class="string">'iiii'</span>, <span class="string">'s'</span>, <span class="string">' '</span>, <span class="string">'i'</span>, <span class="string">'sssss'</span>, <span class="string">' '</span>, <span class="string">'a'</span>, <span class="string">'   '</span>, <span class="string">'t'</span>, <span class="string">'e'</span>, <span class="string">'ssss'</span>, <span class="string">'t'</span>,<span class="string">' '</span>,<span class="string">'C'</span>,<span class="string">'A'</span>,<span class="string">'aaa'</span>,<span class="string">' '</span>,<span class="string">'a'</span>,<span class="string">'s'</span>]</span><br><span class="line"></span><br><span class="line">data = <span class="string">'5T2h4is i5s a3 te4st CA3a as10Z'</span></span><br><span class="line"></span><br><span class="line">re.findall(<span class="string">'(\d*)([a-zA-Z\s])'</span>, data)</span><br><span class="line">Out[<span class="number">50</span>]: </span><br><span class="line">[(<span class="string">'5'</span>, <span class="string">'T'</span>),(<span class="string">'2'</span>, <span class="string">'h'</span>),(<span class="string">'4'</span>, <span class="string">'i'</span>),(<span class="string">''</span>, <span class="string">'s'</span>),(<span class="string">''</span>, <span class="string">' '</span>),(<span class="string">''</span>, <span class="string">'i'</span>),(<span class="string">'5'</span>, <span class="string">'s'</span>),(<span class="string">''</span>, <span class="string">' '</span>),</span><br><span class="line"> (<span class="string">''</span>, <span class="string">'a'</span>),(<span class="string">'3'</span>, <span class="string">' '</span>),(<span class="string">''</span>, <span class="string">'t'</span>),(<span class="string">''</span>, <span class="string">'e'</span>),(<span class="string">'4'</span>, <span class="string">'s'</span>),(<span class="string">''</span>, <span class="string">'t'</span>),(<span class="string">''</span>, <span class="string">' '</span>),(<span class="string">''</span>, <span class="string">'C'</span>),</span><br><span class="line"> (<span class="string">''</span>, <span class="string">'A'</span>),(<span class="string">'3'</span>, <span class="string">'a'</span>),(<span class="string">''</span>, <span class="string">' '</span>),(<span class="string">''</span>, <span class="string">'a'</span>),(<span class="string">''</span>, <span class="string">'s'</span>),(<span class="string">'10'</span>, <span class="string">'Z'</span>)]</span><br></pre></td></tr></table></figure>
<p>###(18) 用 字符串 分割字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">'iloveappleclass'</span></span><br><span class="line"></span><br><span class="line">s.partition(<span class="string">'apple'</span>)</span><br><span class="line">Out[<span class="number">80</span>]: (<span class="string">'ilove'</span>, <span class="string">'apple'</span>, <span class="string">'class'</span>)</span><br></pre></td></tr></table></figure>
<p>###(19) maketrans, translate 【字符串对应地转换】</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table = <span class="string">''</span>.maketrans(<span class="string">'abcdef123'</span>, <span class="string">'uvwxyz@#$'</span>)</span><br><span class="line">s = <span class="string">'Python is a greate programming language. I like it!'</span></span><br><span class="line">s.translate(table)</span><br><span class="line">Out[<span class="number">92</span>]: <span class="string">'Python is u gryuty progrumming lunguugy. I liky it!'</span></span><br></pre></td></tr></table></figure>
<p>###(20) 日期计算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">staytime</span><span class="params">(etc_info)</span>:</span></span><br><span class="line">    <span class="comment"># 计算停留时间</span></span><br><span class="line">    <span class="comment"># 2016-06-11#21:48:50 时间格式</span></span><br><span class="line">    in_time = datetime.datetime.strptime(etc_info[<span class="number">1</span>], <span class="string">"%Y-%m-%d#%H:%M:%S"</span>)</span><br><span class="line">    out_time = datetime.datetime.strptime(etc_info[<span class="number">2</span>].strip(), <span class="string">"%Y-%m-%d#%H:%M:%S"</span>)</span><br><span class="line">    delta = (out_time - in_time).seconds</span><br></pre></td></tr></table></figure>
<h3 id="方差">(21) 方差</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var = sum([(num - ave)**<span class="number">2</span> <span class="keyword">for</span> num <span class="keyword">in</span> nums]) / len(nums)</span><br></pre></td></tr></table></figure>
<h2 id="苏大python习题">苏大python习题</h2>
<p>###1. 给定整数m和n，如果m和n都大于1，则判定m和n==是否互质==，并返回判定结果。</p>
<table>
<colgroup>
<col style="width: 11%">
<col style="width: 88%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"></th>
<th style="text-align: left;">相关说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">输入条件</td>
<td style="text-align: left;">输入参数m和n是整数。大小关系未知。</td>
</tr>
<tr class="even">
<td style="text-align: left;">输出要求</td>
<td style="text-align: left;">如果m和n中任何一个小于或等于1，则返回None，否则判定两数是否互质。 如果m和n互质，则返回布尔值True，否则返回布尔值False。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">其他要求</td>
<td style="text-align: left;">将代码写入函数func1</td>
</tr>
</tbody>
</table>
<p>测试用例：</p>
<table>
<thead>
<tr class="header">
<th>输入</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>2,3</td>
<td>True</td>
</tr>
<tr class="even">
<td>4,8</td>
<td>False</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    m = eval(input(<span class="string">"输入m:\n"</span>))</span><br><span class="line">    n = eval(input(<span class="string">"输入n:\n"</span>))  </span><br><span class="line">    <span class="keyword">if</span> (m &lt;= <span class="number">1</span> <span class="keyword">or</span> n &lt;= <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>   </span><br><span class="line">    <span class="keyword">if</span> m &lt; n:</span><br><span class="line">        m, n = n, m       </span><br><span class="line">    <span class="keyword">return</span> m % n</span><br><span class="line">print(bool(func1()))</span><br></pre></td></tr></table></figure>
<p>###2. 一个整数列表L=[a1, a2, …, an]中，如果一对数(ai, aj)满足ai&gt;aj 且 i&lt;j，那么这对数就称为一个逆序，列表L中逆序的数量称为逆序数。求一个整数列表L的 ==逆序数==。</p>
<table>
<thead>
<tr class="header">
<th>相关说明</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>输入条件</td>
<td>列表中的元素都是整数</td>
</tr>
<tr class="even">
<td>输出要求</td>
<td>如果L为空 或者 L中只有一个元素，返回0，否则返回L的逆序数。</td>
</tr>
<tr class="odd">
<td>其它要求</td>
<td>将代码写入函数func2</td>
</tr>
</tbody>
</table>
<p>测试用例：</p>
<table>
<thead>
<tr class="header">
<th>输入</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>[4,3,2,1]</td>
<td>6</td>
</tr>
<tr class="even">
<td>[1,3,2,4]</td>
<td>1</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">()</span>:</span></span><br><span class="line">    li = list(eval(input(<span class="string">"输入列表: "</span>)))  </span><br><span class="line">    Len = len(li)</span><br><span class="line">    cnt = <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, Len):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, Len):</span><br><span class="line">            <span class="keyword">if</span> (li[i] &gt; li[j]):</span><br><span class="line">                cnt = cnt + <span class="number">1</span>  </span><br><span class="line">    print(cnt)    </span><br><span class="line">fun2()</span><br></pre></td></tr></table></figure>
<p>###3. ==矩阵相乘==：</p>
<ul>
<li><strong>输入两个整数类型的 矩阵mat1（m行d列）和 mat2（d行n列）.</strong></li>
<li><strong>返回 矩阵相乘后 的结果 mat1 * mat2（m行n列）。矩阵 均用二维列表进行表示。</strong></li>
</ul>
<table>
<thead>
<tr class="header">
<th></th>
<th style="text-align: left;">相关说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>输入条件</td>
<td style="text-align: left;">两个矩阵分别严格满足 m*d 和 d*n 的形状（m&gt;=1, d&gt;=1, n&gt;=1，具体数值需要根据输入确定），矩阵中的元素均为整数。</td>
</tr>
<tr class="even">
<td>输出要求</td>
<td style="text-align: left;">返回相乘后的矩阵，用二维列表表示，每一个元素均为整数</td>
</tr>
<tr class="odd">
<td>其他要求</td>
<td style="text-align: left;">将代码写入函数 func3</td>
</tr>
</tbody>
</table>
<p>测试用例：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">输入</th>
<th style="text-align: center;">返回</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">[[1,2]] [[1],[2]]</td>
<td style="text-align: center;">[[5]]</td>
</tr>
<tr class="even">
<td style="text-align: center;">[[1,2],[1,3]] [[1,1],[1,0]]</td>
<td style="text-align: center;">[[3,1],[4,1]]</td>
</tr>
</tbody>
</table>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">matrixMul</span><span class="params">(A, B)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(A[<span class="number">0</span>]) == len(B):  <span class="comment"># A列数=B行数</span></span><br><span class="line">        res = [[<span class="number">0</span>] * len(B[<span class="number">0</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A))]  <span class="comment"># 生成 A行 x B列 的 0矩阵</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(B[<span class="number">0</span>])):                  </span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(len(B)):                  <span class="comment"># (A列)B行</span></span><br><span class="line">                    res[i][j] += A[i][k] * B[k][j]       <span class="comment"># 矩阵乘法</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> (<span class="string">"输入矩阵有误!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun3</span><span class="params">()</span>:</span></span><br><span class="line">    mat1 = eval(input(<span class="string">"输入矩阵mat1:"</span>))</span><br><span class="line">    mat2 = eval(input(<span class="string">"输入矩阵mat2:"</span>))</span><br><span class="line">    result = matrixMul(mat1, mat2)</span><br><span class="line">    <span class="comment"># 矩阵乘法 结果</span></span><br><span class="line">    print(result)</span><br><span class="line">    </span><br><span class="line">fun3()</span><br></pre></td></tr></table></figure>
<p>###4. 一维列表转成二维列表： 输入一个长度为 n*n 的一维列表， 返回一个n行n列的二维列表。</p>
<table>
<thead>
<tr class="header">
<th>相关说明</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>输入条件</td>
<td>一维列表能保证长度是 **n*n** (n&gt;=1，具体数值需要根据输入确定)，且每个元素为整型。</td>
</tr>
<tr class="even">
<td>输出要求</td>
<td>转换后的二维列表</td>
</tr>
<tr class="odd">
<td>其它要求</td>
<td>将代码写入函数 func4</td>
</tr>
</tbody>
</table>
<p>测试用例：</p>
<table>
<thead>
<tr class="header">
<th>输入</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>[1]</td>
<td>[[1]]</td>
</tr>
<tr class="even">
<td>[2,1,3,4]</td>
<td>[[2,1],[3,4]]</td>
</tr>
</tbody>
</table>
<p><strong>简易代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.reshape([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>], [<span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">Out[<span class="number">88</span>]: </span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br></pre></td></tr></table></figure>
<p><strong>详细实现：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun4</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 输入数据, 例如: [2,1,4,5]</span></span><br><span class="line">    li = eval(input(<span class="string">"输入一个列表:"</span>))</span><br><span class="line">    print(<span class="string">"list1:"</span>, li)</span><br><span class="line">    </span><br><span class="line">    cnt = len(li)</span><br><span class="line">    print(<span class="string">"长度数目n*n: "</span>, cnt)</span><br><span class="line">    </span><br><span class="line">    n = int(math.sqrt(cnt))    <span class="comment"># n x n</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 生成 nxn 的 空矩阵</span></span><br><span class="line">    res = [[] * n <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">            <span class="comment"># 添加第i行,j列元素</span></span><br><span class="line">            res[i].append(li[i * n + j])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">res = fun4()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<p>###5. 统计字符串</p>
<ul>
<li><p><strong>给定一个字符串，包含了若干个以 ==空格分开== 的单词.</strong></p></li>
<li><strong>统计 其中每个单词出现的次数，以 列表的形式 返回其中 出现 次数最多的三个单词</strong>。</li>
<li><p><strong>三者按照出现次数 ==降序排序==，当出现次数相同时，对 单词 按照字典序降序排序。</strong></p></li>
<li><p><strong>如果不足三个单词，则按照上述规则排序后全部返回。</strong></p></li>
</ul>
<table>
<thead>
<tr class="header">
<th>相关说明</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>输入条件</td>
<td>一个只包括西文字符的字符串。</td>
</tr>
<tr class="even">
<td>输出要求</td>
<td>返回一个元素是字符串的列表</td>
</tr>
<tr class="odd">
<td>其它要求</td>
<td>将代码写入函数func5</td>
</tr>
</tbody>
</table>
<p>测试用例：</p>
<table>
<thead>
<tr class="header">
<th>输入</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>'hello hi hello apple'</td>
<td>['hello', 'hi', 'apple']</td>
</tr>
<tr class="even">
<td>'a'</td>
<td>['a']</td>
</tr>
</tbody>
</table>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 统计单词出现次数</span></span><br><span class="line"><span class="comment"># 2. 以列表的形式 返回其中 出现次数最多的三个单词</span></span><br><span class="line"><span class="comment"># 3. 三者按照出现次数 降序排序。【次数相同，对单词按照字典序降序排序】</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计单词出现次数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(features)</span>:</span></span><br><span class="line">    <span class="comment"># 生成值为1的空字典</span></span><br><span class="line">    model = collections.defaultdict(int)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> features:</span><br><span class="line">        model[f] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun5</span><span class="params">()</span>:</span></span><br><span class="line">    text = input(<span class="string">"输入字符串: "</span>)  <span class="comment"># 例: i love python</span></span><br><span class="line">    print(text)</span><br><span class="line">    freq = train(text.split())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历 freq</span></span><br><span class="line">    print(<span class="string">"\n打印字典: "</span>)</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> freq.items():</span><br><span class="line">        print(key, value)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"\n打印排序后结果:"</span>)</span><br><span class="line">    <span class="comment"># 按value排序(降序)，如果value相同则按key排序(字典序升序)</span></span><br><span class="line">    freq = sorted(freq.items(), key=<span class="keyword">lambda</span> x:(x[<span class="number">1</span>], x[<span class="number">0</span>]), reverse=<span class="literal">True</span>)</span><br><span class="line">    print(dict(freq))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将单词添加到列表</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> freq[:<span class="number">3</span>]:</span><br><span class="line">        res.append(key[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出 自动</span></span><br><span class="line">    print(res)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    fun5()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    fun5()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输入字符串: hello hi hello apple</span><br><span class="line">hello hi hello apple</span><br><span class="line"></span><br><span class="line">打印字典: </span><br><span class="line">hello <span class="number">2</span></span><br><span class="line">hi <span class="number">1</span></span><br><span class="line">apple <span class="number">1</span></span><br><span class="line"></span><br><span class="line">打印排序后结果:</span><br><span class="line">&#123;<span class="string">'hello'</span>: <span class="number">2</span>, <span class="string">'hi'</span>: <span class="number">1</span>, <span class="string">'apple'</span>: <span class="number">1</span>&#125;</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'hi'</span>, <span class="string">'apple'</span>]</span><br></pre></td></tr></table></figure>
<p>或者代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func5</span><span class="params">(txt)</span>:</span></span><br><span class="line">    counts = &#123;&#125;</span><br><span class="line">    ls = txt.split()</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> ls:</span><br><span class="line">        counts[word] = counts.get(word,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">    items = list(counts.items())</span><br><span class="line">    items.sort(key=<span class="keyword">lambda</span> x:(x[<span class="number">1</span>],x[<span class="number">0</span>]),reverse=<span class="literal">True</span>)</span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(items)):</span><br><span class="line">        lst.append(items[i][<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> lst</span><br></pre></td></tr></table></figure>
<p>###6. Jaccard系数</p>
<ul>
<li><p><strong>仅包含 ==小写字母== 的两个单词 S 和 T 的 Jaccard系数（记为J）由如下三个统计量来确定：</strong></p></li>
<li><p><strong>a：在两个单词中，都出现的字母的个数</strong></p></li>
<li><p><strong>b：在S中出现，但没有在T中出现的字母的个数</strong></p></li>
<li><p><strong>c：在T中出现但没有在S中出现的字母的个数</strong></p></li>
<li><p><strong>那么 J = a / (a + b + c)。给定两个单词S和T，求确定其Jaccard系数的三个统计量a,b,c。</strong></p></li>
</ul>
<table>
<thead>
<tr class="header">
<th>相关说明</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>输入条件</td>
<td>两个仅包含小写字母的单词</td>
</tr>
<tr class="even">
<td>输出要求</td>
<td>以元组形式返回三个统计量，即(a,b,c)</td>
</tr>
<tr class="odd">
<td>其它要求</td>
<td>将代码写入函数func6</td>
</tr>
</tbody>
</table>
<p>测试用例：</p>
<table>
<thead>
<tr class="header">
<th>输入</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>‘his’, ‘she’</td>
<td>(2,1,1)</td>
</tr>
<tr class="even">
<td>‘hello, ‘python’</td>
<td>(2,2,4)</td>
</tr>
</tbody>
</table>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 仅包含 小写字母 的两个单词 S 和 T 的 Jaccard系数（记为J）由如下三个统计量来确定：</span></span><br><span class="line"><span class="comment"># a：在两个单词中，都出现的字母的个数</span></span><br><span class="line"><span class="comment"># b：在S中出现，但没有在T中出现的字母的个数     len(S) - a</span></span><br><span class="line"><span class="comment"># c：在T中出现，但没有在S中出现的字母的个数     len(T) - a</span></span><br><span class="line"><span class="comment"># 那么J = a / (a + b + c)。给定两个单词S和T  </span></span><br><span class="line"><span class="comment"># 求确定其Jaccard系数的三个统计量a, b, c。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun6</span><span class="params">()</span>:</span></span><br><span class="line">    S = input(<span class="string">"输入单词S: "</span>)</span><br><span class="line">    T = input(<span class="string">"输入单词T: "</span>)</span><br><span class="line">    <span class="comment"># 分离字符 以及 生成集合[按字典序排序]</span></span><br><span class="line">    sli = re.findall(<span class="string">'[a-z]'</span>, S)</span><br><span class="line">    slist = list(set(sli))</span><br><span class="line">    tli = re.findall(<span class="string">'[a-z]'</span>, T)</span><br><span class="line">    tlist = list(set(tli))</span><br><span class="line">    </span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(slist)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, len(tlist)):</span><br><span class="line">            <span class="keyword">if</span> slist[i] == tlist[j]:</span><br><span class="line">                a = a + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    b = len(slist) - a</span><br><span class="line">    c = len(tlist) - a</span><br><span class="line">    print((a, b, c))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    fun6()   </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>###7. 统计最多的字符次数</p>
<ul>
<li><p><strong>统计一个 非空字符串 中 出现 ==次数最多 的字符== 及其 ==出现次数==。</strong></p></li>
<li><p><strong>其中英语字母不区分大小写，==全部统计为大写字母==， 如 ’a’ 和 ’A’ 在计数时进行合并为’A’。</strong></p></li>
<li><p><strong>结果 以 ==包含字符== 和 ==对应次数== 的列表形式 进行返回。</strong></p></li>
<li><p><strong>数据中 不存在 并列最多的情况，该情况不需要考虑</strong>。</p></li>
</ul>
<table>
<thead>
<tr class="header">
<th>相关说明</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>输入条件</td>
<td>能保证目标字符串非空、且其中不存在出现次数并列最多的字符</td>
</tr>
<tr class="even">
<td>输出要求</td>
<td>结果以包含字符和对应次数的列表形式进行返回。</td>
</tr>
<tr class="odd">
<td>其它要求</td>
<td>将代码写入函数 func7</td>
</tr>
</tbody>
</table>
<p>测试用例：</p>
<table>
<thead>
<tr class="header">
<th>输入</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>'1aA'</td>
<td>['A',2]</td>
</tr>
<tr class="even">
<td>'a'</td>
<td>['A',1]</td>
</tr>
</tbody>
</table>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计一个非空字符串中</span></span><br><span class="line"><span class="comment"># 1. 出现 次数最多的字符 及其 出现次数</span></span><br><span class="line"><span class="comment"># 2. 全部统计为大写字母</span></span><br><span class="line"><span class="comment"># 3. 结果 [字符, 对应次数]</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func7</span><span class="params">()</span>:</span></span><br><span class="line">    s = input(<span class="string">"输入一个字符串: "</span>)</span><br><span class="line">    <span class="comment"># 字母转大写</span></span><br><span class="line">    sli = list(s.upper())</span><br><span class="line">    print(sli)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 统计列表元素的 频率</span></span><br><span class="line">    sli = [(i, sli.count(i)) <span class="keyword">for</span> i <span class="keyword">in</span> sli]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 去重后，排序，返回列表</span></span><br><span class="line">    sort_sli = sorted(set(sli), key=<span class="keyword">lambda</span> x:-x[<span class="number">1</span>])</span><br><span class="line">    sort_sli = [list(i) <span class="keyword">for</span> i <span class="keyword">in</span> sort_sli]</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"\n排序后去重的列表: "</span>, sort_sli)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"\n次数最多: "</span>, sort_sli[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 转换成字典: &#123;'A': 5, 'D': 2, '1': 1, 'B': 1, 'G': 1&#125;</span></span><br><span class="line">    print(dict(sort_sli))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    func7()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输入一个字符串: <span class="number">1231</span>AAAsdbafg</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'1'</span>, <span class="string">'A'</span>, <span class="string">'A'</span>, <span class="string">'A'</span>, <span class="string">'S'</span>, <span class="string">'D'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>]</span><br><span class="line"></span><br><span class="line">排序后去重的列表:  [[<span class="string">'A'</span>, <span class="number">4</span>], [<span class="string">'1'</span>, <span class="number">2</span>], [<span class="string">'B'</span>, <span class="number">1</span>], [<span class="string">'2'</span>, <span class="number">1</span>], [<span class="string">'F'</span>, <span class="number">1</span>], [<span class="string">'D'</span>, <span class="number">1</span>], [<span class="string">'3'</span>, <span class="number">1</span>], [<span class="string">'S'</span>, <span class="number">1</span>], [<span class="string">'G'</span>, <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">次数最多:  [<span class="string">'A'</span>, <span class="number">4</span>]</span><br><span class="line">&#123;<span class="string">'A'</span>: <span class="number">4</span>, <span class="string">'1'</span>: <span class="number">2</span>, <span class="string">'B'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">1</span>, <span class="string">'F'</span>: <span class="number">1</span>, <span class="string">'D'</span>: <span class="number">1</span>, <span class="string">'3'</span>: <span class="number">1</span>, <span class="string">'S'</span>: <span class="number">1</span>, <span class="string">'G'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>
<p>###8. 数字和平均值</p>
<ul>
<li><p><strong>一个字符串中存在多个正整数.</strong></p></li>
<li><p><strong>请提取出 ==位数在[3,5]== 之间的所有正整数，构成一个列表</strong></p></li>
<li><p><strong>对此列表按照 ==数字和平均值== （各位数字的总和/位数）进行 ==降序排序==</strong>， <strong>并返回排序结果列表。</strong></p></li>
<li><p><strong>==数字和平均值== 就是 各位数字的总和除以位数，例如2345的数字和平均值=(2+3+4+5)/4=3.5，12的数字和平均值=(1+2)/2=1.5。</strong></p></li>
</ul>
<table>
<thead>
<tr class="header">
<th>相关说明</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>输入条件</td>
<td>存在多个正整数的字符串</td>
</tr>
<tr class="even">
<td>输出要求</td>
<td>结果以满足要求的列表形式进行返回。如原字符串中不存在满足条件的正整数，返回None</td>
</tr>
<tr class="odd">
<td>其它要求</td>
<td>将代码写入函数func8</td>
</tr>
</tbody>
</table>
<p>测试用例：</p>
<table>
<thead>
<tr class="header">
<th>输入</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>'123a4567 1'</td>
<td>[4567,123]</td>
</tr>
<tr class="even">
<td>'1234'</td>
<td>[1234]</td>
</tr>
</tbody>
</table>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumAve</span><span class="params">(x)</span>:</span></span><br><span class="line">    tmp = x</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> tmp:</span><br><span class="line">        res += tmp%<span class="number">10</span></span><br><span class="line">        tmp = int(tmp / <span class="number">10</span>)</span><br><span class="line">        cnt = cnt + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res / cnt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func8</span><span class="params">()</span>:</span></span><br><span class="line">    num = input(<span class="string">"输入字符串:"</span>)</span><br><span class="line">    <span class="comment"># 注意 [0-9]&#123;3,5&#125; 不要乱加空格，否则出错</span></span><br><span class="line">    li = re.findall(<span class="string">'[0-9]+'</span>, num)</span><br><span class="line">    print(li)</span><br><span class="line">    li = [int(elem) <span class="keyword">for</span> elem <span class="keyword">in</span> li <span class="keyword">if</span> len(elem) &gt;= <span class="number">3</span> <span class="keyword">and</span> len(elem) &lt;= <span class="number">5</span>]</span><br><span class="line">    print(li)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#    print(sumAve(2345))</span></span><br><span class="line">    <span class="comment"># 按照 数字和平均值 排序</span></span><br><span class="line">    li.sort(key=<span class="keyword">lambda</span> x:sumAve(x), reverse=<span class="literal">True</span>)</span><br><span class="line">    print(li)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    func8()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输入字符串:<span class="number">123</span>asd235 <span class="number">43</span> sdg535 <span class="number">35</span> <span class="number">345</span></span><br><span class="line">[<span class="number">123</span>, <span class="number">235</span>, <span class="number">535</span>, <span class="number">345</span>]</span><br><span class="line">[<span class="number">535</span>, <span class="number">345</span>, <span class="number">235</span>, <span class="number">123</span>]</span><br></pre></td></tr></table></figure>
<h2 id="苏大真题2005-2019">苏大真题[2005-2019]</h2>
<p>###2005. 把一个数表示成若干个素数的和.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    top = int(math.sqrt(num))</span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= top:</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">res = []</span><br><span class="line"><span class="comment"># 从大到小 继续筛选</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_prime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> is_prime(num):</span><br><span class="line"><span class="comment">#        print(num)</span></span><br><span class="line">        res.append(num)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num, <span class="number">1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> (is_prime(i) <span class="keyword">and</span> num - i &gt; <span class="number">1</span>):</span><br><span class="line">            res.append(i)</span><br><span class="line">            split_prime(num - i)</span><br><span class="line">            <span class="keyword">return</span>  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">faction_prime</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        num = int(input())</span><br><span class="line">        split_prime(num)</span><br><span class="line">        print(res)</span><br><span class="line">        res.clear()</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    faction_prime()</span><br><span class="line">           </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"><span class="number">6</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line"><span class="number">7</span></span><br><span class="line">[<span class="number">7</span>]</span><br><span class="line"><span class="number">22</span></span><br><span class="line">[<span class="number">19</span>, <span class="number">3</span>]</span><br><span class="line"><span class="number">45</span></span><br><span class="line">[<span class="number">43</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> [n%d <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">2</span>, n)]</span><br></pre></td></tr></table></figure>
<p>###2005.2 统计篇文章中各==英文字母==的个数，并排序.</p>
<p>2005_2.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Mr. Sherlock Holmes, who was usually very late <span class="keyword">in</span> the mornings, </span><br><span class="line">sort which <span class="keyword">is</span> known <span class="keyword">as</span> a <span class="string">"Penang lawyer."</span> Just under the head was a</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">words</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> re.findall(<span class="string">'[a-z]'</span>, text.lower())</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(features)</span>:</span></span><br><span class="line">    model = &#123;&#125;</span><br><span class="line"><span class="comment">#    print(features)</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> features:</span><br><span class="line">        model[f] = model.get(f, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment">#    t = open("./file/2005_2.txt").read()</span></span><br><span class="line"><span class="comment">#    print(t)</span></span><br><span class="line"><span class="comment">#    print(words(t))</span></span><br><span class="line">    statistic = train(words(open(<span class="string">"./file/2005_2.txt"</span>).read()))</span><br><span class="line">    statistic = list(statistic.items())</span><br><span class="line">    print(statistic)</span><br><span class="line">    statistic.sort(key=<span class="keyword">lambda</span> x:(x[<span class="number">1</span>], x[<span class="number">0</span>]), reverse=<span class="literal">True</span>)</span><br><span class="line">    print(dict(statistic))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="string">'m'</span>, <span class="number">3</span>), (<span class="string">'r'</span>, <span class="number">7</span>), (<span class="string">'s'</span>, <span class="number">10</span>), (<span class="string">'h'</span>, <span class="number">8</span>), (<span class="string">'e'</span>, <span class="number">10</span>), (<span class="string">'l'</span>, <span class="number">6</span>), (<span class="string">'o'</span>, <span class="number">6</span>), (<span class="string">'c'</span>, <span class="number">2</span>), (<span class="string">'k'</span>, <span class="number">2</span>), (<span class="string">'w'</span>, <span class="number">6</span>), (<span class="string">'a'</span>, <span class="number">10</span>), (<span class="string">'u'</span>, <span class="number">4</span>), (<span class="string">'y'</span>, <span class="number">3</span>), (<span class="string">'v'</span>, <span class="number">1</span>), (<span class="string">'t'</span>, <span class="number">5</span>), (<span class="string">'i'</span>, <span class="number">4</span>), (<span class="string">'n'</span>, <span class="number">8</span>), (<span class="string">'g'</span>, <span class="number">2</span>), (<span class="string">'p'</span>, <span class="number">1</span>), (<span class="string">'j'</span>, <span class="number">1</span>), (<span class="string">'d'</span>, <span class="number">2</span>)]</span><br><span class="line">&#123;<span class="string">'s'</span>: <span class="number">10</span>, <span class="string">'e'</span>: <span class="number">10</span>, <span class="string">'a'</span>: <span class="number">10</span>, <span class="string">'n'</span>: <span class="number">8</span>, <span class="string">'h'</span>: <span class="number">8</span>, <span class="string">'r'</span>: <span class="number">7</span>, <span class="string">'w'</span>: <span class="number">6</span>, <span class="string">'o'</span>: <span class="number">6</span>, <span class="string">'l'</span>: <span class="number">6</span>, <span class="string">'t'</span>: <span class="number">5</span>, <span class="string">'u'</span>: <span class="number">4</span>, <span class="string">'i'</span>: <span class="number">4</span>, <span class="string">'y'</span>: <span class="number">3</span>, <span class="string">'m'</span>: <span class="number">3</span>, <span class="string">'k'</span>: <span class="number">2</span>, <span class="string">'g'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">2</span>, <span class="string">'v'</span>: <span class="number">1</span>, <span class="string">'p'</span>: <span class="number">1</span>, <span class="string">'j'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>
<p>###2006. 找出 100 到 1000 内的不含 9 的素数，存到 result 文件中.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    top = math.sqrt(num)</span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> i &lt;= top:</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不含9</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(num)</span>:</span></span><br><span class="line">    a = list(str(num))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'9'</span> <span class="keyword">not</span> <span class="keyword">in</span> a</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filterPrime</span><span class="params">(start, end)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end + <span class="number">1</span>) <span class="keyword">if</span> (is_prime(i) <span class="keyword">and</span> judge(i))]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save2file</span><span class="params">(text)</span>:</span></span><br><span class="line">    print(text)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./file/2006.txt'</span>, <span class="string">'w+'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    res = filterPrime(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">    save2file(str(res))</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>2006.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">101</span>, <span class="number">103</span>, <span class="number">107</span>, <span class="number">113</span>, <span class="number">127</span>, <span class="number">131</span>, <span class="number">137</span>, <span class="number">151</span>, <span class="number">157</span>, <span class="number">163</span>, <span class="number">167</span>, <span class="number">173</span>, <span class="number">181</span>, <span class="number">211</span>, <span class="number">223</span>, <span class="number">227</span>, <span class="number">233</span>, <span class="number">241</span>, <span class="number">251</span>, <span class="number">257</span>, <span class="number">263</span>, <span class="number">271</span>, <span class="number">277</span>, <span class="number">281</span>, <span class="number">283</span>, <span class="number">307</span>, <span class="number">311</span>, <span class="number">313</span>, <span class="number">317</span>, <span class="number">331</span>, <span class="number">337</span>, <span class="number">347</span>, <span class="number">353</span>, <span class="number">367</span>, <span class="number">373</span>, <span class="number">383</span>, <span class="number">401</span>, <span class="number">421</span>, <span class="number">431</span>, <span class="number">433</span>, <span class="number">443</span>, <span class="number">457</span>, <span class="number">461</span>, <span class="number">463</span>, <span class="number">467</span>, <span class="number">487</span>, <span class="number">503</span>, <span class="number">521</span>, <span class="number">523</span>, <span class="number">541</span>, <span class="number">547</span>, <span class="number">557</span>, <span class="number">563</span>, <span class="number">571</span>, <span class="number">577</span>, <span class="number">587</span>, <span class="number">601</span>, <span class="number">607</span>, <span class="number">613</span>, <span class="number">617</span>, <span class="number">631</span>, <span class="number">641</span>, <span class="number">643</span>, <span class="number">647</span>, <span class="number">653</span>, <span class="number">661</span>, <span class="number">673</span>, <span class="number">677</span>, <span class="number">683</span>, <span class="number">701</span>, <span class="number">727</span>, <span class="number">733</span>, <span class="number">743</span>, <span class="number">751</span>, <span class="number">757</span>, <span class="number">761</span>, <span class="number">773</span>, <span class="number">787</span>, <span class="number">811</span>, <span class="number">821</span>, <span class="number">823</span>, <span class="number">827</span>, <span class="number">853</span>, <span class="number">857</span>, <span class="number">863</span>, <span class="number">877</span>, <span class="number">881</span>, <span class="number">883</span>, <span class="number">887</span>]</span><br></pre></td></tr></table></figure>
<p>###2007. 素数</p>
<ul>
<li><p><strong>把 10 到 1000 之间满足以下两个条件的数，存到 result.txt 文件中.</strong></p></li>
<li><p><strong>是素数.</strong></p></li>
<li><p><strong>它的反数也是素数，如： 123 的反数是 321 .</strong></p></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把10 到 1000 之间满足以下两个条件的数，存搭配result.txt文件中</span></span><br><span class="line"><span class="comment"># 1. 是素数</span></span><br><span class="line"><span class="comment"># 2. 它的反数也是素数，如：123的反数是321</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    top = math.sqrt(num)</span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> i &lt;= top:</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 123 的 反数是 321</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseNum</span><span class="params">(num)</span>:</span></span><br><span class="line">    res = int(str(num)[::<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选素数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_prime</span><span class="params">(start, end)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end + <span class="number">1</span>) <span class="keyword">if</span> is_prime(i) <span class="keyword">and</span> is_prime(reverseNum(i))]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveFile</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./file/2007.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(str(text))</span><br><span class="line">              </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    res = filter_prime(<span class="number">10</span>, <span class="number">1000</span>)</span><br><span class="line">    print(res)</span><br><span class="line">    saveFile(res)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>2007.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">107</span>, <span class="number">113</span>, <span class="number">131</span>, <span class="number">149</span>, <span class="number">151</span>, <span class="number">157</span>, <span class="number">167</span>, <span class="number">179</span>, <span class="number">181</span>, <span class="number">191</span>, <span class="number">199</span>, <span class="number">311</span>, <span class="number">313</span>, <span class="number">337</span>, <span class="number">347</span>, <span class="number">353</span>, <span class="number">359</span>, <span class="number">373</span>, <span class="number">383</span>, <span class="number">389</span>, <span class="number">701</span>, <span class="number">709</span>, <span class="number">727</span>, <span class="number">733</span>, <span class="number">739</span>, <span class="number">743</span>, <span class="number">751</span>, <span class="number">757</span>, <span class="number">761</span>, <span class="number">769</span>, <span class="number">787</span>, <span class="number">797</span>, <span class="number">907</span>, <span class="number">919</span>, <span class="number">929</span>, <span class="number">937</span>, <span class="number">941</span>, <span class="number">953</span>, <span class="number">967</span>, <span class="number">971</span>, <span class="number">983</span>, <span class="number">991</span>]</span><br></pre></td></tr></table></figure>
<p>###2008. 文件读取字符串，排除The</p>
<ul>
<li><p><strong>用 IE 从 FTP 上下载 org.dat ，并保存在 D 盘的根目录中.</strong></p></li>
<li><p><strong>此文件中按文本方式存放了一段其他文章，其中有若干长度小于 15 的英文单词，单词之间用空格分开，无其他符号.</strong></p></li>
<li><p><strong>顺序读取这段文章的不同的单词(大小写敏感)，同时在 读取的过程中 ==排除所有的单词 THE== 以及变形，即这些单词不能出现在读取的结果中.</strong></p></li>
<li><p><strong>将读取的所有单词的首字母转大写后，输出 D 根目录下 new.txt ，每个单词一行.</strong></p></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">words</span><span class="params">(text : str)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> re.findall(<span class="string">'[a-zA-Z]+'</span>, text)</span><br><span class="line"><span class="comment">#    return text.split()                  # 只匹配字符串</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"./file/2008.dat"</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        wds = f.read()</span><br><span class="line">        </span><br><span class="line">    wds = words(wds)</span><br><span class="line">    print(wds)</span><br><span class="line">    </span><br><span class="line">    wds = [i.capitalize() <span class="keyword">for</span> i <span class="keyword">in</span> wds <span class="keyword">if</span> i.lower() != <span class="string">"the"</span>]</span><br><span class="line">    print(<span class="string">"\n"</span>, wds)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"./file/2008_new.txt"</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> wds:</span><br><span class="line">            f.write(word+<span class="string">'\n'</span>)</span><br><span class="line">     </span><br><span class="line">train()</span><br></pre></td></tr></table></figure>
<p>2008.dat</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">The constructor <span class="keyword">is</span> used to initialize the object The destructor <span class="keyword">is</span> used to delete the Object the</span><br><span class="line">calling seqence of constructor <span class="keyword">is</span> opposite to the calling sequence of destructor</span><br></pre></td></tr></table></figure>
<p>2008_new.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Constructor</span><br><span class="line">Is</span><br><span class="line">Used</span><br><span class="line">To</span><br><span class="line">略</span><br></pre></td></tr></table></figure>
<p>###2009. 文件读取字符串，转数字【八进制/十进制】</p>
<ul>
<li>用 IE 浏览器从 FTP 上下载 org.dat ，并保存在 D 盘的根目录下.</li>
<li>此文件中按文本方式存放了一段其他文章，其中有 若干长度小于 15 的 <strong>十进制 </strong>或 <strong>八进制</strong> 数字，数字之间用 <strong>,</strong> 分开，数字内部 存在且 仅存在 <strong>空格</strong>.</li>
<li>八进制数 <strong>以起始位 0</strong> 作为标示 与 十进制数区分.</li>
<li>顺序读取这些数字 将他们 <strong>转变为十进制数</strong> 后按 <strong>从大到小</strong> 的顺序排序后，输出到 D 盘根目录下 new.txt ，每个数字一行. eg ： <em>235</em>,34_<em>2,<em>043_1</em>,1_3 ，分别是：十进制 235 ，十进制 342 ，八进制 431 ，十进制 13 ， </em> 代表 空格.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int10</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">0</span>] == <span class="string">'0'</span>:</span><br><span class="line">        <span class="keyword">return</span> int(x, <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">return</span> int(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"./file/org.dat"</span>, <span class="string">'r+'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        wds = f.read()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 按照","分割字符串</span></span><br><span class="line">    words = wds.split(<span class="string">','</span>)</span><br><span class="line">    <span class="comment"># 去除空格, 数字字符串转化成10进制整数</span></span><br><span class="line">    words = [i.replace(<span class="string">" "</span>,<span class="string">""</span>) <span class="keyword">for</span> i <span class="keyword">in</span> words]</span><br><span class="line">    print(words)</span><br><span class="line">    </span><br><span class="line">    trans = list(map(int10, words))</span><br><span class="line">    trans.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">    print(trans)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./file/2009_new.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(str(trans))</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>org.dat</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">235</span> ,<span class="number">34</span>  <span class="number">2</span>, <span class="number">043</span> <span class="number">1</span> ,<span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>2009_new.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">342</span>, <span class="number">281</span>, <span class="number">235</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure>
<p>###2010. 读取二进制文件 以及筛选素数</p>
<ul>
<li><p>从 FTP 上下载 make.exe 和 org.dat ，运行 make.exe 输入准考证后三位</p></li>
<li><p>生成 data.txt 文件为==二进制编码== <strong>data.txt</strong> ，内存有 2048 个整数.</p></li>
<li><p>其中 前 <strong>n</strong> 个为非 0 数，后 <strong>2048 - n</strong> 个数为 0 ，将其读入数组，计算 <strong>非零数</strong> 的 <strong>个数</strong> n.</p></li>
<li><p>选出 n 个数中 的 <strong>最大数</strong> 和 <strong>最小数</strong>，选出 n 个数中 <strong>最大素数</strong>.</p></li>
<li><p>将 n 个数 <strong>从大到小排序</strong>，并 <strong>平均分成三段</strong> (若 n 非 3 的整数倍，则不考虑最后的 1-2 个数)，</p></li>
<li><p>选出中间段的最大数和最小数.</p></li>
</ul>
<p>数据:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0800</span> <span class="number">0000</span> <span class="number">0600</span> <span class="number">0000</span> <span class="number">0200</span> <span class="number">0000</span> <span class="number">1900</span> <span class="number">0000</span></span><br><span class="line"><span class="number">0500</span> <span class="number">0000</span> <span class="number">0200</span> <span class="number">0000</span> <span class="number">0300</span> <span class="number">0000</span> <span class="number">0900</span> <span class="number">0000</span></span><br><span class="line"><span class="number">0100</span> <span class="number">0000</span> <span class="number">0</span>d0a <span class="number">0000</span> <span class="number">0022</span> <span class="number">0000</span> <span class="number">000</span>c <span class="number">0000</span></span><br><span class="line"><span class="number">002</span>d <span class="number">0000</span> <span class="number">0053</span> <span class="number">0000</span> <span class="number">0066</span> <span class="number">0000</span> <span class="number">0007</span> <span class="number">0000</span></span><br><span class="line"><span class="number">0005</span> <span class="number">0000</span> <span class="number">000</span>d <span class="number">0000</span> <span class="number">004</span>f <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span></span><br><span class="line"><span class="number">00</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">26112</span> <span class="number">1</span></span><br><span class="line">数据数: <span class="number">16</span> [<span class="number">26112</span>, <span class="number">21248</span>, <span class="number">11520</span>, <span class="number">8704</span>, <span class="number">3072</span>, <span class="number">2573</span>, <span class="number">1792</span>, <span class="number">25</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">最大素数:  <span class="number">5</span></span><br><span class="line"><span class="number">2573</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    top = int(math.sqrt(num))</span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= top:</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i = i + <span class="number">1</span>        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    res = [random.randrange(<span class="number">0</span>, <span class="number">9999</span>, <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">16</span>)]</span><br><span class="line"><span class="comment">#    print(res)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#    with open('./file/2010.txt', 'rb+') as f:</span></span><br><span class="line"><span class="comment">#        for i in res:</span></span><br><span class="line"><span class="comment">#            s = struct.pack('i', i)</span></span><br><span class="line"><span class="comment">#            f.write(s)</span></span><br><span class="line">    len1 = len(res)</span><br><span class="line">    nums = []</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./file/2010.txt'</span>, <span class="string">'rb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len1):</span><br><span class="line">            data = f.read(<span class="number">4</span>)</span><br><span class="line">            elem = struct.unpack(<span class="string">'i'</span>, data)[<span class="number">0</span>]</span><br><span class="line">            nums.append(elem)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 按照 16进制 转换成 10进制        </span></span><br><span class="line">    nums.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">    print(nums[<span class="number">0</span>], nums[<span class="number">-1</span>])</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"数据数:"</span>, len1, nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="keyword">if</span> (is_prime(i)):</span><br><span class="line">            print(<span class="string">"最大素数: "</span>, i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    mid = nums[len1//<span class="number">3</span> : len1//<span class="number">3</span>*<span class="number">2</span>]</span><br><span class="line">    print(mid[<span class="number">0</span>], mid[<span class="number">-1</span>])         </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>###2011. 筛选素数</p>
<ul>
<li>输出 1000-9999 中满足以下条件的所有数：</li>
<li>该数是素数.</li>
<li><strong>十位数</strong> 和 <strong>个位数</strong> 组成的数是 <strong>素数</strong>， <strong>百位数</strong> 和 <strong>个位数</strong> 组成的数是 <strong>素数</strong>.</li>
<li><strong>个位数</strong> 和 <strong>百位数</strong> 组成的数是 <strong>素数</strong>，<strong>个位数</strong> 和 <strong>十位数</strong> 组成的数是 <strong>素数</strong>。 比如 1991 ，<strong>个位</strong> 和 <strong>十位</strong> 组成的数就是 19 .</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    top = int(math.sqrt(num))</span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= top:</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(num)</span>:</span></span><br><span class="line">    unit = num % <span class="number">10</span>             <span class="comment"># 个位</span></span><br><span class="line">    decade = (num // <span class="number">10</span>) % <span class="number">10</span>   <span class="comment"># 十位</span></span><br><span class="line">    hund = (num // <span class="number">100</span>) % <span class="number">10</span>    <span class="comment"># 百位</span></span><br><span class="line">    <span class="keyword">return</span> [unit, decade, hund]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">comb</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a * <span class="number">10</span> + b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_prime</span><span class="params">(start, end)</span>:</span></span><br><span class="line">    res = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(start, end + <span class="number">1</span>) <span class="keyword">if</span> (is_prime(i)) <span class="keyword">and</span></span><br><span class="line">           (is_prime(comb(judge(i)[<span class="number">1</span>], judge(i)[<span class="number">0</span>]))) <span class="keyword">and</span></span><br><span class="line">           (is_prime(comb(judge(i)[<span class="number">2</span>], judge(i)[<span class="number">0</span>]))) <span class="keyword">and</span></span><br><span class="line">           (is_prime(comb(judge(i)[<span class="number">0</span>], judge(i)[<span class="number">1</span>]))) <span class="keyword">and</span></span><br><span class="line">           (is_prime(comb(judge(i)[<span class="number">0</span>], judge(i)[<span class="number">2</span>]))) ] </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    res = filter_prime(<span class="number">1000</span>, <span class="number">9999</span>)</span><br><span class="line">    print(res)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1117</span>, <span class="number">1171</span>, <span class="number">1997</span>, <span class="number">2111</span>, <span class="number">2113</span>, <span class="number">2131</span>, <span class="number">2137</span>, <span class="number">2311</span>, <span class="number">2371</span>, <span class="number">2711</span>, <span class="number">2713</span>, <span class="number">2731</span>, <span class="number">2917</span>, <span class="number">3137</span>, <span class="number">3331</span>, <span class="number">3371</span>, <span class="number">3779</span>, <span class="number">3917</span>, <span class="number">4111</span>, <span class="number">4337</span>, <span class="number">4397</span>, <span class="number">4937</span>, <span class="number">5113</span>, <span class="number">5171</span>, <span class="number">5197</span>, <span class="number">5711</span>, <span class="number">5779</span>, <span class="number">6113</span>, <span class="number">6131</span>, <span class="number">6173</span>, <span class="number">6197</span>, <span class="number">6311</span>, <span class="number">6317</span>, <span class="number">6337</span>, <span class="number">6397</span>, <span class="number">6779</span>, <span class="number">6917</span>, <span class="number">6997</span>, <span class="number">7331</span>, <span class="number">7937</span>, <span class="number">8111</span>, <span class="number">8117</span>, <span class="number">8171</span>, <span class="number">8311</span>, <span class="number">8317</span>, <span class="number">8713</span>, <span class="number">8731</span>, <span class="number">8779</span>, <span class="number">9137</span>, <span class="number">9173</span>, <span class="number">9311</span>, <span class="number">9337</span>, <span class="number">9371</span>, <span class="number">9397</span>]</span><br></pre></td></tr></table></figure>
<p>###2012. 读取二进制文件 以及 左标</p>
<ul>
<li>从服务器上下载数据文件 org.dat 文件以 <strong>二进制方式</strong> 存放一系列整数，每个整数占 <strong>4 个字节</strong>.</li>
<li><p>从 第一个整数 开始，<strong>第一个整数</strong> 和 <strong>第二个整数</strong> 构成一个坐标点，以此类推，<strong>数据文件</strong> 中保存了 许多 <strong>坐标点数据</strong>.</p></li>
<li>规定处于 <strong>第一象限的坐标点</strong> 为 <strong>有效点</strong>，请问 数据文件 中 <strong>所有点的个数 n</strong> 为多少？ <strong>有效点的个数 k</strong> 为多少？</li>
<li>每个 <strong>有效点</strong> 与 <strong>坐标原点</strong> 构成一个的 <strong>矩形</strong>，请问 <strong>k 个有效点</strong> 与 <strong>坐标原点</strong> 构成的 <strong>k 个矩形</strong> 的 最小公共区域面积为多少？</li>
<li>寻找 <strong>有效点</strong> 中 符合下列条件的点：
<ul>
<li>以该点为 <strong>坐标原点</strong>， 其它 <strong>有效点</strong> ：
<ul>
<li>仍然是 <strong>有效点</strong>， 即 <strong>处于第一象限</strong> (不包括坐标轴上的点).</li>
<li>==输出这些点，对 所有有效点== 进行分组，每个有效点 有且只有 属于一个分组，==分组内的点== 符合下列规则：
<ul>
<li>若 对组内所有点的 x，坐标进行排序。</li>
<li>点 <strong>p1(x1, y1)</strong> 在点 <strong>p2(x2, y2)</strong> 后面，即 x1 &gt; x2 那么 y1 &gt; y2 ，请输出所有的分组。</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取未知数字个数的二进制文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFile</span><span class="params">(url)</span>:</span></span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'rb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = f.read(<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            elem = struct.unpack(<span class="string">'i'</span>, data)[<span class="number">0</span>]</span><br><span class="line">            ans.append(elem)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将读取到的数构成坐标</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">point</span><span class="params">(data)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    len_data = len(data)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len_data, <span class="number">2</span>):</span><br><span class="line">        comb = [data[i], data[i + <span class="number">1</span>]]</span><br><span class="line">        res.append(comb)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有效点的个数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validPoint</span><span class="params">(point)</span>:</span></span><br><span class="line">    res = [elem <span class="keyword">for</span> elem <span class="keyword">in</span> point <span class="keyword">if</span> (elem[<span class="number">0</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> elem[<span class="number">1</span>] &gt; <span class="number">0</span>)]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横坐标的最小值 和 纵坐标的最小值 组成的矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minSquare</span><span class="params">(point)</span>:</span></span><br><span class="line">    px, py = point[<span class="number">0</span>][<span class="number">0</span>], point[<span class="number">0</span>][<span class="number">1</span>] </span><br><span class="line">    len_p = len(point)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len_p):</span><br><span class="line">        <span class="keyword">if</span> px &gt; point[i][<span class="number">0</span>]:</span><br><span class="line">            px = point[i][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> py &gt; point[i][<span class="number">1</span>]:</span><br><span class="line">            py = point[i][<span class="number">1</span>]    </span><br><span class="line">    <span class="keyword">return</span> px * py</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 横坐标最小的同时纵坐标也是最小(取最小值的下标是否一致)，返回满足条件的点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minPoint</span><span class="params">(point)</span>:</span></span><br><span class="line">    minx, miny = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    len_p = len(point)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len_p):</span><br><span class="line">        <span class="keyword">if</span> point[minx][<span class="number">0</span>] &gt; point[i][<span class="number">0</span>]:</span><br><span class="line">            minx = i</span><br><span class="line">        <span class="keyword">if</span> point[miny][<span class="number">0</span>] &gt; point[i][<span class="number">1</span>]:</span><br><span class="line">            miny = i</span><br><span class="line">    <span class="keyword">if</span> minx == miny:</span><br><span class="line">        <span class="keyword">return</span> point[minx]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'不存在这样的点'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupX</span><span class="params">(point : list)</span>:</span></span><br><span class="line">    <span class="comment"># 先按坐标x轴升序排列</span></span><br><span class="line">    point.sort(key=<span class="keyword">lambda</span> x : x[<span class="number">0</span>])</span><br><span class="line">    print(point)</span><br><span class="line">    </span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    flag = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(point))]  <span class="comment"># 标记数组初始化为0</span></span><br><span class="line">    p_len = len(point)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(p_len):</span><br><span class="line">        <span class="keyword">if</span> flag[i] == <span class="number">0</span>:                   <span class="comment"># 首次被标记，归为下一个分组</span></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 组数:count</span></span><br><span class="line">            print(<span class="string">'\ncount = '</span>, count)</span><br><span class="line">            print(point[i], end=<span class="string">''</span>)</span><br><span class="line">            flag[i] = <span class="number">1</span>                    <span class="comment"># 标志着已经使用过</span></span><br><span class="line">            <span class="comment"># t 为 第 t 组</span></span><br><span class="line">            t = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, p_len):</span><br><span class="line">            <span class="keyword">if</span> (flag[j] == <span class="number">0</span>) <span class="keyword">and</span> (point[j][<span class="number">1</span>] &gt; point[t][<span class="number">1</span>]) <span class="keyword">and</span> (point[j][<span class="number">0</span>] &gt; point[t][<span class="number">0</span>]):</span><br><span class="line">                print(point[j], end=<span class="string">''</span>)</span><br><span class="line">                flag[j] = <span class="number">1</span></span><br><span class="line">                t = j            </span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    data = readFile(<span class="string">"./file/file_2012.txt"</span>)</span><br><span class="line"><span class="comment">#    print(data, "\n")</span></span><br><span class="line">    </span><br><span class="line">    p_point = point(data)</span><br><span class="line"><span class="comment">#    print(p_point)</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 有效点的个数</span></span><br><span class="line">    vapoint = validPoint(p_point)</span><br><span class="line">    print(vapoint)</span><br><span class="line">    print(<span class="string">"有效点的个数 = &#123;0&#125;\n"</span>.format(len(vapoint)))   </span><br><span class="line">    print(<span class="string">"最小公共区域面积 = &#123;0&#125;"</span>.format(minSquare(vapoint)))   </span><br><span class="line">    print(<span class="string">"符合条件的点: "</span>, minPoint(vapoint)) </span><br><span class="line">    groupX(vapoint)</span><br><span class="line">      </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[<span class="number">20</span>, <span class="number">9</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">8</span>, <span class="number">9</span>], [<span class="number">90</span>, <span class="number">2</span>], [<span class="number">6</span>, <span class="number">8</span>], [<span class="number">80</span>, <span class="number">3</span>], [<span class="number">20</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">22</span>, <span class="number">77</span>], [<span class="number">90</span>, <span class="number">10</span>], [<span class="number">8</span>, <span class="number">6</span>], [<span class="number">8</span>, <span class="number">90</span>], [<span class="number">77</span>, <span class="number">99</span>], [<span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">有效点的个数 = <span class="number">14</span></span><br><span class="line"></span><br><span class="line">最小公共区域面积 = <span class="number">1</span></span><br><span class="line">符合条件的点:  [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">6</span>, <span class="number">8</span>], [<span class="number">8</span>, <span class="number">9</span>], [<span class="number">8</span>, <span class="number">6</span>], [<span class="number">8</span>, <span class="number">90</span>], [<span class="number">8</span>, <span class="number">9</span>], [<span class="number">20</span>, <span class="number">9</span>], [<span class="number">20</span>, <span class="number">3</span>], [<span class="number">22</span>, <span class="number">77</span>], [<span class="number">77</span>, <span class="number">99</span>], [<span class="number">80</span>, <span class="number">3</span>], [<span class="number">90</span>, <span class="number">2</span>], [<span class="number">90</span>, <span class="number">10</span>]]</span><br><span class="line"></span><br><span class="line">count =  <span class="number">1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>][<span class="number">4</span>, <span class="number">3</span>][<span class="number">6</span>, <span class="number">8</span>][<span class="number">8</span>, <span class="number">9</span>][<span class="number">22</span>, <span class="number">77</span>][<span class="number">77</span>, <span class="number">99</span>]</span><br><span class="line">count =  <span class="number">2</span></span><br><span class="line">[<span class="number">8</span>, <span class="number">6</span>][<span class="number">20</span>, <span class="number">9</span>][<span class="number">90</span>, <span class="number">10</span>]</span><br><span class="line">count =  <span class="number">3</span></span><br><span class="line">[<span class="number">8</span>, <span class="number">90</span>]</span><br><span class="line">count =  <span class="number">4</span></span><br><span class="line">[<span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">count =  <span class="number">5</span></span><br><span class="line">[<span class="number">20</span>, <span class="number">3</span>]</span><br><span class="line">count =  <span class="number">6</span></span><br><span class="line">[<span class="number">80</span>, <span class="number">3</span>]</span><br><span class="line">count =  <span class="number">7</span></span><br><span class="line">[<span class="number">90</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>###2013. 图论：两顶点间存在长度为k的路径</p>
<p><strong>PathInput.txt</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line">[PVG, CAN]</span><br><span class="line">[CAN, PEK]</span><br><span class="line">[PVG, CTU]</span><br><span class="line">[CTU, DLC]</span><br><span class="line">[DLC, HAK]</span><br><span class="line">[HAK, LXA]</span><br></pre></td></tr></table></figure>
<p><strong>PathRequest.txt</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line">[PVG, DLC, <span class="number">2</span>]</span><br><span class="line">[PVG, LXA, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p><strong>Output.txt</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[PVG, DLC, YES]</span><br><span class="line">[PVG, LXA, NO]</span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 1. PVG -&gt; PEK</span></span><br><span class="line"><span class="comment"># 即：PVG -&gt; CAN -&gt; PEK</span></span><br><span class="line"><span class="comment"># PathInput.txt</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># [PVG, CAN]</span></span><br><span class="line"><span class="comment"># [CAN, PEK]</span></span><br><span class="line"><span class="comment"># [PVG, CTU]</span></span><br><span class="line"><span class="comment"># [CTU, DLC]</span></span><br><span class="line"><span class="comment"># [DLC, HAK]</span></span><br><span class="line"><span class="comment"># [HAK, LXA]</span></span><br><span class="line"><span class="comment"># PathRequest.txt</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># [PVG, DLC, 2]</span></span><br><span class="line"><span class="comment"># [PVG, LXA, 2]</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读文本文件内容，以换行分隔单词，返回字符串列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFile</span><span class="params">(url)</span>:</span> </span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'r+'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        wds = f.readlines()</span><br><span class="line">        <span class="keyword">return</span> wds</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两顶点间 存在 长度为k的路径</span></span><br><span class="line"><span class="comment"># countLine: Line的长度</span></span><br><span class="line"><span class="comment"># 递归判断起点为: start</span></span><br><span class="line"><span class="comment"># 终点为: end</span></span><br><span class="line"><span class="comment"># 长度为k的路径是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(Line, countLine, start, end, k)</span>:</span></span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 遍历所有 Line 的数据</span></span><br><span class="line">    <span class="comment"># [['PVG', 'CAN'], ['CAN', 'PEK'], ['PVG', 'CTU'], ['CTU', 'DLC'], ['DLC', 'HAK'], ['HAK', 'LXA']] </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(countLine):</span><br><span class="line">        <span class="comment"># 找到路径</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span> <span class="keyword">and</span> Line[i][<span class="number">0</span>] == start <span class="keyword">and</span> Line[i][<span class="number">1</span>] == end:</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> k &gt; <span class="number">0</span> <span class="keyword">and</span> Line[i][<span class="number">0</span>] == start <span class="keyword">and</span> Line[i][<span class="number">1</span>] != end:</span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">            <span class="comment"># 改变 起点             </span></span><br><span class="line">            flag = check(Line, countLine, Line[i][<span class="number">1</span>], end, k)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Line: Line的数据</span></span><br><span class="line"><span class="comment"># Path: Path的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeFile</span><span class="params">(url, Line, countLine, Path, countPath)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 操作次数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(countPath):</span><br><span class="line">            <span class="comment"># 起点, 终点, step=2</span></span><br><span class="line">            <span class="comment"># 两顶点间 存在 长度为k的路径</span></span><br><span class="line">            <span class="keyword">if</span> check(Line, countLine, Path[i][<span class="number">0</span>], Path[i][<span class="number">1</span>], Path[i][<span class="number">2</span>]):</span><br><span class="line">                f.write(<span class="string">'[&#123;0&#125;, &#123;1&#125;, Yes]\n'</span>.format(Path[i][<span class="number">0</span>], Path[i][<span class="number">1</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                f.write(<span class="string">'[&#123;0&#125;, &#123;1&#125;, No]\n'</span>.format(Path[i][<span class="number">0</span>], Path[i][<span class="number">1</span>]))   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    dataLine = readFile(<span class="string">'./file/file_2013_line.txt'</span>)</span><br><span class="line">    dataPath = readFile(<span class="string">'./file/file_2013_plan.txt'</span>)</span><br><span class="line">    countLine, countPath = int(dataLine[<span class="number">0</span>]), int(dataPath[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#    print(countLine, countPath)</span></span><br><span class="line">    </span><br><span class="line">    Line, Path = [], []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, countLine + <span class="number">1</span>):</span><br><span class="line">        Line.append([dataLine[i][<span class="number">1</span>:<span class="number">4</span>], dataLine[i][<span class="number">6</span>:<span class="number">9</span>]])</span><br><span class="line"><span class="comment">#        print(dataLine[i])</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, countPath + <span class="number">1</span>):</span><br><span class="line">        Path.append([dataPath[i][<span class="number">1</span>:<span class="number">4</span>], dataPath[i][<span class="number">6</span>:<span class="number">9</span>], int(dataPath[i][<span class="number">11</span>])])</span><br><span class="line"><span class="comment">#        print(dataPath[i])</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出 Line 的数据    </span></span><br><span class="line">    print(dataLine, <span class="string">"\n"</span>)</span><br><span class="line">    print(Line, <span class="string">"\n"</span>)</span><br><span class="line">    <span class="comment"># 输出 Path 的数据</span></span><br><span class="line">    print(dataPath, <span class="string">"\n"</span>)</span><br><span class="line">    print(Path)</span><br><span class="line">    </span><br><span class="line">    writeFile(<span class="string">'./file/file_2013_output.txt'</span>, Line, countLine, Path, countPath)               </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>###2014. 坐标距离</p>
<ul>
<li><p>从网页上下载 input.dat 文件，里面是用二进制编写的，里面放了一堆 int 型的数，</p></li>
<li><p>每个数占 4 个字节，每次读取两个，这两个数构成一个坐标.</p></li>
<li><p>规定处于第一象限的数是有效点(即 x&gt;0, y&gt;0 的坐标)，问这么多点中有效点有多少个？</p></li>
<li><p>现在用户从键盘输入一个坐标和一个数字 k ，设计算法输出 k 个离该坐标距离最近的点的坐标和每个坐标到</p>
<p>该点的距离，写入到 output.txt 文件中</p></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFile</span><span class="params">(url)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'rb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = f.read(<span class="number">8</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            elem = struct.unpack(<span class="string">'2i'</span>, data)</span><br><span class="line">            res.append(elem)            </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validPoint</span><span class="params">(data)</span>:</span></span><br><span class="line">    res = [elem <span class="keyword">for</span> elem <span class="keyword">in</span> data <span class="keyword">if</span> (elem[<span class="number">0</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> elem[<span class="number">1</span>] &gt; <span class="number">0</span>)]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance</span><span class="params">(a, target)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> math.pow(abs(a[<span class="number">0</span>]-target[<span class="number">0</span>]), <span class="number">2</span>) + math.pow(abs(a[<span class="number">1</span>]-target[<span class="number">1</span>]), <span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    data = readFile(<span class="string">'./file/file_2014.txt'</span>)</span><br><span class="line">    print(data)</span><br><span class="line">    </span><br><span class="line">    vapoint = validPoint(data)</span><br><span class="line">    print(<span class="string">"\n有效点: "</span>, vapoint)</span><br><span class="line">    print(<span class="string">"有效点数目: "</span>, len(vapoint))</span><br><span class="line">    </span><br><span class="line">    k = int(input(<span class="string">"输入k:"</span>))</span><br><span class="line">    x = int(input(<span class="string">"输入坐标x:"</span>))</span><br><span class="line">    y = int(input(<span class="string">"输入坐标y:"</span>))</span><br><span class="line">    target = [x, y]</span><br><span class="line">    print(target)</span><br><span class="line">    </span><br><span class="line">    sorted_vap = sorted(vapoint, key=<span class="keyword">lambda</span> x:distance(x, target))</span><br><span class="line">    print(sorted_vap)</span><br><span class="line">     </span><br><span class="line">    print(<span class="string">"k个坐标距离target的距离："</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, k):</span><br><span class="line">        print(<span class="string">"&#123;0&#125; -&gt; 目标&#123;1&#125; 距离: &#123;2:.2f&#125;"</span>.format(sorted_vap[i], target, math.sqrt(distance(sorted_vap[i], target)) ))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>###2015. 二进制坐标距离</p>
<ul>
<li>从网页上下载 input.dat 文件，里面是用二进制编写的，里面放了一堆 int 型的数，每个数占 4 个字节，每 次读取两个，这两个数构成一个坐标.</li>
<li>规定处于第一象限的数是有效点(即 x&gt;0, y&gt;0 的坐标)，问这么多点中有效点有多少个？</li>
<li>从键盘上输入 k 和 n ，从第一问中的有效点中找出距离小于 n ，距离小于 n 的点的个数要大于 k ，将它们 以文本格式输出到文件中.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFile</span><span class="params">(url)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'rb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = f.read(<span class="number">8</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            elem = struct.unpack(<span class="string">'2i'</span>, data)</span><br><span class="line">            res.append(elem)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validPoint</span><span class="params">(points)</span>:</span></span><br><span class="line">    res = [elem <span class="keyword">for</span> elem <span class="keyword">in</span> points <span class="keyword">if</span> (elem[<span class="number">0</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> elem[<span class="number">1</span>] &gt; <span class="number">0</span>)]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance</span><span class="params">(a, target)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> math.pow(abs(a[<span class="number">0</span>] - target[<span class="number">0</span>]), <span class="number">2</span>) + math.pow(abs(a[<span class="number">1</span>] - target[<span class="number">1</span>]), <span class="number">2</span>) </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeFile</span><span class="params">(sorted_vap, target, k)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"./file/file_2015_output.txt"</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, k):</span><br><span class="line">             f.write(<span class="string">"&#123;0&#125; -&gt; 目标&#123;1&#125; 距离: &#123;2:.2f&#125;\n"</span>.format(sorted_vap[i], target, math.sqrt(distance(sorted_vap[i], target))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    points = readFile(<span class="string">"./file/file_2015.txt"</span>)</span><br><span class="line">    vapoints = validPoint(points)</span><br><span class="line">    print(vapoints)</span><br><span class="line">    valen = len(vapoints)</span><br><span class="line">    print(<span class="string">"有效点的个数: "</span>, valen)</span><br><span class="line">    </span><br><span class="line">    k = int(input(<span class="string">"输入k:"</span>))</span><br><span class="line">    n = int(input(<span class="string">"输入n:"</span>))</span><br><span class="line">    x = int(input(<span class="string">"输入坐标x:"</span>))</span><br><span class="line">    y = int(input(<span class="string">"输入坐标y:"</span>))</span><br><span class="line">    target = [x, y]</span><br><span class="line">    </span><br><span class="line">    sorted_vap = sorted(vapoints, key=<span class="keyword">lambda</span> x:(distance(x, target)))</span><br><span class="line">    print(<span class="string">"k个坐标距离target的距离："</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, valen):</span><br><span class="line">        dis = math.sqrt(distance(sorted_vap[i], target))</span><br><span class="line">        <span class="keyword">if</span> dis &lt; n:</span><br><span class="line">            print(<span class="string">"&#123;0&#125; -&gt; 目标&#123;1&#125; 距离: &#123;2:.2f&#125; 小于&#123;3&#125;"</span>.format(sorted_vap[i], target,  dis, n))</span><br><span class="line">    </span><br><span class="line">    writeFile(sorted_vap, target, valen)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">[(<span class="number">20</span>, <span class="number">9</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">8</span>, <span class="number">9</span>), (<span class="number">90</span>, <span class="number">2</span>), (<span class="number">6</span>, <span class="number">8</span>), (<span class="number">80</span>, <span class="number">3</span>), (<span class="number">20</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">3</span>), (<span class="number">22</span>, <span class="number">77</span>), (<span class="number">90</span>, <span class="number">10</span>), (<span class="number">8</span>, <span class="number">6</span>), (<span class="number">8</span>, <span class="number">90</span>), (<span class="number">77</span>, <span class="number">99</span>), (<span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line">有效点的个数:  <span class="number">14</span></span><br><span class="line"></span><br><span class="line">输入k:<span class="number">3</span></span><br><span class="line"></span><br><span class="line">输入n:<span class="number">16</span></span><br><span class="line"></span><br><span class="line">输入坐标x:<span class="number">4</span></span><br><span class="line"></span><br><span class="line">输入坐标y:<span class="number">4</span></span><br><span class="line">k个坐标距离target的距离：</span><br><span class="line">(4, 3) -&gt; 目标[4, 4] 距离: 1.00 小于16</span><br><span class="line">(1, 1) -&gt; 目标[4, 4] 距离: 4.24 小于16</span><br><span class="line">(6, 8) -&gt; 目标[4, 4] 距离: 4.47 小于16</span><br><span class="line">(8, 6) -&gt; 目标[4, 4] 距离: 4.47 小于16</span><br><span class="line">(8, 9) -&gt; 目标[4, 4] 距离: 6.40 小于16</span><br><span class="line">(8, 9) -&gt; 目标[4, 4] 距离: 6.40 小于16</span><br></pre></td></tr></table></figure>
<p>###2016. 词频统计</p>
<p>file_2016_in.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Mr. Sherlock Holmes, who was usually very late, </span><br><span class="line">略</span><br></pre></td></tr></table></figure>
<p>file_2016_out.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">the, <span class="number">15</span></span><br><span class="line">night, <span class="number">9</span></span><br><span class="line">略</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 文本文件 input.txt 由若干英文单词和分隔符(空格，回车，换行)构成. </span></span><br><span class="line"><span class="comment"># 根据如下说明编写程序：</span></span><br><span class="line"><span class="comment"># 统计不同单词出现的次数(频度). </span></span><br><span class="line"><span class="comment"># 将统计结果按出现频度从高到低排序，并将出现频度大于 5 的单词及其频度输出到文件 output.txt</span></span><br><span class="line"><span class="comment"># 中. 文件格式如图所示</span></span><br><span class="line"><span class="comment"># 多个连续的分隔符被视为一个分隔符.</span></span><br><span class="line"><span class="comment"># 大小写敏感.</span></span><br><span class="line"><span class="comment"># 每个单词的长度不超过 20 个字符.</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFile</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'r+'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(words)</span>:</span></span><br><span class="line">    freq = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        freq[word] = freq.get(word, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> freq</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeFile</span><span class="params">(sorted_freq)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./file/file_2016_output.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> elem <span class="keyword">in</span> sorted_freq:</span><br><span class="line">            <span class="keyword">if</span> elem[<span class="number">1</span>] &gt; <span class="number">5</span>:</span><br><span class="line">                f.write(<span class="string">"&#123;0&#125;, &#123;1&#125;\n"</span>.format(elem[<span class="number">0</span>], elem[<span class="number">1</span>]))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    data = readFile(<span class="string">'./file/file_2016_in.txt'</span>)</span><br><span class="line">    words = re.findall(<span class="string">'[a-zA-Z]+'</span>, data)</span><br><span class="line">    print(words)</span><br><span class="line">    </span><br><span class="line">    freq = train(words)</span><br><span class="line">    sorted_freq = sorted(freq.items(), key=<span class="keyword">lambda</span> x:(x[<span class="number">1</span>]), reverse=<span class="literal">True</span>)</span><br><span class="line">    print(<span class="string">"\n"</span>, sorted_freq, <span class="string">"\n"</span>)</span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> sorted_freq:</span><br><span class="line">        <span class="keyword">if</span> elem[<span class="number">1</span>] &gt; <span class="number">5</span>:</span><br><span class="line">            print(<span class="string">"&#123;0&#125;, &#123;1&#125;"</span>.format(elem[<span class="number">0</span>], elem[<span class="number">1</span>]))</span><br><span class="line">            </span><br><span class="line">    writeFile(sorted_freq)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>###2017. 坐标问题</p>
<p>已知：二进制数据文件 data.bin 中存放了若干个整数，请编写程序完成如下功能： 编写程序读取所有数据.</p>
<ul>
<li>以每相邻两个整数为一对按顺序构成二维平面上的坐标点. 例如：有数据 12 ， 34 ， 53 ， 25 ， 61 ， 28 ， 78 等，则构成六个坐标点如下： (12, 34) 、 (34, 53) ， (53, 25) , (25, 61) , (61, 28) , (28,
<ol start="78" type="1">
<li>；</li>
</ol></li>
<li>以 每个坐标点为圆心，以 ==该点== 与 ==其后面第一个点== 的 欧氏距离为半径 r . 计算 <strong>最后一个点</strong> 时 以其 <strong>和第一个点</strong> 的欧氏距离为半径。</li>
<li>计算 <strong>每个圆包含的坐标点数 </strong>。</li>
<li>例如： 坐标点 (12, 34) 的圆半径<span class="math inline">\(r=\sqrt{(12-34)^2+(34-53)^2}\)</span>是坐标点 (12, 34) 与 (34, 53) 的欧式距离. 坐标点 (28, 78) 的圆半径<span class="math inline">\(r=\sqrt{(28-12)^2+(78-34)^2}\)</span>是坐标点 (28, 78) 与 (12, 34) 的欧式距离.</li>
<li><p>计算所有圆的<strong>点密度值</strong>，然后输出 <strong>点密度值</strong> 最大的 <strong>5 个坐标点</strong>以及 相应圆中包含的 <strong>点数</strong> 和 <strong>点密度值</strong>. 输出格式 要求：<img src="/posts/51138/Users\Administrator\Desktop\上机面试png\req.png" alt="req"></p></li>
<li><p>上述文字部分不需要显示. 其中：<strong>圆的点密度</strong> 为 <strong>圆包含的点数 </strong>/<strong>圆面积</strong>，如果点在圆上，则也算圆包含该点，在计算点密度时，圆心也算一个点. 计算圆面积时<span class="math inline">\(\pi=3.14\)</span>. 例如：坐标点 (2, 1) ，则该坐标点也属该坐标点的圆内的一个点.</p></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFile</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># 测试用例</span></span><br><span class="line">    wds = <span class="string">"""2 88 59 83 87 65 38 72 70 76 50 62 4 76 68 70 50 60 13 74 66 60 8 28 97 94 99 52 6 90 69 60 54</span></span><br><span class="line"><span class="string">83 76 89 64 73 48 69 83 28 84 67 14 50 99 86 35 36 5 82 67 36 92 99 44 27 53 76 24 45 27 19 14</span></span><br><span class="line"><span class="string">65 86 69 47 80 96 96 10 68 60 91 87 25 15 50 8 18 3 15 85 88 14 8 2 64 63 62 70 58 62 93 51 66</span></span><br><span class="line"><span class="string">62 73 75 6"""</span></span><br><span class="line">    <span class="comment"># 写文件</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        line = wds.split()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> line:</span><br><span class="line">            elem = struct.pack(<span class="string">'i'</span>, int(i))</span><br><span class="line">            f.write(elem)</span><br><span class="line">    </span><br><span class="line">    res = []</span><br><span class="line">    <span class="comment"># 读文件</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'rb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = f.read(<span class="number">8</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            elem = struct.unpack(<span class="string">'2i'</span>, data)  <span class="comment"># 读一个元组(x,y)</span></span><br><span class="line">            res.append(elem)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算欧式距离</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance</span><span class="params">(a, target)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> math.sqrt(math.pow(abs(a[<span class="number">0</span>] - target[<span class="number">0</span>]), <span class="number">2</span>) + math.pow(abs(a[<span class="number">1</span>] - target[<span class="number">1</span>]), <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 圆的点密度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">density</span><span class="params">(count, r)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> count / (r*r*math.pi)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    points = readFile(<span class="string">'./file/file_2017.txt'</span>)   </span><br><span class="line">    polen = len(points)</span><br><span class="line">    </span><br><span class="line">    circle_radius = []   <span class="comment"># 存储距离(当作圆半径)</span></span><br><span class="line">    <span class="comment"># 以每个坐标点为圆心，以 该点 与 其后面第一个点 的欧氏距离为半径 r</span></span><br><span class="line">    <span class="comment"># 计算每个圆包含的坐标点数. 计算 最后一个点 以其和 第一个点 的欧氏距离为半径.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, polen):</span><br><span class="line">        circle_radius.append( distance(points[i], points[(i+<span class="number">1</span>)%polen]) )</span><br><span class="line">       </span><br><span class="line">    <span class="comment"># 计算 每个圆包含的 坐标点数</span></span><br><span class="line">    count = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, polen)]   <span class="comment"># 圆包含的点数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, polen):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, polen):</span><br><span class="line">            <span class="comment"># 坐标i 和 其他坐标j 距离 </span></span><br><span class="line">            <span class="keyword">if</span> (distance(points[i], points[j]) - circle_radius[i] &lt;= <span class="number">1e-8</span>):</span><br><span class="line">                count[i] += <span class="number">1</span>              <span class="comment"># 圆心为i,radius[i]的圆, 包含的坐标 数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算所有圆的点密度值，然后输出 点密度值 最大的 5 个坐标点</span></span><br><span class="line">    <span class="comment"># 圆的点密度：圆包含的点数 / 圆面积</span></span><br><span class="line">    densitys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, polen):</span><br><span class="line">        densitys.append( density(count[i], circle_radius[i]) )</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 输出 点密度值 最大的 5 个坐标点</span></span><br><span class="line">    combine = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, polen):</span><br><span class="line">        combine.append([points[i], count[i], densitys[i]])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 根据点密度排序</span></span><br><span class="line">    combine.sort(key=<span class="keyword">lambda</span> x:(x[<span class="number">2</span>]), reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 输出格式:</span></span><br><span class="line">    <span class="comment"># 坐标点(x,y)  包含点数(占5列,右对齐)  点密度(占7列，右对齐，保留2位小数)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">        print(<span class="string">"坐标点:&#123;0&#125;, 包含点数:&#123;1:&gt;5&#125;, 点密度:&#123;2:&gt;7.2f&#125;"</span>.format(combine[i][<span class="number">0</span>], combine[i][<span class="number">1</span>], combine[i][<span class="number">2</span>]))</span><br><span class="line">       </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">坐标点:(<span class="number">63</span>, <span class="number">62</span>), 包含点数:    <span class="number">4</span>, 点密度:   <span class="number">0.02</span></span><br><span class="line">坐标点:(<span class="number">8</span>, <span class="number">18</span>), 包含点数:    <span class="number">2</span>, 点密度:   <span class="number">0.02</span></span><br><span class="line">坐标点:(<span class="number">64</span>, <span class="number">73</span>), 包含点数:   <span class="number">13</span>, 点密度:   <span class="number">0.02</span></span><br><span class="line">坐标点:(<span class="number">68</span>, <span class="number">70</span>), 包含点数:   <span class="number">18</span>, 点密度:   <span class="number">0.01</span></span><br><span class="line">坐标点:(<span class="number">51</span>, <span class="number">66</span>), 包含点数:    <span class="number">7</span>, 点密度:   <span class="number">0.01</span></span><br></pre></td></tr></table></figure>
<p>###2016. 保研 查字典匹配句子</p>
<ul>
<li>请从服务器将两个数据文件 input.txt 和 words.txt 下载到本地电脑的 D 盘根文件夹。</li>
<li>在 D 盘根文件夹的 <strong>words.txt</strong> 中存储了不超过 30000 条的英文单词，<strong>每个单词占一行</strong>。单词的最大长度为 20 ，且单词内部没有空格，文件中无重复单词。</li>
<li>在D盘根文件夹的 <strong>input.txt 中存储了一个「丢失」了空格和标点符号的英文文章</strong>。每行不超过 128 个字 符，请编写程序把该文章中第一行和最后一行显示在屏幕上。</li>
<li>编写程序：<strong>将 words.txt 中的最后三行显示在屏幕上</strong>；</li>
<li>编写程序：<strong>利用 words.txt 中的单词作为词典</strong>，采用<strong>正向最大匹配切分单词算法对 input.txt 中的文本进行单词切分</strong>。切分时单词区分大小写，切分分割标记采用空格，并将切分后的结果写入到 out.txt 中。</li>
<li>所谓正向最大匹配切分就是从左向右扫描待切分字符串，尽量取长词。</li>
<li>下面举一个简单例子：现有待切分字符串 ABCDEFGHIJ ，设词典中==最大单词长度==为 5 。那么<strong>按照算法首先取</strong> <strong>出 ABCDE 判断是否是单词</strong>，如果是则切分到一个单词，否则<strong>舍弃最后一个字母接着判断</strong>，也就是判断 ABCD 是否是单词，依此类推，当只有一个字母时可以直接认定为是单词。在成功切分出一个单词后对待切分字符 串余下的部分再次执行上述过程。</li>
<li>编写程序实现步骤 2 、 3 描述的要求，并通过如下所示的主函数对进行验证，注意：除了指定添加的代码之 外，不得修改 main 函数其余部分。对 main 函数每修改一处，总分扣 3 分，最多扣 10 分。</li>
</ul>
<p>file_input_2016.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">whenIwasyoung</span><br><span class="line">ithinkth</span><br></pre></td></tr></table></figure>
<p>file_word_2016.txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">apple</span><br><span class="line">love</span><br></pre></td></tr></table></figure>
<p>output</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">'apple'</span>, <span class="string">'love'</span>, <span class="string">'dog'</span>, <span class="string">'competitive'</span>, <span class="string">'judge'</span>, <span class="string">'man'</span>, <span class="string">'people'</span>, <span class="string">'when'</span>, <span class="string">'I'</span>, <span class="string">'was'</span>, </span><br><span class="line">dic: appl time</span><br><span class="line">input: whenIwasyoung Totaltimeapple</span><br><span class="line">[<span class="string">'when'</span>, <span class="string">'I'</span>, <span class="string">'was'</span>, <span class="string">'young'</span>, <span class="string">'i'</span>, <span class="string">'think'</span>, <span class="string">'competitive'</span>, <span class="string">'mechanism'</span>,</span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFile</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'r+'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        txt = data.split(<span class="string">'\n'</span>)   </span><br><span class="line">    <span class="keyword">return</span> txt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">splitEssay</span><span class="params">(sentence, words)</span>:</span></span><br><span class="line">    </span><br><span class="line">    start, sen_len = <span class="number">0</span>, len(sentence)</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> start &lt;= sen_len:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">20</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> sentence[start:start+k] <span class="keyword">in</span> words:</span><br><span class="line">                res.append(sentence[start:start+k])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        start += k</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    words = readFile(<span class="string">'./file/file_word_2016.txt'</span>)</span><br><span class="line">    print(<span class="string">"词典: "</span>, words, <span class="string">"\n"</span>)</span><br><span class="line">    essay = readFile(<span class="string">'./file/file_input_2016.txt'</span>)</span><br><span class="line">    print(<span class="string">"无空格文章: "</span>, essay, <span class="string">"\n"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words[<span class="number">-3</span>:]:</span><br><span class="line">        print(word)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 显示文章的第一行 和 最后一行</span></span><br><span class="line">    first = splitEssay(essay[<span class="number">0</span>], words)</span><br><span class="line">    last = splitEssay(essay[<span class="number">-1</span>], words)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"\n文章第一行: &#123;0&#125;\n"</span>.format(<span class="string">' '</span>.join(first))) </span><br><span class="line">    print(<span class="string">"文章最后一行: &#123;0&#125;\n"</span>.format(<span class="string">' '</span>.join(last)))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>###2018. 真题 最大公约数</p>
<ul>
<li><p>有20000个数存储于二进制文件中，读取出来-</p></li>
<li>然后求一个最大子集，其中两两互相不为倍数，不为约数，最大公约数为1</li>
<li><p>然后满足的数据输出到指定文件中。</p></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GenerateData</span><span class="params">(url)</span>:</span></span><br><span class="line">    random.seed(<span class="number">100</span>)</span><br><span class="line"><span class="comment">#    res = (random.randint(2,20000) for i in range(0, 20000))</span></span><br><span class="line"><span class="comment">#    res = [11, 3, 5, 7, 9, 12, 33, 31, 4, 11]</span></span><br><span class="line">    res = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">43</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment">#    res = [i for i in range(1, 500)]</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'wb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> elem <span class="keyword">in</span> res:</span><br><span class="line">            s = struct.pack(<span class="string">'i'</span>, elem)</span><br><span class="line">            f.write(s)                        </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFile</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'rb+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = f.read(<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            elem = struct.unpack(<span class="string">'i'</span>, data)[<span class="number">0</span>]</span><br><span class="line">            res.append(elem)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">           </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeFile</span><span class="params">(data, length)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"./file/file_2018_output.txt"</span>, <span class="string">'w+'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length, <span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> data[i:i+<span class="number">5</span>]:</span><br><span class="line">                f.write(str(data[i:i+<span class="number">5</span>]) + <span class="string">"\n"</span>)         </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num1 &lt; num2:</span><br><span class="line">        num1, num2 = num2, num1</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (num1 % num2):</span><br><span class="line">        temp = num1 % num2</span><br><span class="line">        num1 = num2</span><br><span class="line">        num2 = temp</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> num2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_list</span><span class="params">(data, length)</span>:</span> </span><br><span class="line">    res = []</span><br><span class="line">    print(data)</span><br><span class="line">    </span><br><span class="line">    flag = [<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, length):</span><br><span class="line"><span class="comment">#            print(data[i], data[j])</span></span><br><span class="line">            <span class="keyword">if</span> gcd(data[i], data[j]) != <span class="number">1</span>:</span><br><span class="line">                flag[j] = <span class="number">0</span>          <span class="comment"># flag设置为0，标志为不可用</span></span><br><span class="line">                flag[i] = <span class="number">0</span>          </span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag[i] <span class="keyword">and</span> (j == length - <span class="number">1</span>) <span class="keyword">and</span> (gcd(data[i], data[j<span class="number">-1</span>]) == <span class="number">1</span>):</span><br><span class="line">            res.append(data[i])</span><br><span class="line">            print(<span class="string">"res:"</span>, res)    </span><br><span class="line">            </span><br><span class="line">    res = list(set(res))             <span class="comment"># 去重</span></span><br><span class="line">    print(res, len(res))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'./file/file_2018_input.txt'</span></span><br><span class="line">   </span><br><span class="line">    GenerateData(url)    </span><br><span class="line">    data = readFile(url)</span><br><span class="line">    </span><br><span class="line">    length = len(data)</span><br><span class="line">    res = filter_list(data, length)</span><br><span class="line">    </span><br><span class="line">    writeFile(res, length)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p>###2018. 保研</p>
<p>1、编写一个函数，首先，产生一个100至200之间的随机整数rnd；然后，再产生rnd个100至500以内的随机整数，将这些整数保存在列表numberLst中。</p>
<p>2、编写一个函数，找出numberLst中所有包含数字2或数字6的整数，保存到列表num26Lst中。</p>
<p>3、将num26Lst中所有元素输出到屏幕，要求每行输出8个整数，每个整数占5列，右对齐。</p>
<p>4、编写一个函数，求出num26Lst中所有整数的因子，其中因子不包括1和整数本身，存放到另一个新的列表resultLst中。</p>
<p>5、编写一个函数，统计resultLst中每个因子出现的次数。</p>
<p>6、编写一个函数，将第5步的统计结果输出到屏幕，要求<strong>每行一个统计结果，只输出出现次数最多的5个因子</strong>。</p>
<p>7、编写一个函数，删除resultLst中每个因子的重复因子，每个因子只保留一份。</p>
<p>8、编写一个函数，将删除重复因子的resultLst列表输出到D盘文件result.txt中，要求每行输出8个整数，每个整数占5列，右对齐。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># ----产生随机整数-------</span></span><br><span class="line">    numberLst = productRndNum()</span><br><span class="line">    <span class="comment"># ----找出包含数字2或6的整数，其中digLst包含数字2和6-----</span></span><br><span class="line">    num26Lst = getDigNumber(numberLst, digLst=[<span class="number">2</span>， <span class="number">6</span>])</span><br><span class="line">	printOut(num26Lst, <span class="number">8</span>)</span><br><span class="line">    <span class="comment">#-----找出所有整数的因子-----</span></span><br><span class="line">    resultLst = getDivisorNum(num26Lst)</span><br><span class="line">    <span class="comment">#-----统计每个因子出现的次数-----</span></span><br><span class="line">    resultStatic = staticResult(resultLst)</span><br><span class="line">    printMax5Out(resultStatic)</span><br><span class="line">    <span class="comment"># ----删除resultLst中重复因子的多余份数，只保留一份-----</span></span><br><span class="line">    delMultiDivisor(resultLst)</span><br><span class="line">    print(<span class="string">"===出现次数最多的数字==="</span>)</span><br><span class="line">    printDivisorToFile(<span class="string">"d:\\result.txt"</span>, resultLst)</span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 产生一个100-200之间的随机整数 rmd</span></span><br><span class="line"><span class="comment"># 再产生rmd个100至500以内的随机整数，保存到numberLst</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">productRndNum</span><span class="params">()</span>:</span></span><br><span class="line">    random.seed(<span class="number">100</span>)</span><br><span class="line">    rmd = random.randint(<span class="number">100</span>, <span class="number">200</span>)  <span class="comment"># [100,200]</span></span><br><span class="line">    numberLst = [random.randint(<span class="number">100</span>, <span class="number">500</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(rmd)]</span><br><span class="line">    <span class="keyword">return</span> numberLst</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----找出包含数字2或6的整数，其中digLst包含数字2和6-----</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDigNumber</span><span class="params">(numberLst, digLst)</span>:</span></span><br><span class="line">    num26Lst = []</span><br><span class="line">    <span class="keyword">for</span> nb <span class="keyword">in</span> numberLst:</span><br><span class="line">        nstr = str(nb)</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> digLst:</span><br><span class="line">            <span class="keyword">if</span> str(e) <span class="keyword">in</span> nstr:</span><br><span class="line">                num26Lst.append(nb)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> num26Lst</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每行输出8个整数，每个整数占5列，右对齐</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printOut</span><span class="params">(num26Lst, cnt)</span>:</span></span><br><span class="line">    nlen = len(num26Lst)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(nlen):</span><br><span class="line">        print(<span class="string">"&#123;0:&gt;5&#125;"</span>.format(num26Lst[i]), end=<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span>) % cnt == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----找出所有整数的因子, 因子不包括1和整数本身-----</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDivisorNum</span><span class="params">(num26Lst)</span>:</span></span><br><span class="line">    resultLst = []</span><br><span class="line">    <span class="keyword">for</span> numb <span class="keyword">in</span> num26Lst:</span><br><span class="line">        t = numb</span><br><span class="line">        i = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; t:</span><br><span class="line">            <span class="keyword">if</span> t % i == <span class="number">0</span>:</span><br><span class="line">                resultLst.append(i)</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> resultLst</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计resultLst中每个因子出现的次数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">staticResult</span><span class="params">(resultLst)</span>:</span></span><br><span class="line">    freq = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> resultLst:</span><br><span class="line">        freq[num] = freq.get(num, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> freq</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printMax5Out</span><span class="params">(resultStatic)</span>:</span></span><br><span class="line">    resultStatic = sorted(resultStatic.items(), key=<span class="keyword">lambda</span> x:(x[<span class="number">1</span>]), reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> resultStatic[:<span class="number">5</span>]:</span><br><span class="line">        print(<span class="string">"&#123;0&#125; : &#123;1&#125;"</span>.format(elem[<span class="number">0</span>], elem[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delMultiDivisor</span><span class="params">(resultLst)</span>:</span></span><br><span class="line">    tmp = sorted(set(resultLst), key=resultLst.index)</span><br><span class="line">    resultLst.clear()</span><br><span class="line">    resultLst.extend(tmp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将删除重复因子的resultLst列表输出到D盘文件result.txt中，</span></span><br><span class="line"><span class="comment"># 要求每行输出8个整数，每个整数占5列，右对齐</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printDivisorToFile</span><span class="params">(url, resultLst)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        rlen = len(resultLst)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(rlen):</span><br><span class="line">            f.write(<span class="string">'&#123;0:&gt;5&#125;'</span>.format(resultLst[i]))</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">8</span> == <span class="number">0</span>:</span><br><span class="line">                f.write(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># ----产生随机整数-------</span></span><br><span class="line">    numberLst = productRndNum()</span><br><span class="line">    <span class="comment"># ----找出包含数字2或6的整数，其中digLst包含数字2和6-----</span></span><br><span class="line">    num26Lst = getDigNumber(numberLst, digLst=[<span class="number">2</span>, <span class="number">6</span>])</span><br><span class="line">    printOut(num26Lst, <span class="number">8</span>)</span><br><span class="line">    <span class="comment">#-----找出所有整数的因子-----</span></span><br><span class="line">    resultLst = getDivisorNum(num26Lst)</span><br><span class="line">    <span class="comment"># -----统计每个因子出现的次数-----</span></span><br><span class="line">    resultStatic = staticResult(resultLst)</span><br><span class="line">    printMax5Out(resultStatic)</span><br><span class="line">    <span class="comment"># ----删除resultLst中重复因子的多余份数，只保留一份-----</span></span><br><span class="line">    delMultiDivisor(resultLst)</span><br><span class="line">    print(<span class="string">"===出现次数最多的数字==="</span>)</span><br><span class="line">    printDivisorToFile(<span class="string">"./file/file_yan2018_result.txt"</span>, resultLst)</span><br></pre></td></tr></table></figure>
<p>###2019. 真题 因子拆分</p>
<p>请各位考生从考试信息发布网站下载数据文件data.txt。</p>
<p><strong>已知：</strong>数据文件data.txt是一个文本文件，其中存放了 100个 不超过32768 的 <strong>非负整数</strong>。</p>
<p><strong>请编写程序完成如下功能：</strong></p>
<ol type="1">
<li><p>编写函数 read_file 从文件中 <strong>读取数据</strong>，将 <strong>所有的整数</strong> 按照 其 <strong>在文件中出现的顺序</strong> 依次存储到数组arr中；</p></li>
<li><p>编写函数print：<strong>将数组arr显示在屏幕上</strong>， <strong>每行显示n个数</strong>， <strong>每个整数占6列</strong>；</p></li>
<li><p>编写函数count： <strong>统计数字0至9</strong> 在数<strong>组arr</strong>所有整数中的<strong>出现次数</strong>，将<strong>结果放入数组res</strong>中（即res[0]存储数字0的出现次数，res[1]存储数字1的出现次数，其余以此类推）；</p></li>
<li><p>编写函数print_res：<strong>将数组res显示在屏幕上，每行显示5个数</strong>，可以复用步骤(2)中print函数；</p></li>
<li><p>编写函数sort_array ：将数组arr中的整数 按照 <strong>因子和</strong> <strong>从小到大排序</strong>，如果两个整数的因子和相等，则按照它们的自然大小排序（注意：计算一个整数的因子和时 <strong>包括1和其本身</strong>）；</p></li>
<li><p>编写函数filter_array： 对数组arr中的整数 进行 <strong>筛选</strong>，结果继续保存在arr中，<strong>筛选规则</strong>如下：</p></li>
</ol>
<ul>
<li>保留所有的偶数，同时保证这些偶数按照从小到大排序。</li>
<li>说明：完成筛选之后，数组arr中的元素可以分成两部分：
<ul>
<li>前半部分是有效内容，即<strong>所有的偶数</strong></li>
<li>后半部分则是无效内容，参数size记录了数组arr中有效内容的长度（<strong>注意</strong>：筛选要求在原数组上进行）；</li>
</ul></li>
</ul>
<ol start="7" type="1">
<li>编写函数 <strong>write_file</strong> 对 数组arr中的有效内容（即所有偶数）进行<strong>质因数分解</strong>，并将 结果输出到屏幕和文本文件output.txt中。输出要求：<strong>每一个整数的质因数分解结果占一行</strong>，具体显示格式如下图所示：</li>
</ol>
<figure>
<img src="/posts/51138/Users\Administrator\Desktop\上机面试png\ouput.png" alt="ouput"><figcaption>ouput</figcaption>
</figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateData</span><span class="params">(url)</span>:</span></span><br><span class="line">    random.seed(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#    res = [random.randint(0, 10) for i in range(0, 10)]   # 测试</span></span><br><span class="line">    res = [random.randint(<span class="number">0</span>, <span class="number">2768</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>)]   </span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> elem <span class="keyword">in</span> res:</span><br><span class="line">            f.write(str(elem) + <span class="string">" "</span>)</span><br><span class="line">            <span class="keyword">if</span> (res.index(elem) + <span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">                f.write(<span class="string">'\n'</span>)</span><br><span class="line">                </span><br><span class="line"><span class="comment"># 读文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'r+'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read().split()</span><br><span class="line">        data = list(map(int, data))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 打印数组</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_arr</span><span class="params">(alist, n)</span>:</span></span><br><span class="line">    length = len(alist)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">elif</span> i % n == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">""</span>)</span><br><span class="line">        print(<span class="string">"&#123;0:6&#125;"</span>.format(alist[i]), end=<span class="string">''</span>)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'\n'</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 统计数字0至9  在数组arr所有整数中的出现次数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(alist)</span>:</span></span><br><span class="line">    res = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>)]</span><br><span class="line">    length = len(alist)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length):</span><br><span class="line">        num = list(str(alist[i]))    <span class="comment"># 例: 123--&gt; ['1', '2', '3']</span></span><br><span class="line">        n_len = len(num)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, n_len):</span><br><span class="line">            res[int(num[j])] += <span class="number">1</span></span><br><span class="line"><span class="comment">#    print(res)</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 因子和</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factor</span><span class="params">(n)</span>:</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            res += i</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照 因子和  从小到大排序，如果两个整数的因子和相等，则按照它们的自然大小排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_array</span><span class="params">(alist)</span>:</span></span><br><span class="line">    alist.sort(key=<span class="keyword">lambda</span> x:(factor(x), x))</span><br><span class="line">    <span class="keyword">return</span> alist</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_array</span><span class="params">(alist)</span>:</span></span><br><span class="line">    arr = list(filter(<span class="keyword">lambda</span> x:x%<span class="number">2</span>==<span class="number">0</span>, alist))</span><br><span class="line">    arr.sort()</span><br><span class="line">    arr.append(len(arr))</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_fac</span><span class="params">(n)</span>:</span></span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">           res.append(i)</span><br><span class="line">           n /= i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">           i = i + <span class="number">1</span></span><br><span class="line"><span class="comment">#    print(res)</span></span><br><span class="line">    <span class="keyword">return</span> res          </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_file</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./file/file_2019_out.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> elem <span class="keyword">in</span> arr:</span><br><span class="line">            fac = filter_fac(elem)</span><br><span class="line">            fac = list(map(str, fac))</span><br><span class="line">            print(<span class="string">"&#123;0&#125;=&#123;1&#125;"</span>.format(elem, <span class="string">"*"</span>.join(fac)))</span><br><span class="line">            f.write(<span class="string">"&#123;0&#125;=&#123;1&#125;\n"</span>.format(elem, <span class="string">"*"</span>.join(fac)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'./file/file_2019_in.txt'</span></span><br><span class="line">    generateData(url)</span><br><span class="line">    <span class="comment"># 第一问</span></span><br><span class="line">    data = read_file(url)</span><br><span class="line">    print_arr(data, <span class="number">10</span>)    </span><br><span class="line">    <span class="comment"># 第二问</span></span><br><span class="line">    res = count(data)           <span class="comment"># 统计数字0至9  在数组arr所有整数中的出现次数</span></span><br><span class="line">    print_arr(res, <span class="number">5</span>)   </span><br><span class="line">    <span class="comment"># 第(5)问</span></span><br><span class="line">    data = sort_array(data)</span><br><span class="line">    print(data)</span><br><span class="line">    <span class="comment"># 第(6)问</span></span><br><span class="line">    arr = filter_array(data)</span><br><span class="line">    print(arr)    </span><br><span class="line">    <span class="comment"># 第(7)问</span></span><br><span class="line">    write_file(arr)</span><br><span class="line">        </span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   <span class="number">550</span>  <span class="number">2331</span>   <span class="number">258</span>  <span class="number">1044</span>   <span class="number">482</span>  <span class="number">2029</span>  <span class="number">1841</span>  <span class="number">1934</span>  <span class="number">2668</span>  <span class="number">1554</span></span><br><span class="line">略</span><br><span class="line">    <span class="number">38</span>   <span class="number">103</span>    <span class="number">92</span>    <span class="number">23</span>    <span class="number">37</span></span><br><span class="line">[<span class="number">8</span>, <span class="number">88</span>, <span class="number">104</span>, <span class="number">116</span>, <span class="number">118</span>, <span class="number">178</span>, <span class="number">258</span>, <span class="number">354</span>, <span class="number">384</span>, <span class="number">418</span>, <span class="number">442</span>, <span class="number">482</span>, <span class="number">550</span>, <span class="number">670</span>, <span class="number">690</span>, <span class="number">708</span>, <span class="number">896</span>, <span class="number">908</span>, </span><br><span class="line">略</span><br><span class="line"><span class="number">8</span>=<span class="number">2</span>*<span class="number">2</span>*<span class="number">2</span></span><br><span class="line"><span class="number">88</span>=<span class="number">2</span>*<span class="number">2</span>*<span class="number">2</span>*<span class="number">11</span></span><br><span class="line">略</span><br></pre></td></tr></table></figure>
<p>###2019. 保研 正则表达式拆分字符串</p>
<p><strong>按以下要求编写程序</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现有一个文本文件data.txt，其中记录了车辆进出校园时在自动收费系统ETC中记录下的ETC编号和时间信息。</span></span><br><span class="line"><span class="comment"># 每个ETC编号唯一地对应于一辆机动车。试用python语言编写程序，按要求从该数据文件中提取所需的信息。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 说明：</span></span><br><span class="line"><span class="comment"># 1. 一个ETC编号由5部分构成，本别是：两个大写字母、一个短横线、三位数字、一个短横线、三位数字。</span></span><br><span class="line"><span class="comment">#    如：“FG-102-934”、“BA-724-433”等都是合法的ETC编号。</span></span><br><span class="line"><span class="comment"># 2. 时间信息的记录格式为：2016-01-08#07:21:31。</span></span><br><span class="line"><span class="comment"># 3. 整条ETC记录的格式由5部分构成，分别是：ETC编号、字符“|”、入校时间、字符“|”，离校时间。</span></span><br><span class="line"><span class="comment">#    如：“BA-724-433|2016-01-08#07:21:31|2016-01-08#17:01:09”就是一条结构完整的ETC记录。</span></span><br><span class="line"><span class="comment"># 4. 数据文件中每一行为一个ETC记录。</span></span><br><span class="line"><span class="comment"># 5. 车辆进入校园后都是在当天离开校园的，即每条ETC记录中出入校园的日期是相同的。</span></span><br><span class="line"><span class="comment"># 6. ETC记录中出现的字符都是英文符号，无汉字和中文标点符号。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 要求：</span></span><br><span class="line"><span class="comment"># 1. 从文件中识别ETC记录，计算总的ETC记录的条数。提示：读取文件，并将ETC记录放入列表中。</span></span><br><span class="line"><span class="comment"># 2. 计算ETC记录中共有多少辆不同的车。提示：通过正则表达式（或字符串分片）识别每条ETC记录中的ETC编号，</span></span><br><span class="line"><span class="comment">#    并将ETC编号放入集合中。</span></span><br><span class="line"><span class="comment"># 3. 找出进出校园次数最多的5辆车。提示：构建ETC编号和出现次数的字典。</span></span><br><span class="line"><span class="comment"># 4. 找出在校园中累计停留时间最长的5辆车。提示：构建ETC编号和累计停留时间的字典。</span></span><br><span class="line"><span class="comment">#    可通过正则表达式（或字符串分片）识别时间字符串及其中的时、分、秒信息。</span></span><br><span class="line"><span class="comment">#    为简化计算，可将时间转化成以零点开始计算的秒数。可以把计算时间差作为一个独立的函数。</span></span><br><span class="line"><span class="comment">#5.	 将上述计算结果按“report.txt文件内容示例”（见最后一页）所示的要求输出到report.txt文件中。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读文件，获取全部ETC记录，构成列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_record</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'r+'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        data = data.split(<span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> data[:<span class="number">-1</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取全部不同的ETC编号，构成集合</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_v</span><span class="params">(vehicle_lst)</span>:</span> </span><br><span class="line">    veh_set = set()</span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> vehicle_lst:</span><br><span class="line">        veh = elem.split(<span class="string">'|'</span>)[<span class="number">0</span>]</span><br><span class="line">        veh_set.add(veh)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 共有多少辆不同的车</span></span><br><span class="line"><span class="comment">#    print(len(veh_set))</span></span><br><span class="line">    <span class="keyword">return</span> veh_set</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造车辆进出校园次数的字典  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_v</span><span class="params">(vehicle_lst, vehicle_set)</span>:</span></span><br><span class="line">    vehicles = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> vehicle_lst:</span><br><span class="line">        veh = elem.split(<span class="string">'|'</span>)[<span class="number">0</span>]</span><br><span class="line">        vehicles[veh] = vehicles.get(veh, <span class="number">0</span>) + <span class="number">1</span>      <span class="comment"># 遇到一次编码, 次数+1, 默认为0</span></span><br><span class="line">    vehicles = sorted(vehicles.items(), key=<span class="keyword">lambda</span> x:(x[<span class="number">1</span>]), reverse=<span class="literal">True</span>)[:<span class="number">10</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 进出校园次数最多的5辆车</span></span><br><span class="line">    print(dict(vehicles[:<span class="number">5</span>]))</span><br><span class="line">    <span class="keyword">return</span> vehicles[:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 问题4: </span></span><br><span class="line"><span class="comment"># 时间 转化成 秒</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time2int</span><span class="params">(time : str)</span>:</span></span><br><span class="line">    time = time.split(<span class="string">':'</span>)</span><br><span class="line">    hour = int(time[<span class="number">0</span>])*<span class="number">3600</span></span><br><span class="line">    minu = int(time[<span class="number">1</span>])*<span class="number">60</span></span><br><span class="line">    sec = int(time[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">return</span> hour + minu + sec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到秒后，再 转化成 时间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sec2time</span><span class="params">(seconds)</span>:</span></span><br><span class="line">    m, s = divmod(seconds, <span class="number">60</span>)</span><br><span class="line">    h, m = divmod(m, <span class="number">60</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&#123;0&#125;:&#123;1:02d&#125;:&#123;2:02d&#125;"</span>.format(h, m, s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算时间差</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcTimeDiff</span><span class="params">(start, end)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(time2int(end) - time2int(start))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 构造车辆累计停留时间的字典</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_t</span><span class="params">(vehicle_lst, vehicle_set)</span>:</span></span><br><span class="line">    vehicles = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> vehicle_lst:</span><br><span class="line">        veh = elem.split(<span class="string">'|'</span>)[<span class="number">0</span>]</span><br><span class="line">        time = re.findall(<span class="string">'[0-9]+:[0-9]+:[0-9]+'</span>, elem)</span><br><span class="line">        diff = calcTimeDiff(time[<span class="number">0</span>], time[<span class="number">1</span>])</span><br><span class="line">        vehicles[veh] = vehicles.get(veh, <span class="number">0</span>) + diff   <span class="comment"># 累加停留的所有时间</span></span><br><span class="line">    </span><br><span class="line">    vehicles = sorted(vehicles.items(), key=<span class="keyword">lambda</span> x:(x[<span class="number">1</span>]), reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 如果要把 秒 转化成 时:分:秒</span></span><br><span class="line"><span class="comment">#    vehicles = [(elem[0], sec2time(elem[1])) for elem in vehicles]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 累计停留时间最长的5辆车</span></span><br><span class="line">    print(vehicles[:<span class="number">5</span>])</span><br><span class="line">    <span class="keyword">return</span> vehicles[:<span class="number">5</span>]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># vehicle_lst: 总的ETC记录的条数</span></span><br><span class="line"><span class="comment"># fre_dict: 进出校园次数最多的5辆车</span></span><br><span class="line"><span class="comment"># inter_dict: 进出校园次数最多的5辆车</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_file</span><span class="params">(vehicle_lst, fre_dict, inter_dict, url)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'w+'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 总的 ETC记录的 条数</span></span><br><span class="line">        f.write(<span class="string">"记录条数: "</span> + str(len(vehicle_lst)) + <span class="string">'\n'</span>)</span><br><span class="line">        <span class="comment"># 共有多少辆不同的车</span></span><br><span class="line">        f.write(<span class="string">"车辆数: "</span> + str(len(get_v(vehicle_lst))) + <span class="string">'\n'</span>)</span><br><span class="line">        <span class="comment"># 进出校园次数最多的5辆车</span></span><br><span class="line">        f.write(<span class="string">"进校次数最多的5辆车（单位：次）\n"</span>)</span><br><span class="line">        <span class="keyword">for</span> elem <span class="keyword">in</span> fre_dict:</span><br><span class="line">            f.write(<span class="string">"&#123;0&#125;, &#123;1&#125;\n"</span>.format(str(elem[<span class="number">0</span>]), str(elem[<span class="number">1</span>])))</span><br><span class="line">        <span class="comment"># 在校园中累计停留时间最长的5辆车</span></span><br><span class="line">        f.write(<span class="string">"累计停留时间最长的5辆车（单位：秒）\n"</span>)</span><br><span class="line">        <span class="keyword">for</span> elem <span class="keyword">in</span> inter_dict:</span><br><span class="line">            f.write(<span class="string">"&#123;0&#125;, &#123;1&#125;\n"</span>.format(str(elem[<span class="number">0</span>]), str(elem[<span class="number">1</span>])))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 读文件，获取全部ETC记录，构成列表</span></span><br><span class="line">    vehicle_lst = get_record(<span class="string">"./file/file_2019_input.txt"</span>)	</span><br><span class="line">    <span class="comment"># 获取全部不同的ETC编号，构成集合</span></span><br><span class="line">    vehicle_set = get_v(vehicle_lst)</span><br><span class="line">    <span class="comment"># 构造车辆进出校园次数的字典</span></span><br><span class="line">    fre_dict = count_v(vehicle_lst, vehicle_set)	</span><br><span class="line">    <span class="comment"># 构造车辆累计停留时间的字典</span></span><br><span class="line">    inter_dict = count_t(vehicle_lst, vehicle_set)		             </span><br><span class="line">    <span class="comment"># 输出结果到文件中</span></span><br><span class="line">    write_to_file(vehicle_lst, fre_dict, inter_dict, <span class="string">"./file/file_2019_report.txt"</span>)	</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">main()	<span class="comment"># 调用main函数</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">记录条数: <span class="number">645</span></span><br><span class="line">车辆数: <span class="number">103</span></span><br><span class="line">进校次数最多的<span class="number">5</span>辆车（单位：次）</span><br><span class="line">BR<span class="number">-189</span><span class="number">-680</span>, <span class="number">20</span></span><br><span class="line">SX<span class="number">-733</span><span class="number">-715</span>, <span class="number">19</span></span><br><span class="line">QC<span class="number">-621</span><span class="number">-143</span>, <span class="number">18</span></span><br><span class="line">VI<span class="number">-487</span><span class="number">-543</span>, <span class="number">17</span></span><br><span class="line">TR<span class="number">-445</span><span class="number">-782</span>, <span class="number">16</span></span><br><span class="line">累计停留时间最长的<span class="number">5</span>辆车（单位：秒）</span><br><span class="line">QC<span class="number">-621</span><span class="number">-143</span>, <span class="number">828417</span></span><br><span class="line">BR<span class="number">-189</span><span class="number">-680</span>, <span class="number">756757</span></span><br><span class="line">UI<span class="number">-370</span><span class="number">-311</span>, <span class="number">722708</span></span><br><span class="line">SX<span class="number">-733</span><span class="number">-715</span>, <span class="number">701937</span></span><br><span class="line">TR<span class="number">-445</span><span class="number">-782</span>, <span class="number">697439</span></span><br></pre></td></tr></table></figure>
<p>###2016. 期中考试 提取字符串 坐标问题</p>
<figure>
<img src="/posts/51138/Users\Administrator\Desktop\上机面试png\1.png" alt="1"><figcaption>1</figcaption>
</figure>
<figure>
<img src="/posts/51138/Users\Administrator\Desktop\上机面试png\2.png" alt="2"><figcaption>2</figcaption>
</figure>
<figure>
<img src="/posts/51138/Users\Administrator\Desktop\上机面试png\3.png" alt="3"><figcaption>3</figcaption>
</figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断素数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    top = math.sqrt(n)</span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= top:</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断数中是否包含 3或7</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(n)</span>:</span></span><br><span class="line">    li = list(n)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'3'</span> <span class="keyword">in</span> li <span class="keyword">or</span> <span class="string">'7'</span> <span class="keyword">in</span> li</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFile</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'r+'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 生成坐标 A</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateA</span><span class="params">()</span>:</span></span><br><span class="line">    random.seed(<span class="number">100</span>)</span><br><span class="line">    a = random.uniform(<span class="number">0</span>, <span class="number">101</span>)</span><br><span class="line">    b = random.uniform(<span class="number">0</span>, <span class="number">101</span>)</span><br><span class="line">    <span class="keyword">return</span> (a, b)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 计算坐标点之间的距离</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> math.sqrt(math.pow(a[<span class="number">0</span>]-b[<span class="number">0</span>], <span class="number">2</span>) + math.pow(a[<span class="number">1</span>]-b[<span class="number">1</span>], <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将单词转换成整数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ASCII</span><span class="params">(word)</span>:</span></span><br><span class="line">    w = list(word)</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> w:</span><br><span class="line">        res += ord(e)</span><br><span class="line">    <span class="keyword">return</span> res </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    data = readFile(<span class="string">'./file/file_midterm.txt'</span>)</span><br><span class="line">    print(data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取所有整数</span></span><br><span class="line">    num = re.findall(<span class="string">'[0-9]+'</span>, data)</span><br><span class="line">    <span class="comment"># 判断素数 and 判断素数包含数字3或7</span></span><br><span class="line">    primes = [int(elem) <span class="keyword">for</span> elem <span class="keyword">in</span> num <span class="keyword">if</span> is_prime(int(elem)) <span class="keyword">and</span> judge(elem)]</span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="comment"># 每个值占10列、右对齐、每行显示2个数</span></span><br><span class="line">        print(<span class="string">"&#123;0:&gt;10&#125;"</span>.format(elem), end=<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">if</span> (primes.index(elem)) % <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">''</span>)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    <span class="comment"># 排序坐标</span></span><br><span class="line">    primes.sort()</span><br><span class="line"><span class="comment">#    print(primes)</span></span><br><span class="line">    </span><br><span class="line">    plen = len(primes)</span><br><span class="line">    plen = plen <span class="keyword">if</span> (plen % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">else</span> plen - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    points = [(primes[i], primes[i+<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, plen<span class="number">-1</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="comment">#    print(points)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 随机数构成的坐标点输出格式</span></span><br><span class="line">    A = generateA()</span><br><span class="line">    print(<span class="string">"(&#123;0:&gt;10.2f&#125;, &#123;1:10.2f&#125;)"</span>.format(A[<span class="number">0</span>], A[<span class="number">1</span>]))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算所有坐标点到A之间的欧式距离之和</span></span><br><span class="line">    dis = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, plen//<span class="number">2</span>):</span><br><span class="line">        d = distance(points[i], A)</span><br><span class="line">        dis.append(d)</span><br><span class="line">    print(<span class="string">"距离之和: &#123;0:.2f&#125;"</span>.format(sum(dis)))</span><br><span class="line">    print(<span class="string">"平均距离为:&#123;0:10.2f&#125;, 素数构成坐标点数为:&#123;1:10.2f&#125;"</span>.format(sum(dis) / len(dis), plen//<span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 提取所有单词</span></span><br><span class="line">    words = re.findall(<span class="string">'[a-zA-Z]+'</span>, data)</span><br><span class="line">    print(words)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"单词转化成整数:"</span>)</span><br><span class="line">    wlen = len(words)</span><br><span class="line">    ascii_words = [ASCII(elem) <span class="keyword">for</span> elem <span class="keyword">in</span> words]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, wlen):</span><br><span class="line">        print(<span class="string">'&#123;0:8&#125;'</span>.format(ascii_words[i]), end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> (i+<span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">''</span>)</span><br><span class="line">  </span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">       <span class="number">563</span>        <span class="number">773</span> </span><br><span class="line">       <span class="number">379</span>        <span class="number">631</span> </span><br><span class="line">略</span><br><span class="line">(     <span class="number">14.71</span>,      <span class="number">45.95</span>)</span><br><span class="line">距离之和: <span class="number">2203.42</span></span><br><span class="line">平均距离为:    <span class="number">550.85</span>, 素数构成坐标点数为:      <span class="number">4.00</span></span><br><span class="line">[<span class="string">'Regular'</span>, <span class="string">'expression'</span>, <span class="string">'patterns'</span>, <span class="string">'are'</span>, <span class="string">'compiled'</span>, <span class="string">'into'</span>, <span class="string">'a'</span>, <span class="string">'series'</span>, <span class="string">'of'</span>, <span class="string">'bytecodes'</span>, <span class="string">'which'</span>, <span class="string">'are'</span>, <span class="string">'then'</span>, <span class="string">'executed'</span>, <span class="string">'by'</span>, <span class="string">'a'</span>, <span class="string">'matching'</span>, <span class="string">'engine'</span>, </span><br><span class="line">单词转化成整数:</span><br><span class="line">     <span class="number">722</span>    <span class="number">1104</span>     <span class="number">881</span>     <span class="number">312</span>     <span class="number">845</span>     <span class="number">442</span>      <span class="number">97</span>     <span class="number">651</span>     <span class="number">213</span>     <span class="number">962</span></span><br><span class="line">     <span class="number">531</span>     <span class="number">312</span>     <span class="number">431</span>     <span class="number">855</span>     <span class="number">219</span>      <span class="number">97</span>     <span class="number">843</span>     <span class="number">630</span>     <span class="number">781</span>     <span class="number">215</span></span><br><span class="line">略</span><br></pre></td></tr></table></figure>
<p>###2017. 期中考试</p>
<p>现在有一文本文件data.txt，请将文本文件拷贝到D盘根目录，文本文件中包含多行字符串，每行字符串中包含若干用<strong>空格、逗号、句号</strong>分隔的单词，请编写程序完成如下功能：</p>
<ul>
<li><p>编写一个函数，从data.txt文件中读取所有单词，并保存到单词列表<strong>wordlst</strong>中。</p></li>
<li><p>编写一个函数，找出wordlst中存在某个字母 <strong>至少出现num次</strong> 的单词，<strong>字母不区分大小写</strong>，将符合要求的单词保存到列表 <strong>wordResultLst</strong> 中，其中<strong>num</strong>由参数给出。</p></li>
<li><p>编写一个函数，删除wordResultLst中重复单词多余份数，只保留一份，<strong>非重复单词保持不变</strong>。将结果仍然保存在列表wordResultLst中。</p></li>
<li><p>编写一个函数，<strong>输出wordResultLst中所有单词</strong>，要求<strong>每个单词占20列</strong>，每行输出count个单词，其中count由参数给出。</p></li>
<li><p>编写一个函数，<strong>将wordResultLst中的每一个单词转换成一个整数</strong>，保存到列表numLst中。转换规则：整数为单词的所有字母的ASCII值的累加和，例如：sum对应的整数就是s、u、m三个字母的ASCII值之和。</p></li>
<li><p>编写一个函数，对numLst中的<strong>所有整数按整数的数字累加和</strong>进行降序排序，例如整数:923,456,134对应的整数数字累加和为14，15，8，则排序结果456，923，134。</p></li>
<li><p>编写一个函数，<strong>输出排序后的numLst</strong>，<strong>要求每个整数占8列，每行输出count个整数</strong>，其中count由参数给出。</p></li>
<li><p>编写一个函数，<strong>统计numLst中每个数字出现的次数</strong>，将统计结果保存到字典resultDic中。</p></li>
<li>编写一个函数，将统计结果resultDic中出现次数最多的数字及其出现次数输出到D盘根目录的文本文件result.txt中
<ul>
<li>输出格式：<strong>数字(占2列,左对齐) ：出现次数(占3列，右对齐)</strong></li>
</ul></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">测试程序如下(不允许修改测试程序，修改一处扣<span class="number">2</span>分，直到扣满<span class="number">10</span>分)：</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># ----从data.txt文件中读取所有单词-------</span></span><br><span class="line">    wordlst = readWordsFromFile(<span class="string">"d:\\data.txt"</span>)</span><br><span class="line">    print(<span class="string">"文件中单词个数:"</span>, len(wordlst))  <span class="comment"># 输出单词个数</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="/posts/51138/Users\Administrator\Desktop\上机面试png\5.png" alt="5"><figcaption>5</figcaption>
</figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readWordsFromFile</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'r+'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        words = re.findall(<span class="string">'[a-zA-Z]+'</span>, data)</span><br><span class="line">    <span class="keyword">return</span> words</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMultiAlphaWords</span><span class="params">(wordlst, cnt)</span>:</span></span><br><span class="line">    wordResultLst = []</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> wordlst:</span><br><span class="line">        w = list(word.lower())</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> w:</span><br><span class="line">            <span class="keyword">if</span> w.count(e) &gt;= cnt:</span><br><span class="line">                wordResultLst.append(word)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(wordResultLst)</span><br><span class="line">    <span class="keyword">return</span> wordResultLst</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delMultiData</span><span class="params">(wordResultLst)</span>:</span></span><br><span class="line">    tmp = wordResultLst[::]</span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> tmp:</span><br><span class="line">        <span class="keyword">if</span> wordResultLst.count(elem) &gt; <span class="number">1</span>:</span><br><span class="line">            wordResultLst.remove(elem)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printWordLst</span><span class="params">(wordResultLst, cnt)</span>:</span></span><br><span class="line">    wlen = len(wordResultLst)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, wlen):</span><br><span class="line">        print(<span class="string">'&#123;0:20&#125;'</span>.format(wordResultLst[i]), end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span>) % cnt == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ASCII</span><span class="params">(word)</span>:</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> word:</span><br><span class="line">        ans += ord(w)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNumberOfWords</span><span class="params">(wordResultLst)</span>:</span></span><br><span class="line">    numlst = []</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> wordResultLst:</span><br><span class="line">        numlst.append(ASCII(word))</span><br><span class="line">    <span class="keyword">return</span> numlst</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numSum</span><span class="params">(x)</span>:</span></span><br><span class="line">    li = str(x)</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> li:</span><br><span class="line">        res += int(e)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortByDigitalSum</span><span class="params">(numlst)</span>:</span></span><br><span class="line">    numlst.sort(key=<span class="keyword">lambda</span> x:numSum(x), reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> numlst        </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printNumLst</span><span class="params">(numlst, cnt)</span>:</span></span><br><span class="line">    wlen = len(numlst)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, wlen):</span><br><span class="line">        print(<span class="string">'&#123;0:8&#125;'</span>.format(numlst[i]), end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span>) % cnt == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----统计数字出现的次数----------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">staticDigitalTimes</span><span class="params">(numlst)</span>:</span></span><br><span class="line">    resultDic = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> numlst:</span><br><span class="line">        num = str(e)</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> num:</span><br><span class="line">            resultDic[w] = resultDic.get(w, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    print(resultDic)</span><br><span class="line">    <span class="keyword">return</span> resultDic</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printDicToFile</span><span class="params">(url, resultDic)</span>:</span></span><br><span class="line">    resultDic = sorted(resultDic.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        print(<span class="string">'&#123;0:&lt;2&#125;:&#123;1:&gt;3&#125;'</span>.format(resultDic[<span class="number">0</span>][<span class="number">0</span>], resultDic[<span class="number">0</span>][<span class="number">1</span>]))</span><br><span class="line">        f.write(<span class="string">'&#123;0:&lt;2&#125;:&#123;1:&gt;3&#125;'</span>.format(resultDic[<span class="number">0</span>][<span class="number">0</span>], resultDic[<span class="number">0</span>][<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:   </span><br><span class="line">    <span class="comment"># ----从data.txt文件中读取所有单词-------</span></span><br><span class="line">    wordlst = readWordsFromFile(<span class="string">"./file/file_midterm_2017.txt"</span>)</span><br><span class="line">    print(<span class="string">"文件中单词个数:"</span>, len(wordlst))  <span class="comment"># 输出单词个数</span></span><br><span class="line">    <span class="comment"># ----找出单词中，存在某个字母重复num次的单词-----</span></span><br><span class="line">    wordResultLst = findMultiAlphaWords(wordlst, <span class="number">2</span>)</span><br><span class="line">    print(<span class="string">"至少含有重复2次的字母的单词："</span>, len(wordResultLst))</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">    <span class="comment"># ----删除wordResultLst中重复单词的多余份数，只保留一份-----</span></span><br><span class="line">    delMultiData(wordResultLst)</span><br><span class="line">    print(<span class="string">"===删除重复单词的多余单词后的结果==="</span>)</span><br><span class="line">    printWordLst(wordResultLst, <span class="number">4</span>)  <span class="comment"># 输出所有单词，每行输出4个单词</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ----将wordResultLst中的所有单词转换为整数------</span></span><br><span class="line">    numlst = getNumberOfWords(wordResultLst)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ----对numlst中的所有整数进行根据数字累加和进行降序排序----</span></span><br><span class="line">    sortByDigitalSum(numlst)</span><br><span class="line">    print(<span class="string">"===整数降序排序的结果==="</span>)</span><br><span class="line">    printNumLst(numlst, <span class="number">5</span>)    <span class="comment">#输出整数列表，每行输出5个整数 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ----统计数字出现的次数----------</span></span><br><span class="line">    resultDic = staticDigitalTimes(numlst)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"===出现次数最多的数字==="</span>)</span><br><span class="line">    printDicToFile(<span class="string">"./file/file_midterm_2017.out"</span>, resultDic)</span><br></pre></td></tr></table></figure>
<p>###2018. 期中考试</p>
<p>1.<img src="/posts/51138/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1588264301748.png" alt="1588264301748"></p>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    top = int(math.sqrt(num))</span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= top:</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">()</span>:</span></span><br><span class="line">    li = eval(input())    <span class="comment"># [1, 234, 5, 6, 70, 890], [12,34,56,78,90]</span></span><br><span class="line">    rli = []</span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> li:</span><br><span class="line">        estr = str(elem)</span><br><span class="line">        rli.append(int(estr[<span class="number">0</span>]))</span><br><span class="line">        rli.append(int(estr[<span class="number">-1</span>]))</span><br><span class="line">    </span><br><span class="line">    rlen = len(rli)</span><br><span class="line">    flag = [<span class="number">0</span>] * rlen</span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(rlen):</span><br><span class="line">        ps = []              <span class="comment"># 是prime</span></span><br><span class="line">        notps = []           <span class="comment"># 不是prime</span></span><br><span class="line">        <span class="keyword">if</span> flag[i] == <span class="number">0</span> <span class="keyword">and</span> is_prime(rli[i]):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, rlen):</span><br><span class="line">                <span class="keyword">if</span> flag[j] == <span class="number">0</span> <span class="keyword">and</span> is_prime(rli[j]):</span><br><span class="line">                    ps.append(rli[j])</span><br><span class="line">                    flag[j] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> ps:</span><br><span class="line">                ans.append(ps)</span><br><span class="line">        <span class="keyword">elif</span> flag[i] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, rlen):</span><br><span class="line">                <span class="keyword">if</span> flag[j] == <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> is_prime(rli[j]):</span><br><span class="line">                    notps.append(rli[j])</span><br><span class="line">                    flag[j] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> notps:</span><br><span class="line">                ans.append(notps)</span><br><span class="line">    </span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> ans:</span><br><span class="line">        comb = reduce(<span class="keyword">lambda</span> x,y:x*<span class="number">10</span>+y, elem)</span><br><span class="line">        res.append(comb)</span><br><span class="line">    print(res)</span><br><span class="line">    </span><br><span class="line">solve()</span><br></pre></td></tr></table></figure>
<p><strong>代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func4</span><span class="params">(mat)</span>:</span></span><br><span class="line">    m=len(mat)</span><br><span class="line">    mm=[[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(m)] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>*m<span class="number">-1</span>)]    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">if</span> i+j&lt;m:</span><br><span class="line">                mm[i+j][j]=mat[i][j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mm[i+j][m-i<span class="number">-1</span>]=mat[i][j]</span><br><span class="line">    <span class="keyword">return</span> mm</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">()</span>:</span></span><br><span class="line">    A = eval(input()) <span class="comment"># [[1,2,3], [4,5,6], [7,8,9]]</span></span><br><span class="line">    m = len(A)</span><br><span class="line">    B = [[<span class="number">0</span>]*m <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>*m<span class="number">-1</span>)]</span><br><span class="line">    row = <span class="number">2</span>*m - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    dic = collections.defaultdict(list)</span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> itertools.product(range(m), range(m)):</span><br><span class="line">        dic[i - j].append(A[m-i<span class="number">-1</span>][j])</span><br><span class="line"></span><br><span class="line">    dic = sorted(dic.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>], reverse=<span class="literal">True</span>)   </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(row):</span><br><span class="line">        rlen = len(dic[i][<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(rlen):</span><br><span class="line">            B[i][j] = dic[i][<span class="number">1</span>][j]          </span><br><span class="line">    print(B)</span><br><span class="line">    </span><br><span class="line">solve()</span><br><span class="line">print(func4([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]))</span><br></pre></td></tr></table></figure>
<figure>
<img src="/posts/51138/Users\Administrator\AppData\Roaming\Typora\typora-user-images\1588432579986.png" alt="1588432579986"><figcaption>1588432579986</figcaption>
</figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字母表中字幕出现的次数 &gt;= 单词的字幕出现次数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contains</span><span class="params">(charCount, wordCount)</span>:</span></span><br><span class="line">    print(charCount, wordCount)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> wordCount.keys():</span><br><span class="line">        print(charCount.get(key, <span class="number">0</span>) , wordCount.get(key))</span><br><span class="line">        <span class="keyword">if</span> charCount.get(key, <span class="number">0</span>) &lt; wordCount.get(key):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(words, chars)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">    charCount = dict(Counter(chars))</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    wlen = len(words)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, wlen):</span><br><span class="line">        wordCount = dict(Counter(words[i]))</span><br><span class="line">        <span class="keyword">if</span> contains(charCount, wordCount):</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">print(solve([<span class="string">'cat'</span>, <span class="string">'bt'</span>, <span class="string">'hat'</span>, <span class="string">'tree'</span>], <span class="string">'atach'</span>))</span><br><span class="line">print(solve([<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'soochow'</span>], <span class="string">'welldonehoneyr'</span>))</span><br></pre></td></tr></table></figure>
<h3 id="期末考试">期末考试</h3>
<p>####题目1 数组每个数出现次数</p>
<ul>
<li>给你一个整数列表lst，请你帮忙统计数组中每个数的出现次数。</li>
<li>如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。</li>
<li>输入：lst = [1,2,2,1,1,3] 输出：true 解释：在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。</li>
</ul>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(lst : list)</span>:</span></span><br><span class="line">    flag = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> lst:</span><br><span class="line">        flag[e] = flag.get(e, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> flag.values():</span><br><span class="line">       res.append(e)</span><br><span class="line">       </span><br><span class="line">    rlen = len(res)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, rlen):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, rlen):</span><br><span class="line">            <span class="keyword">if</span> res[i] == res[j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(func2([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>]))</span><br><span class="line">    print(func2([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>]))</span><br><span class="line">    print(func2([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>, <span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>]))</span><br><span class="line">    print(func2([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>, <span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>]))</span><br><span class="line">    </span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h4 id="题目2-奇数在前-偶数在后">题目2 奇数在前 偶数在后</h4>
<ul>
<li>给定一个非负整数列表 lst，返回 lst 的排序结果，排序要求 首先是 <strong>==奇数在前，偶数在后==</strong></li>
<li><p>然后，按照数字从大到小排序</p></li>
<li><p>示例： 输入：lst = [1,2,3,4,5,6] 输出： [1,3,5,2,4,6]</p></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">(lst)</span>:</span></span><br><span class="line">    length = len(lst)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> lst[j] % <span class="number">2</span> == <span class="number">0</span>:   <span class="comment"># 后面是偶数</span></span><br><span class="line">            j = j - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; j:</span><br><span class="line">            t = lst[j] </span><br><span class="line">        <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> lst[i] % <span class="number">2</span> == <span class="number">1</span>:   <span class="comment"># 前面是奇数</span></span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; j:</span><br><span class="line">            lst[j] = lst[i]</span><br><span class="line">            lst[i] = t </span><br><span class="line">    print(lst)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    fun2([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">    fun2([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">11</span>])</span><br><span class="line">    fun2([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line">    </span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<h4 id="题目3-查找添加的字母">题目3 查找添加的字母</h4>
<ul>
<li>给定两个字符串 s 和 t，它们 <strong>只包含小写字母</strong>。</li>
<li><strong>字符串 t 由字符串 s 随机重排</strong>，然后在随机位置添加一个字母。请找出在 t 中被添加的字母。</li>
<li>示例:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">s = <span class="string">"abcd"</span></span><br><span class="line">t = <span class="string">"abcde"</span></span><br><span class="line">输出：</span><br><span class="line">e</span><br><span class="line">解释：</span><br><span class="line"><span class="string">'e'</span> 是那个被添加的字母。</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 给定两个字符串 s 和 t，它们只包含小写字母。字符串 t 由字符串 s 随机重排，</span></span><br><span class="line"><span class="comment"># 然后在随机位置添加一个字母。请找出在 t 中被添加的字母。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func4</span><span class="params">(str1, str2)</span>:</span></span><br><span class="line">    s = sorted(str1)</span><br><span class="line">    t = sorted(str2)</span><br><span class="line">    slen = len(s)</span><br><span class="line">    tlen = len(t)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, slen):</span><br><span class="line">        <span class="keyword">if</span> s[i] != t[i]:</span><br><span class="line">            <span class="keyword">return</span> t[i]     </span><br><span class="line">    <span class="keyword">return</span> t[tlen - <span class="number">1</span>]        </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(func4(<span class="string">'abcd'</span>, <span class="string">'abcde'</span>))</span><br><span class="line">    print(func4(<span class="string">'abcd'</span>, <span class="string">'aebcd'</span>))   </span><br><span class="line">    print(func4(<span class="string">'abcd'</span>, <span class="string">'abecd'</span>))  </span><br><span class="line">    print(func4(<span class="string">'abbcd'</span>, <span class="string">'abbecb'</span>))</span><br><span class="line">       </span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p>###苏州大学python课程组习题</p>
<h3 id="因子和">1. 因子和</h3>
<p>编写一个函数，计算一个整数的所有因子之和，其中因子不包括整数本身，并编写测试程序，在测试程序中输入整数和输出整数的所有因子之和。例如：输入 8，调用该函数之后，得到结果为 7。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factor</span><span class="params">(num)</span>:</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; num:</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            res += i</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = int(input(<span class="string">"输入n:"</span>))</span><br><span class="line">        print(factor(n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h3 id="反素数">2. 反素数</h3>
<p>(反素数)反素数：指一个素数将其逆向拼写后也是一个素数的非回文数。 例如：17 和 71 都是素数且都不是回文数，所以 <strong>17 和 71 都是反素数</strong>。请编写一个函数判断一个数是否是反素数？并编写测试程序找出前 30 个反 素数输出到屏幕上，<strong>要求每行输出 8 个数，每个数占 5 列，右对齐</strong>。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># (反素数)反素数指一个素数将其逆向拼写后也是一个素数的非回文数。</span></span><br><span class="line"><span class="comment"># 例如：17 和 71 都是素数且都不是回文数，所以 17 和 71 都是反素数。</span></span><br><span class="line"><span class="comment"># 请编写一个函数判断一个数是否是反素数？并编写测试程序找出前 30 个反</span></span><br><span class="line"><span class="comment"># 素数输出到屏幕上，要求每行输出 8 个数，每个数占 5 列，右对齐。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># 素数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    top = math.sqrt(num)</span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= top:</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Reverse</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(str(num)[::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_res</span><span class="params">(res, length)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length):</span><br><span class="line">        print(<span class="string">"&#123;0:&gt;5&#125;"</span>.format(res[i]), end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">8</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    cur = <span class="number">2</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> cnt &lt; <span class="number">30</span>:</span><br><span class="line">        <span class="keyword">if</span> is_prime(cur) <span class="keyword">and</span> is_prime(Reverse(cur)):</span><br><span class="line">            res.append(cur)</span><br><span class="line">            cnt = cnt + <span class="number">1</span></span><br><span class="line">        cur = cur + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    print_res(res, len(res))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h3 id="梅森素数">3. 梅森素数</h3>
<p>【函数】 (梅森素数) 如果一个素数 可以 写成 <span class="math inline">\(2^{p}-1\)</span> 形式，其中 p 是一个正整数，那么该数就称作梅森素数。请编写一个函数：</p>
<ul>
<li><p>判断一个素数是否是梅森素数，如果是，则返回 p 的值，否则返回-1。</p></li>
<li><p>并编写测试程序找出 1000 以内的所有梅森素数输出到屏幕上，要求输出格式如下：</p></li>
<li><p>P(占 3 列右对齐) <span class="math inline">\(2^{p} - 1\)</span> (占 4 列右对齐) # 此行不需要输出</p></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">3</span>       <span class="number">2</span>^<span class="number">2</span><span class="number">-1</span></span><br><span class="line"><span class="number">3</span> <span class="number">7</span>       <span class="number">2</span>^<span class="number">3</span><span class="number">-1</span></span><br><span class="line"><span class="number">5</span> <span class="number">31</span>      <span class="number">2</span>^<span class="number">5</span><span class="number">-1</span></span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    top = math.sqrt(num)</span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= top:</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_MalPrime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> is_prime(num) <span class="keyword">and</span> is_prime(<span class="number">2</span>**num<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_prime</span><span class="params">()</span>:</span></span><br><span class="line">    cur = <span class="number">2</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="comment"># 注意是 2^cur &lt;= 1000</span></span><br><span class="line">    <span class="keyword">while</span> math.pow(<span class="number">2</span>,cur) &lt;= <span class="number">1000</span>:</span><br><span class="line">        <span class="keyword">if</span> is_MalPrime(cur):</span><br><span class="line">            res.append(cur)</span><br><span class="line">        cur = cur + <span class="number">1</span>    </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_res</span><span class="params">(res, length)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length):</span><br><span class="line">        print(<span class="string">"&#123;0:&gt;3&#125; &#123;1:&gt;4&#125;"</span>.format(res[i], <span class="number">2</span>**res[i]<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    res = filter_prime()</span><br><span class="line">    print_res(res, len(res))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="number">3</span>    <span class="number">7</span></span><br><span class="line"><span class="number">5</span>   <span class="number">31</span></span><br><span class="line"><span class="number">7</span>  <span class="number">127</span></span><br></pre></td></tr></table></figure>
<h3 id="加密函数">4. 加密函数</h3>
<p>编写一个<strong>加密函数：</strong></p>
<ul>
<li>实现对一个<strong>给定字符串</strong> 中的<strong>字母</strong>，<strong>转变</strong> 为其后 n个字符，如果遇到 超过字母边界，则 从最小字母继续计数</li>
<li><strong>连续 的 数字字符</strong>，作为一个整数 扩大 n 倍之后，替换到对应位置，其中 n 默认为 5。</li>
<li>再编写一个<strong>解密函数</strong>： 实现对上述加密字符串进行解密。</li>
<li>编写测试程序，在测试程序中输入字符串，并<strong>输出加密 </strong>和 <strong>解密后</strong> 的字符串。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">字符串 str1: avbV125av1, n 默认为 <span class="number">5</span></span><br><span class="line">则新的字符串 str2: fagA625fa5</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 生成字母</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateAlpha</span><span class="params">()</span>:</span></span><br><span class="line">    alpha_up = []</span><br><span class="line">    alpha_low = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">        alpha_up.append(chr(ord(<span class="string">'A'</span>) + i))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">        alpha_low.append(chr(ord(<span class="string">'a'</span>) + i))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> [alpha_low, alpha_up]</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrapy</span><span class="params">(str1, n, alpha)</span>:</span></span><br><span class="line">    alpha_low = alpha[<span class="number">0</span>]      <span class="comment"># 小写字母表</span></span><br><span class="line">    alpha_up = alpha[<span class="number">1</span>]       <span class="comment"># 大写字母表</span></span><br><span class="line">    length = len(str1)</span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; length:</span><br><span class="line">        num = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> str1[i].isupper():</span><br><span class="line">            res += alpha_up[(alpha_up.index(str1[i]) + n)%<span class="number">26</span>]</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">elif</span> str1[i].islower():</span><br><span class="line">            res += alpha_low[(alpha_low.index(str1[i]) + n)%<span class="number">26</span>]</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">elif</span> str1[i].isnumeric():</span><br><span class="line">            num += str1[i]</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; length <span class="keyword">and</span> str1[i].isnumeric():</span><br><span class="line">                num += str1[i]</span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">            <span class="comment"># 字符后退一个</span></span><br><span class="line">            i = i - <span class="number">1</span></span><br><span class="line">            <span class="comment"># 数字*n</span></span><br><span class="line">            res += str(int(num)*n)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(str1, n, alpha)</span>:</span></span><br><span class="line">    alpha_low = alpha[<span class="number">0</span>]      <span class="comment"># 小写字母表</span></span><br><span class="line">    alpha_up = alpha[<span class="number">1</span>]       <span class="comment"># 大写字母表</span></span><br><span class="line">    length = len(str1)</span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; length:</span><br><span class="line">        num = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> str1[i].isupper():</span><br><span class="line">            res += alpha_up[(alpha_up.index(str1[i]) - n)%<span class="number">26</span>]</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">elif</span> str1[i].islower():</span><br><span class="line">            res += alpha_low[(alpha_low.index(str1[i]) - n)%<span class="number">26</span>]</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">elif</span> str1[i].isnumeric():</span><br><span class="line">            num += str1[i]</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; length <span class="keyword">and</span> str1[i].isnumeric():</span><br><span class="line">                num += str1[i]</span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">            <span class="comment"># 字符后退一个</span></span><br><span class="line">            i = i - <span class="number">1</span></span><br><span class="line">            res += str(int(num)//n)  </span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    alpha = generateAlpha()</span><br><span class="line">    </span><br><span class="line">    str1 = <span class="string">'avbV125av1'</span></span><br><span class="line">    n = <span class="number">5</span></span><br><span class="line">    print(<span class="string">"字符串:&#123;0&#125;, n默认为:&#123;1&#125;"</span>.format(str1, n))</span><br><span class="line">    </span><br><span class="line">    str2 = encrapy(str1, n, alpha)</span><br><span class="line">    print(<span class="string">"加密后:&#123;0&#125;"</span>.format(str2))</span><br><span class="line">    </span><br><span class="line">    str1 = decode(str2, n, alpha)</span><br><span class="line">    print(<span class="string">"解密后:&#123;0&#125;"</span>.format(str1))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>方式2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrapy</span><span class="params">(str1, n)</span>:</span></span><br><span class="line">    words = re.findall(<span class="string">'\d+|[a-zA-Z]+'</span>, str1)</span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        <span class="keyword">if</span> word.isnumeric():</span><br><span class="line">            res += str(int(word)*n)</span><br><span class="line">        <span class="keyword">elif</span> word.isalpha():</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> word:</span><br><span class="line">                k = ord(c) + n</span><br><span class="line">                <span class="keyword">if</span> ord(<span class="string">'Z'</span>) &lt; k &lt; ord(<span class="string">'a'</span>) <span class="keyword">or</span> k &gt; ord(<span class="string">'z'</span>):</span><br><span class="line">                    res += chr(k - <span class="number">26</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res += chr(k)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(str1, n)</span>:</span></span><br><span class="line">    words = re.findall(<span class="string">'\d+|[a-zA-Z]+'</span>, str1)</span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        <span class="keyword">if</span> word.isdigit():</span><br><span class="line">            res += str(int(word)//n)</span><br><span class="line">        <span class="keyword">elif</span> word.isalpha():</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> word:</span><br><span class="line">                k = ord(c) - n</span><br><span class="line">                <span class="keyword">if</span> k &lt; ord(<span class="string">'A'</span>) <span class="keyword">or</span> ord(<span class="string">'Z'</span>) &lt; k &lt; ord(<span class="string">'a'</span>):</span><br><span class="line">                    res += chr(k + <span class="number">26</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res += chr(k)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    str1 = <span class="string">'avbV125av1'</span></span><br><span class="line">    n = <span class="number">5</span></span><br><span class="line">    print(<span class="string">"字符串:&#123;0&#125;, n默认为:&#123;1&#125;"</span>.format(str1, n))</span><br><span class="line">    </span><br><span class="line">    str2 = encrapy(str1, n)</span><br><span class="line">    print(<span class="string">"加密后:&#123;0&#125;"</span>.format(str2))</span><br><span class="line">    </span><br><span class="line">    str1 = decode(str2, n)</span><br><span class="line">    print(<span class="string">"解密后:&#123;0&#125;"</span>.format(str1))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">字符串:avbV125av1, n默认为:<span class="number">5</span></span><br><span class="line">加密后:fagA625fa5</span><br><span class="line">解密后:avbV125av1</span><br></pre></td></tr></table></figure>
<h3 id="正则表达式">5. 正则表达式</h3>
<p>请利用正则表达式写一个简单的拼写检查程序。实现以下功能： a) 两个或两个以上的空格出现时将其压缩为一个。 b) 在标点符号后加上一个空格，如果这个标点符合之后还有字母。 例：给定字符串：&quot;Thisisveryfunnyandcool.Indeed!&quot; 输出：&quot;Thisisveryfunnyandcool.Indeed!&quot; 其中“”代表一个空格。</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFile</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'r+'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lessSpace</span><span class="params">(s)</span>:</span></span><br><span class="line">    words = re.findall(<span class="string">'[a-zA-Z]+|[.?!]'</span>, s)</span><br><span class="line">    print(words)</span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        <span class="keyword">if</span> word.isalpha():</span><br><span class="line">            res += word + <span class="string">' '</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res = res[:<span class="number">-1</span>]</span><br><span class="line">            res += word + <span class="string">' '</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> res[<span class="number">-2</span>].isalpha():</span><br><span class="line">        <span class="keyword">return</span> res[:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    data = readFile(<span class="string">'./file/file10_space.txt'</span>)</span><br><span class="line">    words = lessSpace(data)    </span><br><span class="line">    print(words)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">'This'</span>, <span class="string">'is'</span>, <span class="string">'very'</span>, <span class="string">'funny'</span>, <span class="string">'and'</span>, <span class="string">'cool'</span>, <span class="string">'.'</span>, <span class="string">'Indeed'</span>, <span class="string">'!'</span>, <span class="string">'I'</span>, <span class="string">'love'</span>, <span class="string">'you'</span>, <span class="string">'.'</span>]</span><br><span class="line">This <span class="keyword">is</span> very funny <span class="keyword">and</span> cool. Indeed! I love you.</span><br></pre></td></tr></table></figure>
<h3 id="正则表达式-findall">6. 正则表达式 findall</h3>
<p>请利用正则表达式写一个 Python 程序以尝试解析 XML/HTML 标签。现有 如下一段内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">composer</span>&gt;</span>Wolfgang Amadeus Mozart<span class="tag">&lt;/<span class="name">composer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span>Samuel Beckett<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">city</span>&gt;</span>London<span class="tag">&lt;/<span class="name">city</span>&gt;</span></span><br><span class="line">希望自动格式化重写为：</span><br><span class="line">composer: Wolfgang Amadeus Mozart</span><br><span class="line">author: Samuel Beckett</span><br><span class="line">city: London</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFile</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'r'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseXML</span><span class="params">(s)</span>:</span></span><br><span class="line">    res = re.findall(<span class="string">'&lt;(.*)&gt;(.*)&lt;/.*&gt;'</span>, s)</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> res:</span><br><span class="line">        print(<span class="string">"&#123;0&#125;: &#123;1&#125;"</span>.format(word[<span class="number">0</span>], word[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    data = readFile(<span class="string">'./file/file11_parse.txt'</span>)</span><br><span class="line">    print(data)</span><br><span class="line">    parseXML(data)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;composer&gt;Wolfgang Amadeus Mozart&lt;/composer&gt;</span><br><span class="line">&lt;author&gt;Samuel Beckett&lt;/author&gt;</span><br><span class="line">&lt;city&gt;London&lt;/city&gt;</span><br><span class="line"></span><br><span class="line">composer: Wolfgang Amadeus Mozart</span><br><span class="line">author: Samuel Beckett</span><br><span class="line">city: London</span><br></pre></td></tr></table></figure>
<ol start="59" type="1">
<li><a href="选作题">文件</a>：有一个 100G 的文件 largefile.txt（这个文件目前没有100G，只是做模拟）。实现一个程序，首先输出 largefile.txt 的行数，然后无限循环，每次要求用户键盘输入一个行号，然后立刻输出对应行的文本。由于文件很大，不允许将文件内容全部放到内存中； 同时也不允许从头扫描文件，得到对应行的文本，因为这样速度太慢。（提示：用二进制模式打开文件，使用 tell, seek 等方法）</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFile</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        print(<span class="string">"行号"</span>, len(f.readlines()))</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            line = <span class="string">''</span></span><br><span class="line">            f.seek(<span class="number">0</span>)</span><br><span class="line">            cur = <span class="number">0</span></span><br><span class="line">            n = int(input(<span class="string">"input: "</span>))</span><br><span class="line">            <span class="keyword">while</span> cur &lt; n - <span class="number">1</span>:</span><br><span class="line">                f.readline()</span><br><span class="line">                cur += <span class="number">1</span></span><br><span class="line">            line = f.readline()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(line)</span><br><span class="line">            </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readFile1</span><span class="params">(url)</span>:</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            buff = f.read(<span class="number">8192</span>*<span class="number">1025</span>)</span><br><span class="line">            buff = buff.decode(<span class="string">'utf8'</span>)</span><br><span class="line">            print(buff)</span><br><span class="line">            count += buff.count(<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> buff:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(count)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment">#    readFile('./file/file15_largefile.txt')</span></span><br><span class="line">    readFile1(<span class="string">'./file/file15_largefile.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h3 id="mooc测验">MOOC测验</h3>
<h4 id="小朋友排队">5.1 小朋友排队</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">小明将学生排队  学号小到大排一排  然后进行多次调整     </span></span><br><span class="line"><span class="string">一次调整可能让一名同学出队 向前或先后移动一段距离再入队</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">例： 学生人数8人</span></span><br><span class="line"><span class="string">0）初始 1，2，3，4，5，6，7，8</span></span><br><span class="line"><span class="string">1）第一次调整 3号向后移动2   1，2，4，5，3，6，7，8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">MovingResult</span><span class="params">(self, m, lst)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        m: 学生的数量</span></span><br><span class="line"><span class="string">        lst: 每一个元素是一个元组: 元组的第一个元素是学号 第二个是移动的数量 负数表示向前</span></span><br><span class="line"><span class="string">        返回一个列表 按照顺序存储了当前位置上学生的学号[1,2,3,4,5,6,7,8]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        nums = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>)]</span><br><span class="line">        nlen = len(lst)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(nlen):</span><br><span class="line">            op = lst[i]</span><br><span class="line">            t = op[<span class="number">0</span>]</span><br><span class="line">            idx = nums.index(op[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> op[<span class="number">1</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(idx+<span class="number">1</span>, idx + op[<span class="number">1</span>]+<span class="number">1</span>):</span><br><span class="line">                    <span class="comment"># print('nums[j] -&gt; nums[j-1]', nums[j], nums[j-1])</span></span><br><span class="line">                    nums[j<span class="number">-1</span>] = nums[j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(idx<span class="number">-1</span>, idx+op[<span class="number">1</span>]<span class="number">-2</span>, <span class="number">-1</span>):</span><br><span class="line">                    <span class="comment"># print('nums[j] -&gt; nums[j+1]', nums[j], nums[j+1])</span></span><br><span class="line">                    nums[j+<span class="number">1</span>] = nums[j]</span><br><span class="line">           </span><br><span class="line">            nums[idx + op[<span class="number">1</span>]] = t </span><br><span class="line">            <span class="comment"># print('nums:', nums)</span></span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.MovingResult(m = <span class="number">8</span>, lst = [(<span class="number">3</span>, <span class="number">2</span>), (<span class="number">8</span>, <span class="number">-3</span>), (<span class="number">3</span>, <span class="number">-2</span>)]))</span><br></pre></td></tr></table></figure>
<p>####5.2 小朋友出队</p>
<ul>
<li>n个小朋友围一圈，小朋友从1~n编号。顺时针方向123...n12</li>
<li>游戏开始从1号开始顺时针报数，每个小朋友报上个小朋友数+1</li>
<li>若一个小朋友的数为k的倍数或其个位数为k，则该小朋友出去，不再参加以后的报数</li>
<li>当游戏中只剩下一个小朋友的时候该小朋友获胜</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Circleplay</span><span class="params">(self, n, k)</span>:</span></span><br><span class="line">        player = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]   <span class="comment"># 0 ~ n-1</span></span><br><span class="line">        cur = <span class="number">0</span>     <span class="comment"># 当前报号</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> len(player) &gt; <span class="number">1</span>:</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> num % k == <span class="number">0</span> <span class="keyword">or</span> num % <span class="number">10</span> == k:</span><br><span class="line">                <span class="keyword">del</span> player[cur]</span><br><span class="line">                cur = cur % len(player)    <span class="comment"># 小朋友走的时候，不需要移动 cur</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = (cur + <span class="number">1</span>) % len(player)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> player[<span class="number">0</span>] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.Circleplay(<span class="number">5</span>, <span class="number">2</span>))</span><br><span class="line">print(s.Circleplay(<span class="number">7</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>考研上机</tag>
      </tags>
  </entry>
</search>
